
Microphone_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f02c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012534  0800f1cc  0800f1cc  0001f1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021700  08021700  00040114  2**0
                  CONTENTS
  4 .ARM          00000008  08021700  08021700  00031700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021708  08021708  00040114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021708  08021708  00031708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802170c  0802170c  0003170c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08021710  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a638  20000114  08021824  00040114  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a74c  08021824  0004a74c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bfbb  00000000  00000000  00040144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bbe  00000000  00000000  0006c0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020e8  00000000  00000000  00071cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f90  00000000  00000000  00073da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c80f  00000000  00000000  00075d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002906a  00000000  00000000  00092547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad0d1  00000000  00000000  000bb5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00168682  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d58  00000000  00000000  00168744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000063dc  00000000  00000000  0017149c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000114 	.word	0x20000114
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f1b4 	.word	0x0800f1b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000118 	.word	0x20000118
 80001dc:	0800f1b4 	.word	0x0800f1b4

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_dmul>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000346:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800034a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800034e:	bf1d      	ittte	ne
 8000350:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000354:	ea94 0f0c 	teqne	r4, ip
 8000358:	ea95 0f0c 	teqne	r5, ip
 800035c:	f000 f8de 	bleq	800051c <__aeabi_dmul+0x1dc>
 8000360:	442c      	add	r4, r5
 8000362:	ea81 0603 	eor.w	r6, r1, r3
 8000366:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800036a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800036e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000372:	bf18      	it	ne
 8000374:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000378:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800037c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000380:	d038      	beq.n	80003f4 <__aeabi_dmul+0xb4>
 8000382:	fba0 ce02 	umull	ip, lr, r0, r2
 8000386:	f04f 0500 	mov.w	r5, #0
 800038a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800038e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000392:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000396:	f04f 0600 	mov.w	r6, #0
 800039a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800039e:	f09c 0f00 	teq	ip, #0
 80003a2:	bf18      	it	ne
 80003a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80003a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80003ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80003b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80003b4:	d204      	bcs.n	80003c0 <__aeabi_dmul+0x80>
 80003b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80003ba:	416d      	adcs	r5, r5
 80003bc:	eb46 0606 	adc.w	r6, r6, r6
 80003c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80003c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80003c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80003cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80003d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80003d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80003d8:	bf88      	it	hi
 80003da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80003de:	d81e      	bhi.n	800041e <__aeabi_dmul+0xde>
 80003e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80003f8:	ea46 0101 	orr.w	r1, r6, r1
 80003fc:	ea40 0002 	orr.w	r0, r0, r2
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000408:	bfc2      	ittt	gt
 800040a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800040e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000412:	bd70      	popgt	{r4, r5, r6, pc}
 8000414:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000418:	f04f 0e00 	mov.w	lr, #0
 800041c:	3c01      	subs	r4, #1
 800041e:	f300 80ab 	bgt.w	8000578 <__aeabi_dmul+0x238>
 8000422:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000426:	bfde      	ittt	le
 8000428:	2000      	movle	r0, #0
 800042a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800042e:	bd70      	pople	{r4, r5, r6, pc}
 8000430:	f1c4 0400 	rsb	r4, r4, #0
 8000434:	3c20      	subs	r4, #32
 8000436:	da35      	bge.n	80004a4 <__aeabi_dmul+0x164>
 8000438:	340c      	adds	r4, #12
 800043a:	dc1b      	bgt.n	8000474 <__aeabi_dmul+0x134>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0520 	rsb	r5, r4, #32
 8000444:	fa00 f305 	lsl.w	r3, r0, r5
 8000448:	fa20 f004 	lsr.w	r0, r0, r4
 800044c:	fa01 f205 	lsl.w	r2, r1, r5
 8000450:	ea40 0002 	orr.w	r0, r0, r2
 8000454:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000458:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800045c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000460:	fa21 f604 	lsr.w	r6, r1, r4
 8000464:	eb42 0106 	adc.w	r1, r2, r6
 8000468:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800046c:	bf08      	it	eq
 800046e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	f1c4 040c 	rsb	r4, r4, #12
 8000478:	f1c4 0520 	rsb	r5, r4, #32
 800047c:	fa00 f304 	lsl.w	r3, r0, r4
 8000480:	fa20 f005 	lsr.w	r0, r0, r5
 8000484:	fa01 f204 	lsl.w	r2, r1, r4
 8000488:	ea40 0002 	orr.w	r0, r0, r2
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000494:	f141 0100 	adc.w	r1, r1, #0
 8000498:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800049c:	bf08      	it	eq
 800049e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
 80004a4:	f1c4 0520 	rsb	r5, r4, #32
 80004a8:	fa00 f205 	lsl.w	r2, r0, r5
 80004ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80004b0:	fa20 f304 	lsr.w	r3, r0, r4
 80004b4:	fa01 f205 	lsl.w	r2, r1, r5
 80004b8:	ea43 0302 	orr.w	r3, r3, r2
 80004bc:	fa21 f004 	lsr.w	r0, r1, r4
 80004c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c4:	fa21 f204 	lsr.w	r2, r1, r4
 80004c8:	ea20 0002 	bic.w	r0, r0, r2
 80004cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80004d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004d4:	bf08      	it	eq
 80004d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	f094 0f00 	teq	r4, #0
 80004e0:	d10f      	bne.n	8000502 <__aeabi_dmul+0x1c2>
 80004e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80004e6:	0040      	lsls	r0, r0, #1
 80004e8:	eb41 0101 	adc.w	r1, r1, r1
 80004ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004f0:	bf08      	it	eq
 80004f2:	3c01      	subeq	r4, #1
 80004f4:	d0f7      	beq.n	80004e6 <__aeabi_dmul+0x1a6>
 80004f6:	ea41 0106 	orr.w	r1, r1, r6
 80004fa:	f095 0f00 	teq	r5, #0
 80004fe:	bf18      	it	ne
 8000500:	4770      	bxne	lr
 8000502:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000506:	0052      	lsls	r2, r2, #1
 8000508:	eb43 0303 	adc.w	r3, r3, r3
 800050c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000510:	bf08      	it	eq
 8000512:	3d01      	subeq	r5, #1
 8000514:	d0f7      	beq.n	8000506 <__aeabi_dmul+0x1c6>
 8000516:	ea43 0306 	orr.w	r3, r3, r6
 800051a:	4770      	bx	lr
 800051c:	ea94 0f0c 	teq	r4, ip
 8000520:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000524:	bf18      	it	ne
 8000526:	ea95 0f0c 	teqne	r5, ip
 800052a:	d00c      	beq.n	8000546 <__aeabi_dmul+0x206>
 800052c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000530:	bf18      	it	ne
 8000532:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000536:	d1d1      	bne.n	80004dc <__aeabi_dmul+0x19c>
 8000538:	ea81 0103 	eor.w	r1, r1, r3
 800053c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000540:	f04f 0000 	mov.w	r0, #0
 8000544:	bd70      	pop	{r4, r5, r6, pc}
 8000546:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800054a:	bf06      	itte	eq
 800054c:	4610      	moveq	r0, r2
 800054e:	4619      	moveq	r1, r3
 8000550:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000554:	d019      	beq.n	800058a <__aeabi_dmul+0x24a>
 8000556:	ea94 0f0c 	teq	r4, ip
 800055a:	d102      	bne.n	8000562 <__aeabi_dmul+0x222>
 800055c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000560:	d113      	bne.n	800058a <__aeabi_dmul+0x24a>
 8000562:	ea95 0f0c 	teq	r5, ip
 8000566:	d105      	bne.n	8000574 <__aeabi_dmul+0x234>
 8000568:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800056c:	bf1c      	itt	ne
 800056e:	4610      	movne	r0, r2
 8000570:	4619      	movne	r1, r3
 8000572:	d10a      	bne.n	800058a <__aeabi_dmul+0x24a>
 8000574:	ea81 0103 	eor.w	r1, r1, r3
 8000578:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800057c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd70      	pop	{r4, r5, r6, pc}
 800058a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800058e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000592:	bd70      	pop	{r4, r5, r6, pc}

08000594 <__aeabi_drsub>:
 8000594:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e002      	b.n	80005a0 <__adddf3>
 800059a:	bf00      	nop

0800059c <__aeabi_dsub>:
 800059c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080005a0 <__adddf3>:
 80005a0:	b530      	push	{r4, r5, lr}
 80005a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	bf1f      	itttt	ne
 80005b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c6:	f000 80e2 	beq.w	800078e <__adddf3+0x1ee>
 80005ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80005d2:	bfb8      	it	lt
 80005d4:	426d      	neglt	r5, r5
 80005d6:	dd0c      	ble.n	80005f2 <__adddf3+0x52>
 80005d8:	442c      	add	r4, r5
 80005da:	ea80 0202 	eor.w	r2, r0, r2
 80005de:	ea81 0303 	eor.w	r3, r1, r3
 80005e2:	ea82 0000 	eor.w	r0, r2, r0
 80005e6:	ea83 0101 	eor.w	r1, r3, r1
 80005ea:	ea80 0202 	eor.w	r2, r0, r2
 80005ee:	ea81 0303 	eor.w	r3, r1, r3
 80005f2:	2d36      	cmp	r5, #54	; 0x36
 80005f4:	bf88      	it	hi
 80005f6:	bd30      	pophi	{r4, r5, pc}
 80005f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000600:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000604:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000608:	d002      	beq.n	8000610 <__adddf3+0x70>
 800060a:	4240      	negs	r0, r0
 800060c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000610:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000614:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000618:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800061c:	d002      	beq.n	8000624 <__adddf3+0x84>
 800061e:	4252      	negs	r2, r2
 8000620:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000624:	ea94 0f05 	teq	r4, r5
 8000628:	f000 80a7 	beq.w	800077a <__adddf3+0x1da>
 800062c:	f1a4 0401 	sub.w	r4, r4, #1
 8000630:	f1d5 0e20 	rsbs	lr, r5, #32
 8000634:	db0d      	blt.n	8000652 <__adddf3+0xb2>
 8000636:	fa02 fc0e 	lsl.w	ip, r2, lr
 800063a:	fa22 f205 	lsr.w	r2, r2, r5
 800063e:	1880      	adds	r0, r0, r2
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	fa03 f20e 	lsl.w	r2, r3, lr
 8000648:	1880      	adds	r0, r0, r2
 800064a:	fa43 f305 	asr.w	r3, r3, r5
 800064e:	4159      	adcs	r1, r3
 8000650:	e00e      	b.n	8000670 <__adddf3+0xd0>
 8000652:	f1a5 0520 	sub.w	r5, r5, #32
 8000656:	f10e 0e20 	add.w	lr, lr, #32
 800065a:	2a01      	cmp	r2, #1
 800065c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000660:	bf28      	it	cs
 8000662:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000666:	fa43 f305 	asr.w	r3, r3, r5
 800066a:	18c0      	adds	r0, r0, r3
 800066c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	d507      	bpl.n	8000686 <__adddf3+0xe6>
 8000676:	f04f 0e00 	mov.w	lr, #0
 800067a:	f1dc 0c00 	rsbs	ip, ip, #0
 800067e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000682:	eb6e 0101 	sbc.w	r1, lr, r1
 8000686:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800068a:	d31b      	bcc.n	80006c4 <__adddf3+0x124>
 800068c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000690:	d30c      	bcc.n	80006ac <__adddf3+0x10c>
 8000692:	0849      	lsrs	r1, r1, #1
 8000694:	ea5f 0030 	movs.w	r0, r0, rrx
 8000698:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800069c:	f104 0401 	add.w	r4, r4, #1
 80006a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80006a8:	f080 809a 	bcs.w	80007e0 <__adddf3+0x240>
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	ea41 0105 	orr.w	r1, r1, r5
 80006c2:	bd30      	pop	{r4, r5, pc}
 80006c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006c8:	4140      	adcs	r0, r0
 80006ca:	eb41 0101 	adc.w	r1, r1, r1
 80006ce:	3c01      	subs	r4, #1
 80006d0:	bf28      	it	cs
 80006d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80006d6:	d2e9      	bcs.n	80006ac <__adddf3+0x10c>
 80006d8:	f091 0f00 	teq	r1, #0
 80006dc:	bf04      	itt	eq
 80006de:	4601      	moveq	r1, r0
 80006e0:	2000      	moveq	r0, #0
 80006e2:	fab1 f381 	clz	r3, r1
 80006e6:	bf08      	it	eq
 80006e8:	3320      	addeq	r3, #32
 80006ea:	f1a3 030b 	sub.w	r3, r3, #11
 80006ee:	f1b3 0220 	subs.w	r2, r3, #32
 80006f2:	da0c      	bge.n	800070e <__adddf3+0x16e>
 80006f4:	320c      	adds	r2, #12
 80006f6:	dd08      	ble.n	800070a <__adddf3+0x16a>
 80006f8:	f102 0c14 	add.w	ip, r2, #20
 80006fc:	f1c2 020c 	rsb	r2, r2, #12
 8000700:	fa01 f00c 	lsl.w	r0, r1, ip
 8000704:	fa21 f102 	lsr.w	r1, r1, r2
 8000708:	e00c      	b.n	8000724 <__adddf3+0x184>
 800070a:	f102 0214 	add.w	r2, r2, #20
 800070e:	bfd8      	it	le
 8000710:	f1c2 0c20 	rsble	ip, r2, #32
 8000714:	fa01 f102 	lsl.w	r1, r1, r2
 8000718:	fa20 fc0c 	lsr.w	ip, r0, ip
 800071c:	bfdc      	itt	le
 800071e:	ea41 010c 	orrle.w	r1, r1, ip
 8000722:	4090      	lslle	r0, r2
 8000724:	1ae4      	subs	r4, r4, r3
 8000726:	bfa2      	ittt	ge
 8000728:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800072c:	4329      	orrge	r1, r5
 800072e:	bd30      	popge	{r4, r5, pc}
 8000730:	ea6f 0404 	mvn.w	r4, r4
 8000734:	3c1f      	subs	r4, #31
 8000736:	da1c      	bge.n	8000772 <__adddf3+0x1d2>
 8000738:	340c      	adds	r4, #12
 800073a:	dc0e      	bgt.n	800075a <__adddf3+0x1ba>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0220 	rsb	r2, r4, #32
 8000744:	fa20 f004 	lsr.w	r0, r0, r4
 8000748:	fa01 f302 	lsl.w	r3, r1, r2
 800074c:	ea40 0003 	orr.w	r0, r0, r3
 8000750:	fa21 f304 	lsr.w	r3, r1, r4
 8000754:	ea45 0103 	orr.w	r1, r5, r3
 8000758:	bd30      	pop	{r4, r5, pc}
 800075a:	f1c4 040c 	rsb	r4, r4, #12
 800075e:	f1c4 0220 	rsb	r2, r4, #32
 8000762:	fa20 f002 	lsr.w	r0, r0, r2
 8000766:	fa01 f304 	lsl.w	r3, r1, r4
 800076a:	ea40 0003 	orr.w	r0, r0, r3
 800076e:	4629      	mov	r1, r5
 8000770:	bd30      	pop	{r4, r5, pc}
 8000772:	fa21 f004 	lsr.w	r0, r1, r4
 8000776:	4629      	mov	r1, r5
 8000778:	bd30      	pop	{r4, r5, pc}
 800077a:	f094 0f00 	teq	r4, #0
 800077e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000782:	bf06      	itte	eq
 8000784:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000788:	3401      	addeq	r4, #1
 800078a:	3d01      	subne	r5, #1
 800078c:	e74e      	b.n	800062c <__adddf3+0x8c>
 800078e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000792:	bf18      	it	ne
 8000794:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000798:	d029      	beq.n	80007ee <__adddf3+0x24e>
 800079a:	ea94 0f05 	teq	r4, r5
 800079e:	bf08      	it	eq
 80007a0:	ea90 0f02 	teqeq	r0, r2
 80007a4:	d005      	beq.n	80007b2 <__adddf3+0x212>
 80007a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80007aa:	bf04      	itt	eq
 80007ac:	4619      	moveq	r1, r3
 80007ae:	4610      	moveq	r0, r2
 80007b0:	bd30      	pop	{r4, r5, pc}
 80007b2:	ea91 0f03 	teq	r1, r3
 80007b6:	bf1e      	ittt	ne
 80007b8:	2100      	movne	r1, #0
 80007ba:	2000      	movne	r0, #0
 80007bc:	bd30      	popne	{r4, r5, pc}
 80007be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007c2:	d105      	bne.n	80007d0 <__adddf3+0x230>
 80007c4:	0040      	lsls	r0, r0, #1
 80007c6:	4149      	adcs	r1, r1
 80007c8:	bf28      	it	cs
 80007ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80007ce:	bd30      	pop	{r4, r5, pc}
 80007d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80007d4:	bf3c      	itt	cc
 80007d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80007da:	bd30      	popcc	{r4, r5, pc}
 80007dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80007e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd30      	pop	{r4, r5, pc}
 80007ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007f2:	bf1a      	itte	ne
 80007f4:	4619      	movne	r1, r3
 80007f6:	4610      	movne	r0, r2
 80007f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007fc:	bf1c      	itt	ne
 80007fe:	460b      	movne	r3, r1
 8000800:	4602      	movne	r2, r0
 8000802:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000806:	bf06      	itte	eq
 8000808:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800080c:	ea91 0f03 	teqeq	r1, r3
 8000810:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000814:	bd30      	pop	{r4, r5, pc}
 8000816:	bf00      	nop

08000818 <__aeabi_ui2d>:
 8000818:	f090 0f00 	teq	r0, #0
 800081c:	bf04      	itt	eq
 800081e:	2100      	moveq	r1, #0
 8000820:	4770      	bxeq	lr
 8000822:	b530      	push	{r4, r5, lr}
 8000824:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000828:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082c:	f04f 0500 	mov.w	r5, #0
 8000830:	f04f 0100 	mov.w	r1, #0
 8000834:	e750      	b.n	80006d8 <__adddf3+0x138>
 8000836:	bf00      	nop

08000838 <__aeabi_i2d>:
 8000838:	f090 0f00 	teq	r0, #0
 800083c:	bf04      	itt	eq
 800083e:	2100      	moveq	r1, #0
 8000840:	4770      	bxeq	lr
 8000842:	b530      	push	{r4, r5, lr}
 8000844:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000848:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000850:	bf48      	it	mi
 8000852:	4240      	negmi	r0, r0
 8000854:	f04f 0100 	mov.w	r1, #0
 8000858:	e73e      	b.n	80006d8 <__adddf3+0x138>
 800085a:	bf00      	nop

0800085c <__aeabi_f2d>:
 800085c:	0042      	lsls	r2, r0, #1
 800085e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000862:	ea4f 0131 	mov.w	r1, r1, rrx
 8000866:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800086a:	bf1f      	itttt	ne
 800086c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000870:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000874:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000878:	4770      	bxne	lr
 800087a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800087e:	bf08      	it	eq
 8000880:	4770      	bxeq	lr
 8000882:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000886:	bf04      	itt	eq
 8000888:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800088c:	4770      	bxeq	lr
 800088e:	b530      	push	{r4, r5, lr}
 8000890:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000894:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000898:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800089c:	e71c      	b.n	80006d8 <__adddf3+0x138>
 800089e:	bf00      	nop

080008a0 <__aeabi_ul2d>:
 80008a0:	ea50 0201 	orrs.w	r2, r0, r1
 80008a4:	bf08      	it	eq
 80008a6:	4770      	bxeq	lr
 80008a8:	b530      	push	{r4, r5, lr}
 80008aa:	f04f 0500 	mov.w	r5, #0
 80008ae:	e00a      	b.n	80008c6 <__aeabi_l2d+0x16>

080008b0 <__aeabi_l2d>:
 80008b0:	ea50 0201 	orrs.w	r2, r0, r1
 80008b4:	bf08      	it	eq
 80008b6:	4770      	bxeq	lr
 80008b8:	b530      	push	{r4, r5, lr}
 80008ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80008be:	d502      	bpl.n	80008c6 <__aeabi_l2d+0x16>
 80008c0:	4240      	negs	r0, r0
 80008c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80008d2:	f43f aed8 	beq.w	8000686 <__adddf3+0xe6>
 80008d6:	f04f 0203 	mov.w	r2, #3
 80008da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008de:	bf18      	it	ne
 80008e0:	3203      	addne	r2, #3
 80008e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008e6:	bf18      	it	ne
 80008e8:	3203      	addne	r2, #3
 80008ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008ee:	f1c2 0320 	rsb	r3, r2, #32
 80008f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80008f6:	fa20 f002 	lsr.w	r0, r0, r2
 80008fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80008fe:	ea40 000e 	orr.w	r0, r0, lr
 8000902:	fa21 f102 	lsr.w	r1, r1, r2
 8000906:	4414      	add	r4, r2
 8000908:	e6bd      	b.n	8000686 <__adddf3+0xe6>
 800090a:	bf00      	nop

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <__aeabi_uldivmod>:
 800094c:	b953      	cbnz	r3, 8000964 <__aeabi_uldivmod+0x18>
 800094e:	b94a      	cbnz	r2, 8000964 <__aeabi_uldivmod+0x18>
 8000950:	2900      	cmp	r1, #0
 8000952:	bf08      	it	eq
 8000954:	2800      	cmpeq	r0, #0
 8000956:	bf1c      	itt	ne
 8000958:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800095c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000960:	f000 b974 	b.w	8000c4c <__aeabi_idiv0>
 8000964:	f1ad 0c08 	sub.w	ip, sp, #8
 8000968:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800096c:	f000 f806 	bl	800097c <__udivmoddi4>
 8000970:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000978:	b004      	add	sp, #16
 800097a:	4770      	bx	lr

0800097c <__udivmoddi4>:
 800097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000980:	9d08      	ldr	r5, [sp, #32]
 8000982:	4604      	mov	r4, r0
 8000984:	468e      	mov	lr, r1
 8000986:	2b00      	cmp	r3, #0
 8000988:	d14d      	bne.n	8000a26 <__udivmoddi4+0xaa>
 800098a:	428a      	cmp	r2, r1
 800098c:	4694      	mov	ip, r2
 800098e:	d969      	bls.n	8000a64 <__udivmoddi4+0xe8>
 8000990:	fab2 f282 	clz	r2, r2
 8000994:	b152      	cbz	r2, 80009ac <__udivmoddi4+0x30>
 8000996:	fa01 f302 	lsl.w	r3, r1, r2
 800099a:	f1c2 0120 	rsb	r1, r2, #32
 800099e:	fa20 f101 	lsr.w	r1, r0, r1
 80009a2:	fa0c fc02 	lsl.w	ip, ip, r2
 80009a6:	ea41 0e03 	orr.w	lr, r1, r3
 80009aa:	4094      	lsls	r4, r2
 80009ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b0:	0c21      	lsrs	r1, r4, #16
 80009b2:	fbbe f6f8 	udiv	r6, lr, r8
 80009b6:	fa1f f78c 	uxth.w	r7, ip
 80009ba:	fb08 e316 	mls	r3, r8, r6, lr
 80009be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009c2:	fb06 f107 	mul.w	r1, r6, r7
 80009c6:	4299      	cmp	r1, r3
 80009c8:	d90a      	bls.n	80009e0 <__udivmoddi4+0x64>
 80009ca:	eb1c 0303 	adds.w	r3, ip, r3
 80009ce:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009d2:	f080 811f 	bcs.w	8000c14 <__udivmoddi4+0x298>
 80009d6:	4299      	cmp	r1, r3
 80009d8:	f240 811c 	bls.w	8000c14 <__udivmoddi4+0x298>
 80009dc:	3e02      	subs	r6, #2
 80009de:	4463      	add	r3, ip
 80009e0:	1a5b      	subs	r3, r3, r1
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e8:	fb08 3310 	mls	r3, r8, r0, r3
 80009ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009f0:	fb00 f707 	mul.w	r7, r0, r7
 80009f4:	42a7      	cmp	r7, r4
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x92>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a00:	f080 810a 	bcs.w	8000c18 <__udivmoddi4+0x29c>
 8000a04:	42a7      	cmp	r7, r4
 8000a06:	f240 8107 	bls.w	8000c18 <__udivmoddi4+0x29c>
 8000a0a:	4464      	add	r4, ip
 8000a0c:	3802      	subs	r0, #2
 8000a0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a12:	1be4      	subs	r4, r4, r7
 8000a14:	2600      	movs	r6, #0
 8000a16:	b11d      	cbz	r5, 8000a20 <__udivmoddi4+0xa4>
 8000a18:	40d4      	lsrs	r4, r2
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a20:	4631      	mov	r1, r6
 8000a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d909      	bls.n	8000a3e <__udivmoddi4+0xc2>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	f000 80ef 	beq.w	8000c0e <__udivmoddi4+0x292>
 8000a30:	2600      	movs	r6, #0
 8000a32:	e9c5 0100 	strd	r0, r1, [r5]
 8000a36:	4630      	mov	r0, r6
 8000a38:	4631      	mov	r1, r6
 8000a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3e:	fab3 f683 	clz	r6, r3
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d14a      	bne.n	8000adc <__udivmoddi4+0x160>
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d302      	bcc.n	8000a50 <__udivmoddi4+0xd4>
 8000a4a:	4282      	cmp	r2, r0
 8000a4c:	f200 80f9 	bhi.w	8000c42 <__udivmoddi4+0x2c6>
 8000a50:	1a84      	subs	r4, r0, r2
 8000a52:	eb61 0303 	sbc.w	r3, r1, r3
 8000a56:	2001      	movs	r0, #1
 8000a58:	469e      	mov	lr, r3
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	d0e0      	beq.n	8000a20 <__udivmoddi4+0xa4>
 8000a5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a62:	e7dd      	b.n	8000a20 <__udivmoddi4+0xa4>
 8000a64:	b902      	cbnz	r2, 8000a68 <__udivmoddi4+0xec>
 8000a66:	deff      	udf	#255	; 0xff
 8000a68:	fab2 f282 	clz	r2, r2
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	f040 8092 	bne.w	8000b96 <__udivmoddi4+0x21a>
 8000a72:	eba1 010c 	sub.w	r1, r1, ip
 8000a76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a7a:	fa1f fe8c 	uxth.w	lr, ip
 8000a7e:	2601      	movs	r6, #1
 8000a80:	0c20      	lsrs	r0, r4, #16
 8000a82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a86:	fb07 1113 	mls	r1, r7, r3, r1
 8000a8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a8e:	fb0e f003 	mul.w	r0, lr, r3
 8000a92:	4288      	cmp	r0, r1
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x12c>
 8000a96:	eb1c 0101 	adds.w	r1, ip, r1
 8000a9a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a9e:	d202      	bcs.n	8000aa6 <__udivmoddi4+0x12a>
 8000aa0:	4288      	cmp	r0, r1
 8000aa2:	f200 80cb 	bhi.w	8000c3c <__udivmoddi4+0x2c0>
 8000aa6:	4643      	mov	r3, r8
 8000aa8:	1a09      	subs	r1, r1, r0
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ab8:	fb0e fe00 	mul.w	lr, lr, r0
 8000abc:	45a6      	cmp	lr, r4
 8000abe:	d908      	bls.n	8000ad2 <__udivmoddi4+0x156>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ac8:	d202      	bcs.n	8000ad0 <__udivmoddi4+0x154>
 8000aca:	45a6      	cmp	lr, r4
 8000acc:	f200 80bb 	bhi.w	8000c46 <__udivmoddi4+0x2ca>
 8000ad0:	4608      	mov	r0, r1
 8000ad2:	eba4 040e 	sub.w	r4, r4, lr
 8000ad6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ada:	e79c      	b.n	8000a16 <__udivmoddi4+0x9a>
 8000adc:	f1c6 0720 	rsb	r7, r6, #32
 8000ae0:	40b3      	lsls	r3, r6
 8000ae2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ae6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aea:	fa20 f407 	lsr.w	r4, r0, r7
 8000aee:	fa01 f306 	lsl.w	r3, r1, r6
 8000af2:	431c      	orrs	r4, r3
 8000af4:	40f9      	lsrs	r1, r7
 8000af6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000afa:	fa00 f306 	lsl.w	r3, r0, r6
 8000afe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b02:	0c20      	lsrs	r0, r4, #16
 8000b04:	fa1f fe8c 	uxth.w	lr, ip
 8000b08:	fb09 1118 	mls	r1, r9, r8, r1
 8000b0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b10:	fb08 f00e 	mul.w	r0, r8, lr
 8000b14:	4288      	cmp	r0, r1
 8000b16:	fa02 f206 	lsl.w	r2, r2, r6
 8000b1a:	d90b      	bls.n	8000b34 <__udivmoddi4+0x1b8>
 8000b1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b20:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b24:	f080 8088 	bcs.w	8000c38 <__udivmoddi4+0x2bc>
 8000b28:	4288      	cmp	r0, r1
 8000b2a:	f240 8085 	bls.w	8000c38 <__udivmoddi4+0x2bc>
 8000b2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b32:	4461      	add	r1, ip
 8000b34:	1a09      	subs	r1, r1, r0
 8000b36:	b2a4      	uxth	r4, r4
 8000b38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b48:	458e      	cmp	lr, r1
 8000b4a:	d908      	bls.n	8000b5e <__udivmoddi4+0x1e2>
 8000b4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b50:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b54:	d26c      	bcs.n	8000c30 <__udivmoddi4+0x2b4>
 8000b56:	458e      	cmp	lr, r1
 8000b58:	d96a      	bls.n	8000c30 <__udivmoddi4+0x2b4>
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	4461      	add	r1, ip
 8000b5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b62:	fba0 9402 	umull	r9, r4, r0, r2
 8000b66:	eba1 010e 	sub.w	r1, r1, lr
 8000b6a:	42a1      	cmp	r1, r4
 8000b6c:	46c8      	mov	r8, r9
 8000b6e:	46a6      	mov	lr, r4
 8000b70:	d356      	bcc.n	8000c20 <__udivmoddi4+0x2a4>
 8000b72:	d053      	beq.n	8000c1c <__udivmoddi4+0x2a0>
 8000b74:	b15d      	cbz	r5, 8000b8e <__udivmoddi4+0x212>
 8000b76:	ebb3 0208 	subs.w	r2, r3, r8
 8000b7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b82:	fa22 f306 	lsr.w	r3, r2, r6
 8000b86:	40f1      	lsrs	r1, r6
 8000b88:	431f      	orrs	r7, r3
 8000b8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b8e:	2600      	movs	r6, #0
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	f1c2 0320 	rsb	r3, r2, #32
 8000b9a:	40d8      	lsrs	r0, r3
 8000b9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	4301      	orrs	r1, r0
 8000ba8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bac:	fa1f fe8c 	uxth.w	lr, ip
 8000bb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000bb8:	0c0b      	lsrs	r3, r1, #16
 8000bba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000bc2:	429e      	cmp	r6, r3
 8000bc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0x260>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bd2:	d22f      	bcs.n	8000c34 <__udivmoddi4+0x2b8>
 8000bd4:	429e      	cmp	r6, r3
 8000bd6:	d92d      	bls.n	8000c34 <__udivmoddi4+0x2b8>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	4463      	add	r3, ip
 8000bdc:	1b9b      	subs	r3, r3, r6
 8000bde:	b289      	uxth	r1, r1
 8000be0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000be4:	fb07 3316 	mls	r3, r7, r6, r3
 8000be8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bec:	fb06 f30e 	mul.w	r3, r6, lr
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d908      	bls.n	8000c06 <__udivmoddi4+0x28a>
 8000bf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bfc:	d216      	bcs.n	8000c2c <__udivmoddi4+0x2b0>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d914      	bls.n	8000c2c <__udivmoddi4+0x2b0>
 8000c02:	3e02      	subs	r6, #2
 8000c04:	4461      	add	r1, ip
 8000c06:	1ac9      	subs	r1, r1, r3
 8000c08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c0c:	e738      	b.n	8000a80 <__udivmoddi4+0x104>
 8000c0e:	462e      	mov	r6, r5
 8000c10:	4628      	mov	r0, r5
 8000c12:	e705      	b.n	8000a20 <__udivmoddi4+0xa4>
 8000c14:	4606      	mov	r6, r0
 8000c16:	e6e3      	b.n	80009e0 <__udivmoddi4+0x64>
 8000c18:	4618      	mov	r0, r3
 8000c1a:	e6f8      	b.n	8000a0e <__udivmoddi4+0x92>
 8000c1c:	454b      	cmp	r3, r9
 8000c1e:	d2a9      	bcs.n	8000b74 <__udivmoddi4+0x1f8>
 8000c20:	ebb9 0802 	subs.w	r8, r9, r2
 8000c24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c28:	3801      	subs	r0, #1
 8000c2a:	e7a3      	b.n	8000b74 <__udivmoddi4+0x1f8>
 8000c2c:	4646      	mov	r6, r8
 8000c2e:	e7ea      	b.n	8000c06 <__udivmoddi4+0x28a>
 8000c30:	4620      	mov	r0, r4
 8000c32:	e794      	b.n	8000b5e <__udivmoddi4+0x1e2>
 8000c34:	4640      	mov	r0, r8
 8000c36:	e7d1      	b.n	8000bdc <__udivmoddi4+0x260>
 8000c38:	46d0      	mov	r8, sl
 8000c3a:	e77b      	b.n	8000b34 <__udivmoddi4+0x1b8>
 8000c3c:	3b02      	subs	r3, #2
 8000c3e:	4461      	add	r1, ip
 8000c40:	e732      	b.n	8000aa8 <__udivmoddi4+0x12c>
 8000c42:	4630      	mov	r0, r6
 8000c44:	e709      	b.n	8000a5a <__udivmoddi4+0xde>
 8000c46:	4464      	add	r4, ip
 8000c48:	3802      	subs	r0, #2
 8000c4a:	e742      	b.n	8000ad2 <__udivmoddi4+0x156>

08000c4c <__aeabi_idiv0>:
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <SELECT>:



/* SPI Chip Select */
static void SELECT(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2101      	movs	r1, #1
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <SELECT+0x14>)
 8000c5a:	f003 f91d 	bl	8003e98 <HAL_GPIO_WritePin>
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40020400 	.word	0x40020400

08000c68 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2101      	movs	r1, #1
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <DESELECT+0x14>)
 8000c72:	f003 f911 	bl	8003e98 <HAL_GPIO_WritePin>
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40020400 	.word	0x40020400

08000c80 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000c8a:	bf00      	nop
 8000c8c:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <SPI_TxByte+0x30>)
 8000c8e:	f004 fdb2 	bl	80057f6 <HAL_SPI_GetState>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d1f9      	bne.n	8000c8c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000c98:	1df9      	adds	r1, r7, #7
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <SPI_TxByte+0x30>)
 8000ca2:	f004 faca 	bl	800523a <HAL_SPI_Transmit>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000230 	.word	0x20000230

08000cb4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000cba:	23ff      	movs	r3, #255	; 0xff
 8000cbc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8000cc2:	bf00      	nop
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <SPI_RxByte+0x38>)
 8000cc6:	f004 fd96 	bl	80057f6 <HAL_SPI_GetState>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d1f9      	bne.n	8000cc4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000cd0:	1dba      	adds	r2, r7, #6
 8000cd2:	1df9      	adds	r1, r7, #7
 8000cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2301      	movs	r3, #1
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <SPI_RxByte+0x38>)
 8000cde:	f004 fbe8 	bl	80054b2 <HAL_SPI_TransmitReceive>

  return data;
 8000ce2:	79bb      	ldrb	r3, [r7, #6]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000230 	.word	0x20000230

08000cf0 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000cf8:	f7ff ffdc 	bl	8000cb4 <SPI_RxByte>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	701a      	strb	r2, [r3, #0]
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <SD_ReadyWait+0x34>)
 8000d14:	2232      	movs	r2, #50	; 0x32
 8000d16:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000d18:	f7ff ffcc 	bl	8000cb4 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000d1c:	f7ff ffca 	bl	8000cb4 <SPI_RxByte>
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d004      	beq.n	8000d34 <SD_ReadyWait+0x28>
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <SD_ReadyWait+0x34>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f3      	bne.n	8000d1c <SD_ReadyWait+0x10>

  return res;
 8000d34:	79fb      	ldrb	r3, [r7, #7]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20005ce5 	.word	0x20005ce5

08000d44 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000d4a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000d4e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000d50:	f7ff ff8a 	bl	8000c68 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	e005      	b.n	8000d66 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000d5a:	20ff      	movs	r0, #255	; 0xff
 8000d5c:	f7ff ff90 	bl	8000c80 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	3301      	adds	r3, #1
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	2b09      	cmp	r3, #9
 8000d6a:	ddf6      	ble.n	8000d5a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000d6c:	f7ff ff70 	bl	8000c50 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000d70:	2340      	movs	r3, #64	; 0x40
 8000d72:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000d84:	2395      	movs	r3, #149	; 0x95
 8000d86:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	e009      	b.n	8000da2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000d8e:	1d3a      	adds	r2, r7, #4
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff72 	bl	8000c80 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	ddf2      	ble.n	8000d8e <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000da8:	e002      	b.n	8000db0 <SD_PowerOn+0x6c>
  {
    Count--;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000db0:	f7ff ff80 	bl	8000cb4 <SPI_RxByte>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d002      	beq.n	8000dc0 <SD_PowerOn+0x7c>
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1f4      	bne.n	8000daa <SD_PowerOn+0x66>
  }

  DESELECT();
 8000dc0:	f7ff ff52 	bl	8000c68 <DESELECT>
  SPI_TxByte(0XFF);
 8000dc4:	20ff      	movs	r0, #255	; 0xff
 8000dc6:	f7ff ff5b 	bl	8000c80 <SPI_TxByte>

  PowerFlag = 1;
 8000dca:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <SD_PowerOn+0x94>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000131 	.word	0x20000131

08000ddc <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <SD_PowerOff+0x14>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	20000131 	.word	0x20000131

08000df4 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <SD_CheckPower+0x14>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000131 	.word	0x20000131

08000e0c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <SD_RxDataBlock+0x68>)
 8000e18:	220a      	movs	r2, #10
 8000e1a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000e1c:	f7ff ff4a 	bl	8000cb4 <SPI_RxByte>
 8000e20:	4603      	mov	r3, r0
 8000e22:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	2bff      	cmp	r3, #255	; 0xff
 8000e28:	d104      	bne.n	8000e34 <SD_RxDataBlock+0x28>
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <SD_RxDataBlock+0x68>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f3      	bne.n	8000e1c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	2bfe      	cmp	r3, #254	; 0xfe
 8000e38:	d001      	beq.n	8000e3e <SD_RxDataBlock+0x32>
    return FALSE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e016      	b.n	8000e6c <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff53 	bl	8000cf0 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff4d 	bl	8000cf0 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	3b02      	subs	r3, #2
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1ed      	bne.n	8000e3e <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000e62:	f7ff ff27 	bl	8000cb4 <SPI_RxByte>
  SPI_RxByte();
 8000e66:	f7ff ff25 	bl	8000cb4 <SPI_RxByte>

  return TRUE;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20005ce4 	.word	0x20005ce4

08000e78 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000e88:	f7ff ff40 	bl	8000d0c <SD_ReadyWait>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2bff      	cmp	r3, #255	; 0xff
 8000e90:	d001      	beq.n	8000e96 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e040      	b.n	8000f18 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fef1 	bl	8000c80 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	2bfd      	cmp	r3, #253	; 0xfd
 8000ea2:	d031      	beq.n	8000f08 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fee5 	bl	8000c80 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fede 	bl	8000c80 <SPI_TxByte>
    } while (--wc);
 8000ec4:	7bbb      	ldrb	r3, [r7, #14]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	73bb      	strb	r3, [r7, #14]
 8000eca:	7bbb      	ldrb	r3, [r7, #14]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1eb      	bne.n	8000ea8 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000ed0:	f7ff fef0 	bl	8000cb4 <SPI_RxByte>
    SPI_RxByte();
 8000ed4:	f7ff feee 	bl	8000cb4 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000ed8:	e00b      	b.n	8000ef2 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000eda:	f7ff feeb 	bl	8000cb4 <SPI_RxByte>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	f003 031f 	and.w	r3, r3, #31
 8000ee8:	2b05      	cmp	r3, #5
 8000eea:	d006      	beq.n	8000efa <SD_TxDataBlock+0x82>
        break;

      i++;
 8000eec:	7b7b      	ldrb	r3, [r7, #13]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000ef2:	7b7b      	ldrb	r3, [r7, #13]
 8000ef4:	2b40      	cmp	r3, #64	; 0x40
 8000ef6:	d9f0      	bls.n	8000eda <SD_TxDataBlock+0x62>
 8000ef8:	e000      	b.n	8000efc <SD_TxDataBlock+0x84>
        break;
 8000efa:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000efc:	bf00      	nop
 8000efe:	f7ff fed9 	bl	8000cb4 <SPI_RxByte>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0fa      	beq.n	8000efe <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	f003 031f 	and.w	r3, r3, #31
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	d101      	bne.n	8000f16 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000f2c:	f7ff feee 	bl	8000d0c <SD_ReadyWait>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2bff      	cmp	r3, #255	; 0xff
 8000f34:	d001      	beq.n	8000f3a <SD_SendCmd+0x1a>
    return 0xFF;
 8000f36:	23ff      	movs	r3, #255	; 0xff
 8000f38:	e040      	b.n	8000fbc <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fe9f 	bl	8000c80 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	0e1b      	lsrs	r3, r3, #24
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fe99 	bl	8000c80 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	0c1b      	lsrs	r3, r3, #16
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fe93 	bl	8000c80 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fe8d 	bl	8000c80 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fe88 	bl	8000c80 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b40      	cmp	r3, #64	; 0x40
 8000f78:	d101      	bne.n	8000f7e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000f7a:	2395      	movs	r3, #149	; 0x95
 8000f7c:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b48      	cmp	r3, #72	; 0x48
 8000f82:	d101      	bne.n	8000f88 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000f84:	2387      	movs	r3, #135	; 0x87
 8000f86:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fe78 	bl	8000c80 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b4c      	cmp	r3, #76	; 0x4c
 8000f94:	d101      	bne.n	8000f9a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000f96:	f7ff fe8d 	bl	8000cb4 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000f9e:	f7ff fe89 	bl	8000cb4 <SPI_RxByte>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000fa6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	da05      	bge.n	8000fba <SD_SendCmd+0x9a>
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	73bb      	strb	r3, [r7, #14]
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f1      	bne.n	8000f9e <SD_SendCmd+0x7e>

  return res;
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e0d5      	b.n	8001184 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000fd8:	4b6c      	ldr	r3, [pc, #432]	; (800118c <SD_disk_initialize+0x1c8>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <SD_disk_initialize+0x2a>
    return Stat;
 8000fe6:	4b69      	ldr	r3, [pc, #420]	; (800118c <SD_disk_initialize+0x1c8>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	e0ca      	b.n	8001184 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000fee:	f7ff fea9 	bl	8000d44 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000ff2:	f7ff fe2d 	bl	8000c50 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2040      	movs	r0, #64	; 0x40
 8000ffe:	f7ff ff8f 	bl	8000f20 <SD_SendCmd>
 8001002:	4603      	mov	r3, r0
 8001004:	2b01      	cmp	r3, #1
 8001006:	f040 80a5 	bne.w	8001154 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800100a:	4b61      	ldr	r3, [pc, #388]	; (8001190 <SD_disk_initialize+0x1cc>)
 800100c:	2264      	movs	r2, #100	; 0x64
 800100e:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001010:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001014:	2048      	movs	r0, #72	; 0x48
 8001016:	f7ff ff83 	bl	8000f20 <SD_SendCmd>
 800101a:	4603      	mov	r3, r0
 800101c:	2b01      	cmp	r3, #1
 800101e:	d158      	bne.n	80010d2 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e00c      	b.n	8001040 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001026:	7bfc      	ldrb	r4, [r7, #15]
 8001028:	f7ff fe44 	bl	8000cb4 <SPI_RxByte>
 800102c:	4603      	mov	r3, r0
 800102e:	461a      	mov	r2, r3
 8001030:	f104 0310 	add.w	r3, r4, #16
 8001034:	443b      	add	r3, r7
 8001036:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	3301      	adds	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	2b03      	cmp	r3, #3
 8001044:	d9ef      	bls.n	8001026 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001046:	7abb      	ldrb	r3, [r7, #10]
 8001048:	2b01      	cmp	r3, #1
 800104a:	f040 8083 	bne.w	8001154 <SD_disk_initialize+0x190>
 800104e:	7afb      	ldrb	r3, [r7, #11]
 8001050:	2baa      	cmp	r3, #170	; 0xaa
 8001052:	d17f      	bne.n	8001154 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001054:	2100      	movs	r1, #0
 8001056:	2077      	movs	r0, #119	; 0x77
 8001058:	f7ff ff62 	bl	8000f20 <SD_SendCmd>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d807      	bhi.n	8001072 <SD_disk_initialize+0xae>
 8001062:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001066:	2069      	movs	r0, #105	; 0x69
 8001068:	f7ff ff5a 	bl	8000f20 <SD_SendCmd>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001072:	4b47      	ldr	r3, [pc, #284]	; (8001190 <SD_disk_initialize+0x1cc>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1eb      	bne.n	8001054 <SD_disk_initialize+0x90>
 800107c:	e000      	b.n	8001080 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800107e:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001080:	4b43      	ldr	r3, [pc, #268]	; (8001190 <SD_disk_initialize+0x1cc>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d064      	beq.n	8001154 <SD_disk_initialize+0x190>
 800108a:	2100      	movs	r1, #0
 800108c:	207a      	movs	r0, #122	; 0x7a
 800108e:	f7ff ff47 	bl	8000f20 <SD_SendCmd>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d15d      	bne.n	8001154 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e00c      	b.n	80010b8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800109e:	7bfc      	ldrb	r4, [r7, #15]
 80010a0:	f7ff fe08 	bl	8000cb4 <SPI_RxByte>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	f104 0310 	add.w	r3, r4, #16
 80010ac:	443b      	add	r3, r7
 80010ae:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	3301      	adds	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d9ef      	bls.n	800109e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80010be:	7a3b      	ldrb	r3, [r7, #8]
 80010c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SD_disk_initialize+0x108>
 80010c8:	2306      	movs	r3, #6
 80010ca:	e000      	b.n	80010ce <SD_disk_initialize+0x10a>
 80010cc:	2302      	movs	r3, #2
 80010ce:	73bb      	strb	r3, [r7, #14]
 80010d0:	e040      	b.n	8001154 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80010d2:	2100      	movs	r1, #0
 80010d4:	2077      	movs	r0, #119	; 0x77
 80010d6:	f7ff ff23 	bl	8000f20 <SD_SendCmd>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d808      	bhi.n	80010f2 <SD_disk_initialize+0x12e>
 80010e0:	2100      	movs	r1, #0
 80010e2:	2069      	movs	r0, #105	; 0x69
 80010e4:	f7ff ff1c 	bl	8000f20 <SD_SendCmd>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d801      	bhi.n	80010f2 <SD_disk_initialize+0x12e>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e000      	b.n	80010f4 <SD_disk_initialize+0x130>
 80010f2:	2301      	movs	r3, #1
 80010f4:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d10e      	bne.n	800111a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80010fc:	2100      	movs	r1, #0
 80010fe:	2077      	movs	r0, #119	; 0x77
 8001100:	f7ff ff0e 	bl	8000f20 <SD_SendCmd>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	d80e      	bhi.n	8001128 <SD_disk_initialize+0x164>
 800110a:	2100      	movs	r1, #0
 800110c:	2069      	movs	r0, #105	; 0x69
 800110e:	f7ff ff07 	bl	8000f20 <SD_SendCmd>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d107      	bne.n	8001128 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001118:	e00d      	b.n	8001136 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800111a:	2100      	movs	r1, #0
 800111c:	2041      	movs	r0, #65	; 0x41
 800111e:	f7ff feff 	bl	8000f20 <SD_SendCmd>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <SD_disk_initialize+0x1cc>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1e1      	bne.n	80010f6 <SD_disk_initialize+0x132>
 8001132:	e000      	b.n	8001136 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001134:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <SD_disk_initialize+0x1cc>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <SD_disk_initialize+0x18c>
 8001140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001144:	2050      	movs	r0, #80	; 0x50
 8001146:	f7ff feeb 	bl	8000f20 <SD_SendCmd>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001154:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <SD_disk_initialize+0x1d0>)
 8001156:	7bbb      	ldrb	r3, [r7, #14]
 8001158:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800115a:	f7ff fd85 	bl	8000c68 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800115e:	f7ff fda9 	bl	8000cb4 <SPI_RxByte>

  if (type)
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d008      	beq.n	800117a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <SD_disk_initialize+0x1c8>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f023 0301 	bic.w	r3, r3, #1
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SD_disk_initialize+0x1c8>)
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	e001      	b.n	800117e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800117a:	f7ff fe2f 	bl	8000ddc <SD_PowerOff>
  }

  return Stat;
 800117e:	4b03      	ldr	r3, [pc, #12]	; (800118c <SD_disk_initialize+0x1c8>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
}
 8001184:	4618      	mov	r0, r3
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	bd90      	pop	{r4, r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	20005ce4 	.word	0x20005ce4
 8001194:	20000130 	.word	0x20000130

08001198 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SD_disk_status+0x14>
    return STA_NOINIT;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e002      	b.n	80011b2 <SD_disk_status+0x1a>

  return Stat;
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SD_disk_status+0x28>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000000 	.word	0x20000000

080011c4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <SD_disk_read+0x1c>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <SD_disk_read+0x20>
    return RES_PARERR;
 80011e0:	2304      	movs	r3, #4
 80011e2:	e051      	b.n	8001288 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <SD_disk_read+0xcc>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SD_disk_read+0x32>
    return RES_NOTRDY;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e048      	b.n	8001288 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80011f6:	4b27      	ldr	r3, [pc, #156]	; (8001294 <SD_disk_read+0xd0>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d102      	bne.n	8001208 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	025b      	lsls	r3, r3, #9
 8001206:	607b      	str	r3, [r7, #4]

  SELECT();
 8001208:	f7ff fd22 	bl	8000c50 <SELECT>

  if (count == 1)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d111      	bne.n	8001236 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	2051      	movs	r0, #81	; 0x51
 8001216:	f7ff fe83 	bl	8000f20 <SD_SendCmd>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d129      	bne.n	8001274 <SD_disk_read+0xb0>
 8001220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001224:	68b8      	ldr	r0, [r7, #8]
 8001226:	f7ff fdf1 	bl	8000e0c <SD_RxDataBlock>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d021      	beq.n	8001274 <SD_disk_read+0xb0>
      count = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	e01e      	b.n	8001274 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	2052      	movs	r0, #82	; 0x52
 800123a:	f7ff fe71 	bl	8000f20 <SD_SendCmd>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d117      	bne.n	8001274 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001244:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001248:	68b8      	ldr	r0, [r7, #8]
 800124a:	f7ff fddf 	bl	8000e0c <SD_RxDataBlock>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00a      	beq.n	800126a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800125a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3b01      	subs	r3, #1
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1ed      	bne.n	8001244 <SD_disk_read+0x80>
 8001268:	e000      	b.n	800126c <SD_disk_read+0xa8>
          break;
 800126a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800126c:	2100      	movs	r1, #0
 800126e:	204c      	movs	r0, #76	; 0x4c
 8001270:	f7ff fe56 	bl	8000f20 <SD_SendCmd>
    }
  }

  DESELECT();
 8001274:	f7ff fcf8 	bl	8000c68 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001278:	f7ff fd1c 	bl	8000cb4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	bf14      	ite	ne
 8001282:	2301      	movne	r3, #1
 8001284:	2300      	moveq	r3, #0
 8001286:	b2db      	uxtb	r3, r3
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000000 	.word	0x20000000
 8001294:	20000130 	.word	0x20000130

08001298 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <SD_disk_write+0x1c>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <SD_disk_write+0x20>
    return RES_PARERR;
 80012b4:	2304      	movs	r3, #4
 80012b6:	e06b      	b.n	8001390 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80012b8:	4b37      	ldr	r3, [pc, #220]	; (8001398 <SD_disk_write+0x100>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SD_disk_write+0x32>
    return RES_NOTRDY;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e062      	b.n	8001390 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80012ca:	4b33      	ldr	r3, [pc, #204]	; (8001398 <SD_disk_write+0x100>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SD_disk_write+0x44>
    return RES_WRPRT;
 80012d8:	2302      	movs	r3, #2
 80012da:	e059      	b.n	8001390 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <SD_disk_write+0x104>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	025b      	lsls	r3, r3, #9
 80012ec:	607b      	str	r3, [r7, #4]

  SELECT();
 80012ee:	f7ff fcaf 	bl	8000c50 <SELECT>

  if (count == 1)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d110      	bne.n	800131a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	2058      	movs	r0, #88	; 0x58
 80012fc:	f7ff fe10 	bl	8000f20 <SD_SendCmd>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d13a      	bne.n	800137c <SD_disk_write+0xe4>
 8001306:	21fe      	movs	r1, #254	; 0xfe
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f7ff fdb5 	bl	8000e78 <SD_TxDataBlock>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d033      	beq.n	800137c <SD_disk_write+0xe4>
      count = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	e030      	b.n	800137c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <SD_disk_write+0x104>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001326:	2100      	movs	r1, #0
 8001328:	2077      	movs	r0, #119	; 0x77
 800132a:	f7ff fdf9 	bl	8000f20 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800132e:	6839      	ldr	r1, [r7, #0]
 8001330:	2057      	movs	r0, #87	; 0x57
 8001332:	f7ff fdf5 	bl	8000f20 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	2059      	movs	r0, #89	; 0x59
 800133a:	f7ff fdf1 	bl	8000f20 <SD_SendCmd>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d11b      	bne.n	800137c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001344:	21fc      	movs	r1, #252	; 0xfc
 8001346:	68b8      	ldr	r0, [r7, #8]
 8001348:	f7ff fd96 	bl	8000e78 <SD_TxDataBlock>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00a      	beq.n	8001368 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001358:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ee      	bne.n	8001344 <SD_disk_write+0xac>
 8001366:	e000      	b.n	800136a <SD_disk_write+0xd2>
          break;
 8001368:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800136a:	21fd      	movs	r1, #253	; 0xfd
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fd83 	bl	8000e78 <SD_TxDataBlock>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <SD_disk_write+0xe4>
      {
        count = 1;
 8001378:	2301      	movs	r3, #1
 800137a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 800137c:	f7ff fc74 	bl	8000c68 <DESELECT>
  SPI_RxByte();
 8001380:	f7ff fc98 	bl	8000cb4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	bf14      	ite	ne
 800138a:	2301      	movne	r3, #1
 800138c:	2300      	moveq	r3, #0
 800138e:	b2db      	uxtb	r3, r3
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000000 	.word	0x20000000
 800139c:	20000130 	.word	0x20000130

080013a0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b08b      	sub	sp, #44	; 0x2c
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	603a      	str	r2, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	460b      	mov	r3, r1
 80013ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80013ba:	2304      	movs	r3, #4
 80013bc:	e11b      	b.n	80015f6 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	2b05      	cmp	r3, #5
 80013c8:	d129      	bne.n	800141e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d017      	beq.n	8001402 <SD_disk_ioctl+0x62>
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	dc1f      	bgt.n	8001416 <SD_disk_ioctl+0x76>
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d002      	beq.n	80013e0 <SD_disk_ioctl+0x40>
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d00b      	beq.n	80013f6 <SD_disk_ioctl+0x56>
 80013de:	e01a      	b.n	8001416 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80013e0:	f7ff fd08 	bl	8000df4 <SD_CheckPower>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80013ea:	f7ff fcf7 	bl	8000ddc <SD_PowerOff>
      res = RES_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80013f4:	e0fd      	b.n	80015f2 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80013f6:	f7ff fca5 	bl	8000d44 <SD_PowerOn>
      res = RES_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001400:	e0f7      	b.n	80015f2 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	1c5c      	adds	r4, r3, #1
 8001406:	f7ff fcf5 	bl	8000df4 <SD_CheckPower>
 800140a:	4603      	mov	r3, r0
 800140c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800140e:	2300      	movs	r3, #0
 8001410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001414:	e0ed      	b.n	80015f2 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001416:	2304      	movs	r3, #4
 8001418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800141c:	e0e9      	b.n	80015f2 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 800141e:	4b78      	ldr	r3, [pc, #480]	; (8001600 <SD_disk_ioctl+0x260>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800142c:	2303      	movs	r3, #3
 800142e:	e0e2      	b.n	80015f6 <SD_disk_ioctl+0x256>

    SELECT();
 8001430:	f7ff fc0e 	bl	8000c50 <SELECT>

    switch (ctrl)
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	2b0d      	cmp	r3, #13
 8001438:	f200 80cc 	bhi.w	80015d4 <SD_disk_ioctl+0x234>
 800143c:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <SD_disk_ioctl+0xa4>)
 800143e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001442:	bf00      	nop
 8001444:	0800153f 	.word	0x0800153f
 8001448:	0800147d 	.word	0x0800147d
 800144c:	0800152f 	.word	0x0800152f
 8001450:	080015d5 	.word	0x080015d5
 8001454:	080015d5 	.word	0x080015d5
 8001458:	080015d5 	.word	0x080015d5
 800145c:	080015d5 	.word	0x080015d5
 8001460:	080015d5 	.word	0x080015d5
 8001464:	080015d5 	.word	0x080015d5
 8001468:	080015d5 	.word	0x080015d5
 800146c:	080015d5 	.word	0x080015d5
 8001470:	08001551 	.word	0x08001551
 8001474:	08001575 	.word	0x08001575
 8001478:	08001599 	.word	0x08001599
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800147c:	2100      	movs	r1, #0
 800147e:	2049      	movs	r0, #73	; 0x49
 8001480:	f7ff fd4e 	bl	8000f20 <SD_SendCmd>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	f040 80a8 	bne.w	80015dc <SD_disk_ioctl+0x23c>
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2110      	movs	r1, #16
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fcba 	bl	8000e0c <SD_RxDataBlock>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 809e 	beq.w	80015dc <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80014a0:	7b3b      	ldrb	r3, [r7, #12]
 80014a2:	099b      	lsrs	r3, r3, #6
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d10e      	bne.n	80014c8 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80014aa:	7d7b      	ldrb	r3, [r7, #21]
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	7d3b      	ldrb	r3, [r7, #20]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80014be:	8bfb      	ldrh	r3, [r7, #30]
 80014c0:	029a      	lsls	r2, r3, #10
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e02e      	b.n	8001526 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80014c8:	7c7b      	ldrb	r3, [r7, #17]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	7dbb      	ldrb	r3, [r7, #22]
 80014d2:	09db      	lsrs	r3, r3, #7
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	7d7b      	ldrb	r3, [r7, #21]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f003 0306 	and.w	r3, r3, #6
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4413      	add	r3, r2
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	3302      	adds	r3, #2
 80014ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80014f0:	7d3b      	ldrb	r3, [r7, #20]
 80014f2:	099b      	lsrs	r3, r3, #6
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	7cfb      	ldrb	r3, [r7, #19]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4413      	add	r3, r2
 8001502:	b29a      	uxth	r2, r3
 8001504:	7cbb      	ldrb	r3, [r7, #18]
 8001506:	029b      	lsls	r3, r3, #10
 8001508:	b29b      	uxth	r3, r3
 800150a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800150e:	b29b      	uxth	r3, r3
 8001510:	4413      	add	r3, r2
 8001512:	b29b      	uxth	r3, r3
 8001514:	3301      	adds	r3, #1
 8001516:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001518:	8bfa      	ldrh	r2, [r7, #30]
 800151a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800151e:	3b09      	subs	r3, #9
 8001520:	409a      	lsls	r2, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800152c:	e056      	b.n	80015dc <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001534:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800153c:	e055      	b.n	80015ea <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800153e:	f7ff fbe5 	bl	8000d0c <SD_ReadyWait>
 8001542:	4603      	mov	r3, r0
 8001544:	2bff      	cmp	r3, #255	; 0xff
 8001546:	d14b      	bne.n	80015e0 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800154e:	e047      	b.n	80015e0 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001550:	2100      	movs	r1, #0
 8001552:	2049      	movs	r0, #73	; 0x49
 8001554:	f7ff fce4 	bl	8000f20 <SD_SendCmd>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d142      	bne.n	80015e4 <SD_disk_ioctl+0x244>
 800155e:	2110      	movs	r1, #16
 8001560:	6a38      	ldr	r0, [r7, #32]
 8001562:	f7ff fc53 	bl	8000e0c <SD_RxDataBlock>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d03b      	beq.n	80015e4 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001572:	e037      	b.n	80015e4 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001574:	2100      	movs	r1, #0
 8001576:	204a      	movs	r0, #74	; 0x4a
 8001578:	f7ff fcd2 	bl	8000f20 <SD_SendCmd>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d132      	bne.n	80015e8 <SD_disk_ioctl+0x248>
 8001582:	2110      	movs	r1, #16
 8001584:	6a38      	ldr	r0, [r7, #32]
 8001586:	f7ff fc41 	bl	8000e0c <SD_RxDataBlock>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d02b      	beq.n	80015e8 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001596:	e027      	b.n	80015e8 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001598:	2100      	movs	r1, #0
 800159a:	207a      	movs	r0, #122	; 0x7a
 800159c:	f7ff fcc0 	bl	8000f20 <SD_SendCmd>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d116      	bne.n	80015d4 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015ac:	e00b      	b.n	80015c6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80015ae:	6a3c      	ldr	r4, [r7, #32]
 80015b0:	1c63      	adds	r3, r4, #1
 80015b2:	623b      	str	r3, [r7, #32]
 80015b4:	f7ff fb7e 	bl	8000cb4 <SPI_RxByte>
 80015b8:	4603      	mov	r3, r0
 80015ba:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80015bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015c0:	3301      	adds	r3, #1
 80015c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d9ef      	bls.n	80015ae <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 80015d4:	2304      	movs	r3, #4
 80015d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015da:	e006      	b.n	80015ea <SD_disk_ioctl+0x24a>
      break;
 80015dc:	bf00      	nop
 80015de:	e004      	b.n	80015ea <SD_disk_ioctl+0x24a>
      break;
 80015e0:	bf00      	nop
 80015e2:	e002      	b.n	80015ea <SD_disk_ioctl+0x24a>
      break;
 80015e4:	bf00      	nop
 80015e6:	e000      	b.n	80015ea <SD_disk_ioctl+0x24a>
      break;
 80015e8:	bf00      	nop
    }

    DESELECT();
 80015ea:	f7ff fb3d 	bl	8000c68 <DESELECT>
    SPI_RxByte();
 80015ee:	f7ff fb61 	bl	8000cb4 <SPI_RxByte>
  }

  return res;
 80015f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	372c      	adds	r7, #44	; 0x2c
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000000 	.word	0x20000000

08001604 <lcd_send_cmd>:

uint16_t addr_8=SLAVE_ADDRESS_LCD;


void lcd_send_cmd (char cmd)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af02      	add	r7, sp, #8
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]

		uint8_t i2c_frame_data[4];

		i2c_frame_data[0] = (cmd & 0xF0) | 0x0c;
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	f023 030f 	bic.w	r3, r3, #15
 8001616:	b25b      	sxtb	r3, r3
 8001618:	f043 030c 	orr.w	r3, r3, #12
 800161c:	b25b      	sxtb	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	733b      	strb	r3, [r7, #12]
		i2c_frame_data[1] = i2c_frame_data[0] & 0xFB;
 8001622:	7b3b      	ldrb	r3, [r7, #12]
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	b2db      	uxtb	r3, r3
 800162a:	737b      	strb	r3, [r7, #13]

		i2c_frame_data[2] = ((cmd << 4) & 0xF0) | 0x0c;
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	b25b      	sxtb	r3, r3
 8001632:	f043 030c 	orr.w	r3, r3, #12
 8001636:	b25b      	sxtb	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	73bb      	strb	r3, [r7, #14]
		i2c_frame_data[3] = i2c_frame_data[2] & 0xFB;
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	f023 0304 	bic.w	r3, r3, #4
 8001642:	b2db      	uxtb	r3, r3
 8001644:	73fb      	strb	r3, [r7, #15]

		// HAL transmits i2c_frame_data[0],[1], ... , i2c_frame_data[i2c_frame_size-1]
		//Please write your own code here
		HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) i2c_frame_data, 4, 100);
 8001646:	f107 020c 	add.w	r2, r7, #12
 800164a:	2364      	movs	r3, #100	; 0x64
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	2304      	movs	r3, #4
 8001650:	214e      	movs	r1, #78	; 0x4e
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <lcd_send_cmd+0x64>)
 8001654:	f002 fd96 	bl	8004184 <HAL_I2C_Master_Transmit>
	
		// P46 , 25

		HAL_Delay(1);
 8001658:	2001      	movs	r0, #1
 800165a:	f001 fa1d 	bl	8002a98 <HAL_Delay>

}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200001dc 	.word	0x200001dc

0800166c <lcd_send_data>:

void lcd_send_data (char data)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af02      	add	r7, sp, #8
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t i2c_frame_data[4];
	data_u = (data&0xf0);
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f023 030f 	bic.w	r3, r3, #15
 800167c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	73bb      	strb	r3, [r7, #14]
	i2c_frame_data[0] = data_u|0x0D;  //en=1, rs=0
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	f043 030d 	orr.w	r3, r3, #13
 800168a:	b2db      	uxtb	r3, r3
 800168c:	723b      	strb	r3, [r7, #8]
	i2c_frame_data[1] = data_u|0x09;  //en=0, rs=0
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	f043 0309 	orr.w	r3, r3, #9
 8001694:	b2db      	uxtb	r3, r3
 8001696:	727b      	strb	r3, [r7, #9]
	i2c_frame_data[2] = data_l|0x0D;  //en=1, rs=0
 8001698:	7bbb      	ldrb	r3, [r7, #14]
 800169a:	f043 030d 	orr.w	r3, r3, #13
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	72bb      	strb	r3, [r7, #10]
	i2c_frame_data[3] = data_l|0x09;  //en=0, rs=0
 80016a2:	7bbb      	ldrb	r3, [r7, #14]
 80016a4:	f043 0309 	orr.w	r3, r3, #9
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	72fb      	strb	r3, [r7, #11]
	// HAL transmits i2c_frame_data[0],[1], ... , i2c_frame_data[i2c_frame_size-1]
		//Please write your own code here
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) i2c_frame_data, 4, 100);
 80016ac:	f107 0208 	add.w	r2, r7, #8
 80016b0:	2364      	movs	r3, #100	; 0x64
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2304      	movs	r3, #4
 80016b6:	214e      	movs	r1, #78	; 0x4e
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <lcd_send_data+0x60>)
 80016ba:	f002 fd63 	bl	8004184 <HAL_I2C_Master_Transmit>
	// P 22
	HAL_Delay(1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f001 f9ea 	bl	8002a98 <HAL_Delay>
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200001dc 	.word	0x200001dc

080016d0 <lcd_clear>:

void lcd_clear (void)  // clear display
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	//send command to clear the display
	//Please write your own code here
	
	// P 24 T 6
	lcd_send_cmd(0x01);
 80016d4:	2001      	movs	r0, #1
 80016d6:	f7ff ff95 	bl	8001604 <lcd_send_cmd>
	HAL_Delay(1);
 80016da:	2001      	movs	r0, #1
 80016dc:	f001 f9dc 	bl	8002a98 <HAL_Delay>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <lcd_init>:

void lcd_init ()
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 80016e8:	2032      	movs	r0, #50	; 0x32
 80016ea:	f001 f9d5 	bl	8002a98 <HAL_Delay>
	lcd_send_cmd (0x30);
 80016ee:	2030      	movs	r0, #48	; 0x30
 80016f0:	f7ff ff88 	bl	8001604 <lcd_send_cmd>
	HAL_Delay(5);
 80016f4:	2005      	movs	r0, #5
 80016f6:	f001 f9cf 	bl	8002a98 <HAL_Delay>
	lcd_send_cmd (0x30);
 80016fa:	2030      	movs	r0, #48	; 0x30
 80016fc:	f7ff ff82 	bl	8001604 <lcd_send_cmd>
	HAL_Delay(1);
 8001700:	2001      	movs	r0, #1
 8001702:	f001 f9c9 	bl	8002a98 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001706:	2030      	movs	r0, #48	; 0x30
 8001708:	f7ff ff7c 	bl	8001604 <lcd_send_cmd>
	HAL_Delay(10);
 800170c:	200a      	movs	r0, #10
 800170e:	f001 f9c3 	bl	8002a98 <HAL_Delay>
	lcd_send_cmd (0x20);
 8001712:	2020      	movs	r0, #32
 8001714:	f7ff ff76 	bl	8001604 <lcd_send_cmd>
	HAL_Delay(10);
 8001718:	200a      	movs	r0, #10
 800171a:	f001 f9bd 	bl	8002a98 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28);
 800171e:	2028      	movs	r0, #40	; 0x28
 8001720:	f7ff ff70 	bl	8001604 <lcd_send_cmd>
	HAL_Delay(1);
 8001724:	2001      	movs	r0, #1
 8001726:	f001 f9b7 	bl	8002a98 <HAL_Delay>
	lcd_send_cmd (0x08);
 800172a:	2008      	movs	r0, #8
 800172c:	f7ff ff6a 	bl	8001604 <lcd_send_cmd>
	HAL_Delay(1);
 8001730:	2001      	movs	r0, #1
 8001732:	f001 f9b1 	bl	8002a98 <HAL_Delay>
	lcd_send_cmd (0x01);
 8001736:	2001      	movs	r0, #1
 8001738:	f7ff ff64 	bl	8001604 <lcd_send_cmd>
	HAL_Delay(1);
 800173c:	2001      	movs	r0, #1
 800173e:	f001 f9ab 	bl	8002a98 <HAL_Delay>
	HAL_Delay(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f001 f9a8 	bl	8002a98 <HAL_Delay>
	lcd_send_cmd (0x06);
 8001748:	2006      	movs	r0, #6
 800174a:	f7ff ff5b 	bl	8001604 <lcd_send_cmd>
	HAL_Delay(1);
 800174e:	2001      	movs	r0, #1
 8001750:	f001 f9a2 	bl	8002a98 <HAL_Delay>
	lcd_send_cmd (0x0C);
 8001754:	200c      	movs	r0, #12
 8001756:	f7ff ff55 	bl	8001604 <lcd_send_cmd>

	HAL_Delay(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f001 f99c 	bl	8002a98 <HAL_Delay>

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	//Please write your own code here
    
	while (*str) lcd_send_data(*str++);
 800176c:	e006      	b.n	800177c <lcd_send_string+0x18>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ff78 	bl	800166c <lcd_send_data>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f4      	bne.n	800176e <lcd_send_string+0xa>
	HAL_Delay(1);
 8001784:	2001      	movs	r0, #1
 8001786:	f001 f987 	bl	8002a98 <HAL_Delay>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <fast_delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void fast_delay() {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
	static int16_t bound_check = 0;
	memset(robot_buf, '\0', sizeof(q15_t) * INPUT_PROCESS_BUF_SIZE);
 800179a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179e:	2100      	movs	r1, #0
 80017a0:	482e      	ldr	r0, [pc, #184]	; (800185c <fast_delay+0xc8>)
 80017a2:	f00d f823 	bl	800e7ec <memset>
	if (&out_buf[0] == out_buf_ptr) {
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <fast_delay+0xcc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a2e      	ldr	r2, [pc, #184]	; (8001864 <fast_delay+0xd0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d104      	bne.n	80017ba <fast_delay+0x26>
		bound_check = OUTPUT_BUF_SIZE;
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <fast_delay+0xd4>)
 80017b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b6:	801a      	strh	r2, [r3, #0]
 80017b8:	e003      	b.n	80017c2 <fast_delay+0x2e>
	} else {
		bound_check = OUTPUT_PROCESS_BUF_SIZE;
 80017ba:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <fast_delay+0xd4>)
 80017bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c0:	801a      	strh	r2, [r3, #0]
	}

	for (int16_t i = 0; i < INPUT_PROCESS_BUF_SIZE; i++) {
 80017c2:	2300      	movs	r3, #0
 80017c4:	80fb      	strh	r3, [r7, #6]
 80017c6:	e03f      	b.n	8001848 <fast_delay+0xb4>
		for (int16_t j = 0; j < N_BUF_FAST_DELAY; j++) {
 80017c8:	2300      	movs	r3, #0
 80017ca:	80bb      	strh	r3, [r7, #4]
 80017cc:	e032      	b.n	8001834 <fast_delay+0xa0>
			robot_buf[i] += DELAY_ATT(out_buf[(bound_check + i - j) % OUTPUT_BUF_SIZE]);
 80017ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d2:	4a22      	ldr	r2, [pc, #136]	; (800185c <fast_delay+0xc8>)
 80017d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	4b23      	ldr	r3, [pc, #140]	; (8001868 <fast_delay+0xd4>)
 80017dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e6:	4419      	add	r1, r3
 80017e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ec:	1acb      	subs	r3, r1, r3
 80017ee:	4259      	negs	r1, r3
 80017f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017f4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80017f8:	bf58      	it	pl
 80017fa:	424b      	negpl	r3, r1
 80017fc:	4919      	ldr	r1, [pc, #100]	; (8001864 <fast_delay+0xd0>)
 80017fe:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001802:	4619      	mov	r1, r3
 8001804:	460b      	mov	r3, r1
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	4918      	ldr	r1, [pc, #96]	; (800186c <fast_delay+0xd8>)
 800180c:	fb81 0103 	smull	r0, r1, r1, r3
 8001810:	1089      	asrs	r1, r1, #2
 8001812:	17db      	asrs	r3, r3, #31
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	b29b      	uxth	r3, r3
 8001818:	4413      	add	r3, r2
 800181a:	b29a      	uxth	r2, r3
 800181c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001820:	b211      	sxth	r1, r2
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <fast_delay+0xc8>)
 8001824:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int16_t j = 0; j < N_BUF_FAST_DELAY; j++) {
 8001828:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800182c:	b29b      	uxth	r3, r3
 800182e:	3301      	adds	r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	80bb      	strh	r3, [r7, #4]
 8001834:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001838:	2b04      	cmp	r3, #4
 800183a:	ddc8      	ble.n	80017ce <fast_delay+0x3a>
	for (int16_t i = 0; i < INPUT_PROCESS_BUF_SIZE; i++) {
 800183c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001840:	b29b      	uxth	r3, r3
 8001842:	3301      	adds	r3, #1
 8001844:	b29b      	uxth	r3, r3
 8001846:	80fb      	strh	r3, [r7, #6]
 8001848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001850:	dbba      	blt.n	80017c8 <fast_delay+0x34>
//		// robot_buf[i] = robot_buf[i - 1] + DELAY_ATT(out_buf_ptr[i] - out_buf_ptr[i - N_BUF_FAST_DELAY]);
//		for (int16_t j = 0; j < N_BUF_FAST_DELAY; j++) {
//			robot_buf[i] += DELAY_ATT(out_buf_ptr[i - j]);
//		}
//	}
}
 8001852:	bf00      	nop
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20005890 	.word	0x20005890
 8001860:	20000080 	.word	0x20000080
 8001864:	20002c30 	.word	0x20002c30
 8001868:	20005c9a 	.word	0x20005c9a
 800186c:	66666667 	.word	0x66666667

08001870 <send_uart>:


void send_uart(char* string, uint16_t len)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
	dma_status = HAL_UART_Transmit(&huart2, (uint8_t *) string, len, 2000);
 800187c:	887a      	ldrh	r2, [r7, #2]
 800187e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4808      	ldr	r0, [pc, #32]	; (80018a8 <send_uart+0x38>)
 8001886:	f004 fd7c 	bl	8006382 <HAL_UART_Transmit>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <send_uart+0x3c>)
 8001890:	701a      	strb	r2, [r3, #0]
	if (dma_status != HAL_OK) {
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <send_uart+0x3c>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <send_uart+0x2e>
		Error_Handler();
 800189a:	f000 fdc1 	bl	8002420 <Error_Handler>
	}
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002d0 	.word	0x200002d0
 80018ac:	20005c98 	.word	0x20005c98

080018b0 <open_append>:


FRESULT open_append(FIL* fp, /* [OUT] File object to create */
const TCHAR* path /* [IN]  File name to be opened */
) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
	/* Opens an existing file. If not exist, creates a new file. */
	fstatus = f_open(fp, path, FA_OPEN_ALWAYS | FA_WRITE);
 80018ba:	2212      	movs	r2, #18
 80018bc:	6839      	ldr	r1, [r7, #0]
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f007 fbd0 	bl	8009064 <f_open>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <open_append+0x28>)
 80018ca:	701a      	strb	r2, [r3, #0]
	return fstatus;
 80018cc:	4b02      	ldr	r3, [pc, #8]	; (80018d8 <open_append+0x28>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20002428 	.word	0x20002428

080018dc <mount_sd_card>:

void mount_sd_card() {
 80018dc:	b5b0      	push	{r4, r5, r7, lr}
 80018de:	b0b2      	sub	sp, #200	; 0xc8
 80018e0:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust;
	uint32_t total, free_space;

	 /* Mount SD card*/
	fstatus = f_mount(&fs, "/", 1);
 80018e2:	2201      	movs	r2, #1
 80018e4:	4946      	ldr	r1, [pc, #280]	; (8001a00 <mount_sd_card+0x124>)
 80018e6:	4847      	ldr	r0, [pc, #284]	; (8001a04 <mount_sd_card+0x128>)
 80018e8:	f007 fb58 	bl	8008f9c <f_mount>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b45      	ldr	r3, [pc, #276]	; (8001a08 <mount_sd_card+0x12c>)
 80018f2:	701a      	strb	r2, [r3, #0]

	if (fstatus != FR_OK) {
 80018f4:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <mount_sd_card+0x12c>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00b      	beq.n	8001914 <mount_sd_card+0x38>
		strcpy(mount_status_msg, "ERROR!!! in mounting SD CARD...\n\n");
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	4a42      	ldr	r2, [pc, #264]	; (8001a0c <mount_sd_card+0x130>)
 8001902:	461c      	mov	r4, r3
 8001904:	4615      	mov	r5, r2
 8001906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800190a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800190c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800190e:	682b      	ldr	r3, [r5, #0]
 8001910:	8023      	strh	r3, [r4, #0]
 8001912:	e00a      	b.n	800192a <mount_sd_card+0x4e>
	} else {
		strcpy(mount_status_msg, "SD CARD mounted successfully...\n\n");
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	4a3d      	ldr	r2, [pc, #244]	; (8001a10 <mount_sd_card+0x134>)
 800191a:	461c      	mov	r4, r3
 800191c:	4615      	mov	r5, r2
 800191e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001926:	682b      	ldr	r3, [r5, #0]
 8001928:	8023      	strh	r3, [r4, #0]
	}

	send_uart (mount_status_msg, sizeof mount_status_msg);
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	2132      	movs	r1, #50	; 0x32
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff9d 	bl	8001870 <send_uart>


	/* Check free space and pointer for calculating total size in SD Card */
	f_getfree("/", &fre_clust, &pfs);
 8001936:	f107 0208 	add.w	r2, r7, #8
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4619      	mov	r1, r3
 800193e:	4830      	ldr	r0, [pc, #192]	; (8001a00 <mount_sd_card+0x124>)
 8001940:	f007 fff3 	bl	800992a <f_getfree>

	total = (pfs->n_fatent - 2) * pfs -> csize * 0.5;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	3b02      	subs	r3, #2
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	8952      	ldrh	r2, [r2, #10]
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe ff60 	bl	8000818 <__aeabi_ui2d>
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <mount_sd_card+0x138>)
 800195e:	f7fe fcef 	bl	8000340 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7fe ffcf 	bl	800090c <__aeabi_d2uiz>
 800196e:	4603      	mov	r3, r0
 8001970:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	sprintf(buffer, "SD card total size:\t%lu\n", total);
 8001974:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001978:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800197c:	4926      	ldr	r1, [pc, #152]	; (8001a18 <mount_sd_card+0x13c>)
 800197e:	4618      	mov	r0, r3
 8001980:	f00d f84a 	bl	800ea18 <siprintf>
	send_uart(buffer, sizeof buffer);
 8001984:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001988:	2180      	movs	r1, #128	; 0x80
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff70 	bl	8001870 <send_uart>
	memset(buffer, '\0', sizeof buffer);
 8001990:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f00c ff27 	bl	800e7ec <memset>


	free_space = fre_clust * pfs -> csize * 0.5;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	895b      	ldrh	r3, [r3, #10]
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	fb02 f303 	mul.w	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe ff34 	bl	8000818 <__aeabi_ui2d>
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <mount_sd_card+0x138>)
 80019b6:	f7fe fcc3 	bl	8000340 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7fe ffa3 	bl	800090c <__aeabi_d2uiz>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	sprintf(buffer, "SD card free space:\t%lu\n", free_space);
 80019cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80019d4:	4911      	ldr	r1, [pc, #68]	; (8001a1c <mount_sd_card+0x140>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	f00d f81e 	bl	800ea18 <siprintf>
	send_uart(buffer, sizeof buffer);
 80019dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff44 	bl	8001870 <send_uart>
	memset(buffer, '\0', sizeof buffer);
 80019e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00c fefb 	bl	800e7ec <memset>

}
 80019f6:	bf00      	nop
 80019f8:	37c8      	adds	r7, #200	; 0xc8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bdb0      	pop	{r4, r5, r7, pc}
 80019fe:	bf00      	nop
 8001a00:	0800f1f0 	.word	0x0800f1f0
 8001a04:	200003bc 	.word	0x200003bc
 8001a08:	20002428 	.word	0x20002428
 8001a0c:	0800f1f4 	.word	0x0800f1f4
 8001a10:	0800f218 	.word	0x0800f218
 8001a14:	3fe00000 	.word	0x3fe00000
 8001a18:	0800f23c 	.word	0x0800f23c
 8001a1c:	0800f258 	.word	0x0800f258

08001a20 <process_data>:

void process_data() {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
	char sample_out_msg[6];
	q15_t max_ampl;

	// 1. Initial HPF
	arm_fir_fast_q15(&fir_settings, in_buf_ptr, out_buf_ptr, INPUT_PROCESS_BUF_SIZE);
 8001a26:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <process_data+0x16c>)
 8001a28:	6819      	ldr	r1, [r3, #0]
 8001a2a:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <process_data+0x170>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a32:	4858      	ldr	r0, [pc, #352]	; (8001b94 <process_data+0x174>)
 8001a34:	f00c f8ba 	bl	800dbac <arm_fir_fast_q15>
	arm_offset_q15(out_buf_ptr, 2000, out_buf_ptr, INPUT_PROCESS_BUF_SIZE);
 8001a38:	4b55      	ldr	r3, [pc, #340]	; (8001b90 <process_data+0x170>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	4b54      	ldr	r3, [pc, #336]	; (8001b90 <process_data+0x170>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a44:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a48:	f00c fae6 	bl	800e018 <arm_offset_q15>
	// 2. TODO: Correct Robot effect from out_buf_ptr -> robot_buf
	if (robot_effect) {
 8001a4c:	4b52      	ldr	r3, [pc, #328]	; (8001b98 <process_data+0x178>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01a      	beq.n	8001a8a <process_data+0x6a>
		fast_delay();
 8001a54:	f7ff fe9e 	bl	8001794 <fast_delay>
		/*
		for (int i = 0; i < INPUT_PROCESS_BUF_SIZE; i++) {
			robot_buf[i] >>= 2;
		}
		*/
		arm_offset_q15(robot_buf, -7000, robot_buf, OUTPUT_PROCESS_BUF_SIZE);
 8001a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a5c:	4a4f      	ldr	r2, [pc, #316]	; (8001b9c <process_data+0x17c>)
 8001a5e:	4950      	ldr	r1, [pc, #320]	; (8001ba0 <process_data+0x180>)
 8001a60:	484e      	ldr	r0, [pc, #312]	; (8001b9c <process_data+0x17c>)
 8001a62:	f00c fad9 	bl	800e018 <arm_offset_q15>
//		// TODO: (Probably) Generate correct tap for Another HPF, for that change settings? and also try it with fast
		arm_fir_q15(&fir_settings, robot_buf, out_buf_ptr, INPUT_PROCESS_BUF_SIZE);
 8001a66:	4b4a      	ldr	r3, [pc, #296]	; (8001b90 <process_data+0x170>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a6e:	494b      	ldr	r1, [pc, #300]	; (8001b9c <process_data+0x17c>)
 8001a70:	4848      	ldr	r0, [pc, #288]	; (8001b94 <process_data+0x174>)
 8001a72:	f00b fef9 	bl	800d868 <arm_fir_q15>
//		// TODO: (Probably) Change offset?
		arm_offset_q15(out_buf_ptr, 2000, out_buf_ptr, INPUT_PROCESS_BUF_SIZE);
 8001a76:	4b46      	ldr	r3, [pc, #280]	; (8001b90 <process_data+0x170>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	4b45      	ldr	r3, [pc, #276]	; (8001b90 <process_data+0x170>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a82:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001a86:	f00c fac7 	bl	800e018 <arm_offset_q15>
	}

	// 4. Compute FFT and maximum frequency
	// http://gaidi.ca/weblog/configuring-cmsis-dsp-package-and-performing-a-real-fft
	// https://m0agx.eu/2018/05/23/practical-fft-on-microcontrollers-using-cmsis-dsp/
	memcpy(fft_input, out_buf_ptr, sizeof(q15_t) * OUTPUT_PROCESS_BUF_SIZE);
 8001a8a:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <process_data+0x170>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a92:	4619      	mov	r1, r3
 8001a94:	4843      	ldr	r0, [pc, #268]	; (8001ba4 <process_data+0x184>)
 8001a96:	f00c fe9b 	bl	800e7d0 <memcpy>
	arm_rfft_q15(&fft_settings, (q15_t* ) fft_input, fft_output);
 8001a9a:	4a43      	ldr	r2, [pc, #268]	; (8001ba8 <process_data+0x188>)
 8001a9c:	4941      	ldr	r1, [pc, #260]	; (8001ba4 <process_data+0x184>)
 8001a9e:	4843      	ldr	r0, [pc, #268]	; (8001bac <process_data+0x18c>)
 8001aa0:	f00b fdfc 	bl	800d69c <arm_rfft_q15>
	for (int i = 0; i < OUTPUT_PROCESS_BUF_SIZE * 2; i++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e00c      	b.n	8001ac4 <process_data+0xa4>
		fft_output[i] <<= 8;
 8001aaa:	4a3f      	ldr	r2, [pc, #252]	; (8001ba8 <process_data+0x188>)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	b219      	sxth	r1, r3
 8001ab6:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <process_data+0x188>)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < OUTPUT_PROCESS_BUF_SIZE * 2; i++) {
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aca:	dbee      	blt.n	8001aaa <process_data+0x8a>
	}
	arm_cmplx_mag_q15(fft_output, fft_output, OUTPUT_PROCESS_BUF_SIZE);
 8001acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad0:	4935      	ldr	r1, [pc, #212]	; (8001ba8 <process_data+0x188>)
 8001ad2:	4835      	ldr	r0, [pc, #212]	; (8001ba8 <process_data+0x188>)
 8001ad4:	f00c f9d2 	bl	800de7c <arm_cmplx_mag_q15>
 	arm_max_q15(&fft_output[1], OUTPUT_PROCESS_BUF_SIZE - 1, &max_ampl, &max_fft_freq);
 8001ad8:	1dba      	adds	r2, r7, #6
 8001ada:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <process_data+0x190>)
 8001adc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ae0:	4834      	ldr	r0, [pc, #208]	; (8001bb4 <process_data+0x194>)
 8001ae2:	f00b fd1b 	bl	800d51c <arm_max_q15>


 	// 5. Sound activity detected flag (extension)
	if (max_fft_freq <= 5) {
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <process_data+0x190>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d812      	bhi.n	8001b14 <process_data+0xf4>
		if (fft_counter > 20) {
 8001aee:	4b32      	ldr	r3, [pc, #200]	; (8001bb8 <process_data+0x198>)
 8001af0:	f993 3000 	ldrsb.w	r3, [r3]
 8001af4:	2b14      	cmp	r3, #20
 8001af6:	dd03      	ble.n	8001b00 <process_data+0xe0>
			sound_activity_detected = 0; // TODO: Change
 8001af8:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <process_data+0x19c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	e01b      	b.n	8001b38 <process_data+0x118>
		} else {
			fft_counter++;
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <process_data+0x198>)
 8001b02:	f993 3000 	ldrsb.w	r3, [r3]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	b25a      	sxtb	r2, r3
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <process_data+0x198>)
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	e011      	b.n	8001b38 <process_data+0x118>
		}

	} else {
		if (fft_counter <= 0) {
 8001b14:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <process_data+0x198>)
 8001b16:	f993 3000 	ldrsb.w	r3, [r3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	dc03      	bgt.n	8001b26 <process_data+0x106>
			sound_activity_detected = 1;
 8001b1e:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <process_data+0x19c>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	e008      	b.n	8001b38 <process_data+0x118>
		} else {
			fft_counter-=4;
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <process_data+0x198>)
 8001b28:	f993 3000 	ldrsb.w	r3, [r3]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <process_data+0x198>)
 8001b36:	701a      	strb	r2, [r3, #0]
		}
	}

	for (int i = 0; i < INPUT_PROCESS_BUF_SIZE; i++) {
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	e01d      	b.n	8001b7a <process_data+0x15a>
		// Process 4 digit number as string in processed buffer to send in UART/File
		sprintf (sample_out_msg, "%4.4hd\n", out_buf_ptr[i]);
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <process_data+0x170>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	491b      	ldr	r1, [pc, #108]	; (8001bc0 <process_data+0x1a0>)
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00c ff5f 	bl	800ea18 <siprintf>
		strncpy(&out_buf_char_ptr[5*i], sample_out_msg, (sizeof sample_out_msg) - 1);
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <process_data+0x1a4>)
 8001b5c:	6819      	ldr	r1, [r3, #0]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f107 0108 	add.w	r1, r7, #8
 8001b6c:	2205      	movs	r2, #5
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f00c ff72 	bl	800ea58 <strncpy>
	for (int i = 0; i < INPUT_PROCESS_BUF_SIZE; i++) {
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	3301      	adds	r3, #1
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b80:	dbdd      	blt.n	8001b3e <process_data+0x11e>
	}
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2000007c 	.word	0x2000007c
 8001b90:	20000080 	.word	0x20000080
 8001b94:	20004830 	.word	0x20004830
 8001b98:	20005c91 	.word	0x20005c91
 8001b9c:	20005890 	.word	0x20005890
 8001ba0:	ffffe4a8 	.word	0xffffe4a8
 8001ba4:	20004c90 	.word	0x20004c90
 8001ba8:	20005090 	.word	0x20005090
 8001bac:	20004c78 	.word	0x20004c78
 8001bb0:	20005c94 	.word	0x20005c94
 8001bb4:	20005092 	.word	0x20005092
 8001bb8:	20005c92 	.word	0x20005c92
 8001bbc:	20000088 	.word	0x20000088
 8001bc0:	0800f274 	.word	0x0800f274
 8001bc4:	20000084 	.word	0x20000084

08001bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bce:	f000 ff21 	bl	8002a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd2:	f000 f87f 	bl	8001cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd6:	f000 fa47 	bl	8002068 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bda:	f000 fa0f 	bl	8001ffc <MX_DMA_Init>
  MX_ADC1_Init();
 8001bde:	f000 f8e1 	bl	8001da4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001be2:	f000 f931 	bl	8001e48 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001be6:	f000 f95d 	bl	8001ea4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001bea:	f000 f991 	bl	8001f10 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001bee:	f000 f9db 	bl	8001fa8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001bf2:	f004 ff3b 	bl	8006a6c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8001bf6:	4825      	ldr	r0, [pc, #148]	; (8001c8c <main+0xc4>)
 8001bf8:	f003 ff26 	bl	8005a48 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) in_buf_ptr, INPUT_BUF_SIZE);
 8001bfc:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <main+0xc8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c04:	4619      	mov	r1, r3
 8001c06:	4823      	ldr	r0, [pc, #140]	; (8001c94 <main+0xcc>)
 8001c08:	f000 ffae 	bl	8002b68 <HAL_ADC_Start_DMA>

  arm_float_to_q15(filter_taps_float, filter_taps_q15, FILTER_TAP_NUM);
 8001c0c:	221e      	movs	r2, #30
 8001c0e:	4922      	ldr	r1, [pc, #136]	; (8001c98 <main+0xd0>)
 8001c10:	4822      	ldr	r0, [pc, #136]	; (8001c9c <main+0xd4>)
 8001c12:	f00b fbeb 	bl	800d3ec <arm_float_to_q15>
  dsp_status = arm_fir_init_q15(&fir_settings, FILTER_TAP_NUM, &filter_taps_q15[0], &fir_state[0], INPUT_PROCESS_BUF_SIZE);
 8001c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <main+0xd8>)
 8001c1e:	4a1e      	ldr	r2, [pc, #120]	; (8001c98 <main+0xd0>)
 8001c20:	211e      	movs	r1, #30
 8001c22:	4820      	ldr	r0, [pc, #128]	; (8001ca4 <main+0xdc>)
 8001c24:	f00b ffac 	bl	800db80 <arm_fir_init_q15>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <main+0xe0>)
 8001c2e:	701a      	strb	r2, [r3, #0]
  dsp_status = arm_rfft_init_q15(&fft_settings, INPUT_PROCESS_BUF_SIZE/*bin count*/, 0/*forward FFT*/, 1/*output bit order is normal*/);
 8001c30:	2301      	movs	r3, #1
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c38:	481c      	ldr	r0, [pc, #112]	; (8001cac <main+0xe4>)
 8001c3a:	f00b fd8d 	bl	800d758 <arm_rfft_init_q15>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <main+0xe0>)
 8001c44:	701a      	strb	r2, [r3, #0]

  // Initial check for sd card
  mount_sd_card();
 8001c46:	f7ff fe49 	bl	80018dc <mount_sd_card>


  // Initial operations on LCD
  lcd_init();
 8001c4a:	f7ff fd4b 	bl	80016e4 <lcd_init>
  lcd_clear();
 8001c4e:	f7ff fd3f 	bl	80016d0 <lcd_clear>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c52:	f008 f8eb 	bl	8009e2c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ProcessInput */
  ProcessInputHandle = osThreadNew(StartProcessInput, NULL, &ProcessInput_attributes);
 8001c56:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <main+0xe8>)
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4816      	ldr	r0, [pc, #88]	; (8001cb4 <main+0xec>)
 8001c5c:	f008 f930 	bl	8009ec0 <osThreadNew>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <main+0xf0>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* creation of saveFile */
  saveFileHandle = osThreadNew(StartSaveFile, NULL, &saveFile_attributes);
 8001c66:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <main+0xf4>)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4815      	ldr	r0, [pc, #84]	; (8001cc0 <main+0xf8>)
 8001c6c:	f008 f928 	bl	8009ec0 <osThreadNew>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <main+0xfc>)
 8001c74:	6013      	str	r3, [r2, #0]

  /* creation of sendLCD */
  sendLCDHandle = osThreadNew(StartSendLCD, NULL, &sendLCD_attributes);
 8001c76:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <main+0x100>)
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4814      	ldr	r0, [pc, #80]	; (8001ccc <main+0x104>)
 8001c7c:	f008 f920 	bl	8009ec0 <osThreadNew>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <main+0x108>)
 8001c84:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c86:	f008 f8f5 	bl	8009e74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c8a:	e7fe      	b.n	8001c8a <main+0xc2>
 8001c8c:	20000288 	.word	0x20000288
 8001c90:	2000007c 	.word	0x2000007c
 8001c94:	20000134 	.word	0x20000134
 8001c98:	20000380 	.word	0x20000380
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	2000483c 	.word	0x2000483c
 8001ca4:	20004830 	.word	0x20004830
 8001ca8:	20005c99 	.word	0x20005c99
 8001cac:	20004c78 	.word	0x20004c78
 8001cb0:	0800f348 	.word	0x0800f348
 8001cb4:	08002269 	.word	0x08002269
 8001cb8:	20000374 	.word	0x20000374
 8001cbc:	0800f36c 	.word	0x0800f36c
 8001cc0:	080022ad 	.word	0x080022ad
 8001cc4:	20000378 	.word	0x20000378
 8001cc8:	0800f390 	.word	0x0800f390
 8001ccc:	080023a5 	.word	0x080023a5
 8001cd0:	2000037c 	.word	0x2000037c

08001cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b094      	sub	sp, #80	; 0x50
 8001cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cda:	f107 0320 	add.w	r3, r7, #32
 8001cde:	2230      	movs	r2, #48	; 0x30
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f00c fd82 	bl	800e7ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <SystemClock_Config+0xc8>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	4a26      	ldr	r2, [pc, #152]	; (8001d9c <SystemClock_Config+0xc8>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d06:	6413      	str	r3, [r2, #64]	; 0x40
 8001d08:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <SystemClock_Config+0xc8>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <SystemClock_Config+0xcc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <SystemClock_Config+0xcc>)
 8001d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <SystemClock_Config+0xcc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d44:	2304      	movs	r3, #4
 8001d46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001d48:	2364      	movs	r3, #100	; 0x64
 8001d4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d50:	2304      	movs	r3, #4
 8001d52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d54:	f107 0320 	add.w	r3, r7, #32
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 fd1b 	bl	8004794 <HAL_RCC_OscConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d64:	f000 fb5c 	bl	8002420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d68:	230f      	movs	r3, #15
 8001d6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	2103      	movs	r1, #3
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 ff7d 	bl	8004c84 <HAL_RCC_ClockConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d90:	f000 fb46 	bl	8002420 <Error_Handler>
  }
}
 8001d94:	bf00      	nop
 8001d96:	3750      	adds	r7, #80	; 0x50
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40007000 	.word	0x40007000

08001da4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001daa:	463b      	mov	r3, r7
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <MX_ADC1_Init+0xa0>)
 8001dba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001dbc:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001dbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001de8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e02:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e08:	480d      	ldr	r0, [pc, #52]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001e0a:	f000 fe69 	bl	8002ae0 <HAL_ADC_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001e14:	f000 fb04 	bl	8002420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e24:	463b      	mov	r3, r7
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_ADC1_Init+0x9c>)
 8001e2a:	f000 ff97 	bl	8002d5c <HAL_ADC_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001e34:	f000 faf4 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000134 	.word	0x20000134
 8001e44:	40012000 	.word	0x40012000

08001e48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e4e:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <MX_I2C1_Init+0x54>)
 8001e50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e54:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MX_I2C1_Init+0x58>)
 8001e56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e84:	4804      	ldr	r0, [pc, #16]	; (8001e98 <MX_I2C1_Init+0x50>)
 8001e86:	f002 f839 	bl	8003efc <HAL_I2C_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e90:	f000 fac6 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200001dc 	.word	0x200001dc
 8001e9c:	40005400 	.word	0x40005400
 8001ea0:	000186a0 	.word	0x000186a0

08001ea4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001eaa:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <MX_SPI2_Init+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ef0:	220a      	movs	r2, #10
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <MX_SPI2_Init+0x64>)
 8001ef6:	f003 f917 	bl	8005128 <HAL_SPI_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f00:	f000 fa8e 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000230 	.word	0x20000230
 8001f0c:	40003800 	.word	0x40003800

08001f10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f24:	463b      	mov	r3, r7
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <MX_TIM2_Init+0x94>)
 8001f2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <MX_TIM2_Init+0x94>)
 8001f36:	2209      	movs	r2, #9
 8001f38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <MX_TIM2_Init+0x94>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500-1;
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <MX_TIM2_Init+0x94>)
 8001f42:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001f46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <MX_TIM2_Init+0x94>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <MX_TIM2_Init+0x94>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f54:	4813      	ldr	r0, [pc, #76]	; (8001fa4 <MX_TIM2_Init+0x94>)
 8001f56:	f003 fd27 	bl	80059a8 <HAL_TIM_Base_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f60:	f000 fa5e 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f6a:	f107 0308 	add.w	r3, r7, #8
 8001f6e:	4619      	mov	r1, r3
 8001f70:	480c      	ldr	r0, [pc, #48]	; (8001fa4 <MX_TIM2_Init+0x94>)
 8001f72:	f003 ff2d 	bl	8005dd0 <HAL_TIM_ConfigClockSource>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f7c:	f000 fa50 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f80:	2320      	movs	r3, #32
 8001f82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <MX_TIM2_Init+0x94>)
 8001f8e:	f004 f929 	bl	80061e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f98:	f000 fa42 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000288 	.word	0x20000288

08001fa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MX_USART2_UART_Init+0x4c>)
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <MX_USART2_UART_Init+0x50>)
 8001fb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <MX_USART2_UART_Init+0x4c>)
 8001fb4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001fb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <MX_USART2_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <MX_USART2_UART_Init+0x4c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <MX_USART2_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <MX_USART2_UART_Init+0x4c>)
 8001fce:	2208      	movs	r2, #8
 8001fd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <MX_USART2_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MX_USART2_UART_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fde:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <MX_USART2_UART_Init+0x4c>)
 8001fe0:	f004 f982 	bl	80062e8 <HAL_UART_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fea:	f000 fa19 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200002d0 	.word	0x200002d0
 8001ff8:	40004400 	.word	0x40004400

08001ffc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <MX_DMA_Init+0x68>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a16      	ldr	r2, [pc, #88]	; (8002064 <MX_DMA_Init+0x68>)
 800200c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <MX_DMA_Init+0x68>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <MX_DMA_Init+0x68>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <MX_DMA_Init+0x68>)
 8002028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <MX_DMA_Init+0x68>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2105      	movs	r1, #5
 800203e:	2011      	movs	r0, #17
 8002040:	f001 f9f4 	bl	800342c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002044:	2011      	movs	r0, #17
 8002046:	f001 fa0d 	bl	8003464 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2105      	movs	r1, #5
 800204e:	2038      	movs	r0, #56	; 0x38
 8002050:	f001 f9ec 	bl	800342c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002054:	2038      	movs	r0, #56	; 0x38
 8002056:	f001 fa05 	bl	8003464 <HAL_NVIC_EnableIRQ>

}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800

08002068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	; 0x28
 800206c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <MX_GPIO_Init+0x120>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a40      	ldr	r2, [pc, #256]	; (8002188 <MX_GPIO_Init+0x120>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b3e      	ldr	r3, [pc, #248]	; (8002188 <MX_GPIO_Init+0x120>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <MX_GPIO_Init+0x120>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a39      	ldr	r2, [pc, #228]	; (8002188 <MX_GPIO_Init+0x120>)
 80020a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b37      	ldr	r3, [pc, #220]	; (8002188 <MX_GPIO_Init+0x120>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	4b33      	ldr	r3, [pc, #204]	; (8002188 <MX_GPIO_Init+0x120>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a32      	ldr	r2, [pc, #200]	; (8002188 <MX_GPIO_Init+0x120>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b30      	ldr	r3, [pc, #192]	; (8002188 <MX_GPIO_Init+0x120>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <MX_GPIO_Init+0x120>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a2b      	ldr	r2, [pc, #172]	; (8002188 <MX_GPIO_Init+0x120>)
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b29      	ldr	r3, [pc, #164]	; (8002188 <MX_GPIO_Init+0x120>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2120      	movs	r1, #32
 80020f2:	4826      	ldr	r0, [pc, #152]	; (800218c <MX_GPIO_Init+0x124>)
 80020f4:	f001 fed0 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CSI_GPIO_Port, SD_CSI_Pin, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2101      	movs	r1, #1
 80020fc:	4824      	ldr	r0, [pc, #144]	; (8002190 <MX_GPIO_Init+0x128>)
 80020fe:	f001 fecb 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : toggle_robot_btn_Pin */
  GPIO_InitStruct.Pin = toggle_robot_btn_Pin;
 8002102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002108:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800210c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(toggle_robot_btn_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	4619      	mov	r1, r3
 8002118:	481e      	ldr	r0, [pc, #120]	; (8002194 <MX_GPIO_Init+0x12c>)
 800211a:	f001 fd21 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800211e:	2320      	movs	r3, #32
 8002120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002122:	2301      	movs	r3, #1
 8002124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	4619      	mov	r1, r3
 8002134:	4815      	ldr	r0, [pc, #84]	; (800218c <MX_GPIO_Init+0x124>)
 8002136:	f001 fd13 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CSI_Pin */
  GPIO_InitStruct.Pin = SD_CSI_Pin;
 800213a:	2301      	movs	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	2301      	movs	r3, #1
 8002140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CSI_GPIO_Port, &GPIO_InitStruct);
 800214a:	f107 0314 	add.w	r3, r7, #20
 800214e:	4619      	mov	r1, r3
 8002150:	480f      	ldr	r0, [pc, #60]	; (8002190 <MX_GPIO_Init+0x128>)
 8002152:	f001 fd05 	bl	8003b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : save_file_btn_Pin */
  GPIO_InitStruct.Pin = save_file_btn_Pin;
 8002156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800215c:	2300      	movs	r3, #0
 800215e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(save_file_btn_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	480a      	ldr	r0, [pc, #40]	; (8002194 <MX_GPIO_Init+0x12c>)
 800216c:	f001 fcf8 	bl	8003b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2105      	movs	r1, #5
 8002174:	2028      	movs	r0, #40	; 0x28
 8002176:	f001 f959 	bl	800342c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800217a:	2028      	movs	r0, #40	; 0x28
 800217c:	f001 f972 	bl	8003464 <HAL_NVIC_EnableIRQ>

}
 8002180:	bf00      	nop
 8002182:	3728      	adds	r7, #40	; 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40020800 	.word	0x40020800

08002198 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	in_buf_ptr = &in_buf[0];
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80021a2:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80021a4:	601a      	str	r2, [r3, #0]
	out_buf_ptr = &out_buf[OUTPUT_PROCESS_BUF_SIZE];
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80021a8:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80021aa:	601a      	str	r2, [r3, #0]
	out_buf_char_ptr = &out_buf_char[OUTPUT_PROCESS_CHAR_BUF_SIZE];
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 80021b0:	601a      	str	r2, [r3, #0]
	write_file_chunk_flag = 1;
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_ADC_ConvHalfCpltCallback+0x44>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	2000007c 	.word	0x2000007c
 80021c8:	20002430 	.word	0x20002430
 80021cc:	20000080 	.word	0x20000080
 80021d0:	20003030 	.word	0x20003030
 80021d4:	20000084 	.word	0x20000084
 80021d8:	20003e30 	.word	0x20003e30
 80021dc:	20005c90 	.word	0x20005c90

080021e0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	in_buf_ptr = &in_buf[INPUT_PROCESS_BUF_SIZE];
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_ADC_ConvCpltCallback+0x34>)
 80021ea:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <HAL_ADC_ConvCpltCallback+0x38>)
 80021ec:	601a      	str	r2, [r3, #0]
	out_buf_ptr = &out_buf[0];
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_ADC_ConvCpltCallback+0x3c>)
 80021f0:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <HAL_ADC_ConvCpltCallback+0x40>)
 80021f2:	601a      	str	r2, [r3, #0]
	out_buf_char_ptr = &out_buf_char[0];
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_ADC_ConvCpltCallback+0x44>)
 80021f6:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <HAL_ADC_ConvCpltCallback+0x48>)
 80021f8:	601a      	str	r2, [r3, #0]
	write_file_chunk_flag = 1;
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <HAL_ADC_ConvCpltCallback+0x4c>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &in_buf[0], INPUT_BUF_SIZE);
 8002200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002204:	490a      	ldr	r1, [pc, #40]	; (8002230 <HAL_ADC_ConvCpltCallback+0x50>)
 8002206:	480b      	ldr	r0, [pc, #44]	; (8002234 <HAL_ADC_ConvCpltCallback+0x54>)
 8002208:	f000 fcae 	bl	8002b68 <HAL_ADC_Start_DMA>
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	2000007c 	.word	0x2000007c
 8002218:	20002830 	.word	0x20002830
 800221c:	20000080 	.word	0x20000080
 8002220:	20002c30 	.word	0x20002c30
 8002224:	20000084 	.word	0x20000084
 8002228:	20003430 	.word	0x20003430
 800222c:	20005c90 	.word	0x20005c90
 8002230:	20002430 	.word	0x20002430
 8002234:	20000134 	.word	0x20000134

08002238 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == toggle_robot_btn_Pin) {
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002248:	d106      	bne.n	8002258 <HAL_GPIO_EXTI_Callback+0x20>
		robot_effect ^= 1;
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_GPIO_EXTI_Callback+0x2c>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	f083 0301 	eor.w	r3, r3, #1
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002256:	701a      	strb	r2, [r3, #0]
	}
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	20005c91 	.word	0x20005c91

08002268 <StartProcessInput>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartProcessInput */
void StartProcessInput(void *argument)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (write_file_chunk_flag == 1) {
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <StartProcessInput+0x38>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d10f      	bne.n	8002298 <StartProcessInput+0x30>
		  process_data();
 8002278:	f7ff fbd2 	bl	8001a20 <process_data>
		  if (sound_activity_detected) {
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <StartProcessInput+0x3c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d006      	beq.n	8002292 <StartProcessInput+0x2a>
			  send_uart(out_buf_char_ptr, OUTPUT_PROCESS_CHAR_BUF_SIZE);
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <StartProcessInput+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff faef 	bl	8001870 <send_uart>
		  }
		  write_file_chunk_flag = 2;
 8002292:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <StartProcessInput+0x38>)
 8002294:	2202      	movs	r2, #2
 8002296:	701a      	strb	r2, [r3, #0]
	  }
	  osDelay(1);
 8002298:	2001      	movs	r0, #1
 800229a:	f007 fea3 	bl	8009fe4 <osDelay>
	  if (write_file_chunk_flag == 1) {
 800229e:	e7e7      	b.n	8002270 <StartProcessInput+0x8>
 80022a0:	20005c90 	.word	0x20005c90
 80022a4:	20000088 	.word	0x20000088
 80022a8:	20000084 	.word	0x20000084

080022ac <StartSaveFile>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSaveFile */
void StartSaveFile(void *argument)
{
 80022ac:	b5b0      	push	{r4, r5, r7, lr}
 80022ae:	b08c      	sub	sp, #48	; 0x30
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSaveFile */

	char saved_file_name[32] = "SDcard_save_1.txt";
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <StartSaveFile+0xd0>)
 80022b6:	f107 040c 	add.w	r4, r7, #12
 80022ba:	461d      	mov	r5, r3
 80022bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c0:	682b      	ldr	r3, [r5, #0]
 80022c2:	8023      	strh	r3, [r4, #0]
 80022c4:	f107 031e 	add.w	r3, r7, #30
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	819a      	strh	r2, [r3, #12]
	int current_file_no = 1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	fstatus = open_append(&fil,saved_file_name);
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	4619      	mov	r1, r3
 80022dc:	4828      	ldr	r0, [pc, #160]	; (8002380 <StartSaveFile+0xd4>)
 80022de:	f7ff fae7 	bl	80018b0 <open_append>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b27      	ldr	r3, [pc, #156]	; (8002384 <StartSaveFile+0xd8>)
 80022e8:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  // Check whether the other half of the buffer has been filled after processing the current chunk
	  if (write_file_chunk_flag == 2) {
 80022ea:	4b27      	ldr	r3, [pc, #156]	; (8002388 <StartSaveFile+0xdc>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d140      	bne.n	8002374 <StartSaveFile+0xc8>
		  if (sound_activity_detected) {
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <StartSaveFile+0xe0>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <StartSaveFile+0x66>
			  fstatus = f_write(&fil, out_buf_char_ptr, OUTPUT_PROCESS_CHAR_BUF_SIZE, &bw);
 80022fa:	4b25      	ldr	r3, [pc, #148]	; (8002390 <StartSaveFile+0xe4>)
 80022fc:	6819      	ldr	r1, [r3, #0]
 80022fe:	4b25      	ldr	r3, [pc, #148]	; (8002394 <StartSaveFile+0xe8>)
 8002300:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002304:	481e      	ldr	r0, [pc, #120]	; (8002380 <StartSaveFile+0xd4>)
 8002306:	f007 f895 	bl	8009434 <f_write>
 800230a:	4603      	mov	r3, r0
 800230c:	461a      	mov	r2, r3
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <StartSaveFile+0xd8>)
 8002310:	701a      	strb	r2, [r3, #0]
		  }

		  // Check whether a file needs to be closed (can only be done after writing)
		  if (HAL_GPIO_ReadPin (save_file_btn_GPIO_Port, save_file_btn_Pin) == 1) {
 8002312:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002316:	4820      	ldr	r0, [pc, #128]	; (8002398 <StartSaveFile+0xec>)
 8002318:	f001 fda6 	bl	8003e68 <HAL_GPIO_ReadPin>
 800231c:	4603      	mov	r3, r0
 800231e:	2b01      	cmp	r3, #1
 8002320:	d125      	bne.n	800236e <StartSaveFile+0xc2>
			  fstatus = f_close(&fil);
 8002322:	4817      	ldr	r0, [pc, #92]	; (8002380 <StartSaveFile+0xd4>)
 8002324:	f007 fad2 	bl	80098cc <f_close>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	4b15      	ldr	r3, [pc, #84]	; (8002384 <StartSaveFile+0xd8>)
 800232e:	701a      	strb	r2, [r3, #0]

			  lcd_clear();
 8002330:	f7ff f9ce 	bl	80016d0 <lcd_clear>
			  lcd_send_string("Saving file...\n");
 8002334:	4819      	ldr	r0, [pc, #100]	; (800239c <StartSaveFile+0xf0>)
 8002336:	f7ff fa15 	bl	8001764 <lcd_send_string>
			  osDelay(1000);
 800233a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800233e:	f007 fe51 	bl	8009fe4 <osDelay>
			  lcd_clear();
 8002342:	f7ff f9c5 	bl	80016d0 <lcd_clear>
			  sprintf(saved_file_name, "SDcard_save_%d.txt", ++current_file_no);
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	3301      	adds	r3, #1
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002352:	4913      	ldr	r1, [pc, #76]	; (80023a0 <StartSaveFile+0xf4>)
 8002354:	4618      	mov	r0, r3
 8002356:	f00c fb5f 	bl	800ea18 <siprintf>
			  fstatus= open_append(&fil,saved_file_name);
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	4619      	mov	r1, r3
 8002360:	4807      	ldr	r0, [pc, #28]	; (8002380 <StartSaveFile+0xd4>)
 8002362:	f7ff faa5 	bl	80018b0 <open_append>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <StartSaveFile+0xd8>)
 800236c:	701a      	strb	r2, [r3, #0]
		  }
		  write_file_chunk_flag = 0;
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <StartSaveFile+0xdc>)
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
	  }
    osDelay(1);
 8002374:	2001      	movs	r0, #1
 8002376:	f007 fe35 	bl	8009fe4 <osDelay>
	  if (write_file_chunk_flag == 2) {
 800237a:	e7b6      	b.n	80022ea <StartSaveFile+0x3e>
 800237c:	0800f2a0 	.word	0x0800f2a0
 8002380:	200013f8 	.word	0x200013f8
 8002384:	20002428 	.word	0x20002428
 8002388:	20005c90 	.word	0x20005c90
 800238c:	20000088 	.word	0x20000088
 8002390:	20000084 	.word	0x20000084
 8002394:	2000242c 	.word	0x2000242c
 8002398:	40020800 	.word	0x40020800
 800239c:	0800f27c 	.word	0x0800f27c
 80023a0:	0800f28c 	.word	0x0800f28c

080023a4 <StartSendLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendLCD */
void StartSendLCD(void *argument)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendLCD */
	char max_freq_char[21];
  /* Infinite loop */
  for(;;)
  {
	  lcd_clear();
 80023ac:	f7ff f990 	bl	80016d0 <lcd_clear>
	  if (sound_activity_detected) {
 80023b0:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <StartSendLCD+0x44>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00f      	beq.n	80023d8 <StartSendLCD+0x34>
		  	  sprintf(max_freq_char, "Max %4.4lu     R %d", max_fft_freq * 8, robot_effect);
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <StartSendLCD+0x48>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	00da      	lsls	r2, r3, #3
 80023be:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <StartSendLCD+0x4c>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	f107 0008 	add.w	r0, r7, #8
 80023c6:	490b      	ldr	r1, [pc, #44]	; (80023f4 <StartSendLCD+0x50>)
 80023c8:	f00c fb26 	bl	800ea18 <siprintf>
		  	  lcd_send_string(max_freq_char);
 80023cc:	f107 0308 	add.w	r3, r7, #8
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff f9c7 	bl	8001764 <lcd_send_string>
 80023d6:	e002      	b.n	80023de <StartSendLCD+0x3a>
	  } else {
		  lcd_send_string("No sound detected!");
 80023d8:	4807      	ldr	r0, [pc, #28]	; (80023f8 <StartSendLCD+0x54>)
 80023da:	f7ff f9c3 	bl	8001764 <lcd_send_string>
	  }
	  osDelay(1000);
 80023de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023e2:	f007 fdff 	bl	8009fe4 <osDelay>
	  lcd_clear();
 80023e6:	e7e1      	b.n	80023ac <StartSendLCD+0x8>
 80023e8:	20000088 	.word	0x20000088
 80023ec:	20005c94 	.word	0x20005c94
 80023f0:	20005c91 	.word	0x20005c91
 80023f4:	0800f2c0 	.word	0x0800f2c0
 80023f8:	0800f2d4 	.word	0x0800f2d4

080023fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800240e:	f000 fb23 	bl	8002a58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40014000 	.word	0x40014000

08002420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002424:	b672      	cpsid	i
}
 8002426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002428:	e7fe      	b.n	8002428 <Error_Handler+0x8>
	...

0800242c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_MspInit+0x54>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a11      	ldr	r2, [pc, #68]	; (8002480 <HAL_MspInit+0x54>)
 800243c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <HAL_MspInit+0x54>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_MspInit+0x54>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_MspInit+0x54>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_MspInit+0x54>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	210f      	movs	r1, #15
 800246e:	f06f 0001 	mvn.w	r0, #1
 8002472:	f000 ffdb 	bl	800342c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800

08002484 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a2f      	ldr	r2, [pc, #188]	; (8002560 <HAL_ADC_MspInit+0xdc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d157      	bne.n	8002556 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <HAL_ADC_MspInit+0xe0>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4a2d      	ldr	r2, [pc, #180]	; (8002564 <HAL_ADC_MspInit+0xe0>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b4:	6453      	str	r3, [r2, #68]	; 0x44
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_ADC_MspInit+0xe0>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	4b27      	ldr	r3, [pc, #156]	; (8002564 <HAL_ADC_MspInit+0xe0>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a26      	ldr	r2, [pc, #152]	; (8002564 <HAL_ADC_MspInit+0xe0>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b24      	ldr	r3, [pc, #144]	; (8002564 <HAL_ADC_MspInit+0xe0>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024de:	2301      	movs	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e2:	2303      	movs	r3, #3
 80024e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	4619      	mov	r1, r3
 80024f0:	481d      	ldr	r0, [pc, #116]	; (8002568 <HAL_ADC_MspInit+0xe4>)
 80024f2:	f001 fb35 	bl	8003b60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_ADC_MspInit+0xe8>)
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_ADC_MspInit+0xec>)
 80024fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_ADC_MspInit+0xe8>)
 80024fe:	2200      	movs	r2, #0
 8002500:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002502:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_ADC_MspInit+0xe8>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_ADC_MspInit+0xe8>)
 800250a:	2200      	movs	r2, #0
 800250c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_ADC_MspInit+0xe8>)
 8002510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002514:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_ADC_MspInit+0xe8>)
 8002518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800251c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <HAL_ADC_MspInit+0xe8>)
 8002520:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002524:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_ADC_MspInit+0xe8>)
 8002528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800252c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_ADC_MspInit+0xe8>)
 8002530:	2200      	movs	r2, #0
 8002532:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_ADC_MspInit+0xe8>)
 8002536:	2200      	movs	r2, #0
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800253a:	480c      	ldr	r0, [pc, #48]	; (800256c <HAL_ADC_MspInit+0xe8>)
 800253c:	f000 ffa0 	bl	8003480 <HAL_DMA_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002546:	f7ff ff6b 	bl	8002420 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <HAL_ADC_MspInit+0xe8>)
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
 8002550:	4a06      	ldr	r2, [pc, #24]	; (800256c <HAL_ADC_MspInit+0xe8>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002556:	bf00      	nop
 8002558:	3728      	adds	r7, #40	; 0x28
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40012000 	.word	0x40012000
 8002564:	40023800 	.word	0x40023800
 8002568:	40020000 	.word	0x40020000
 800256c:	2000017c 	.word	0x2000017c
 8002570:	40026410 	.word	0x40026410

08002574 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <HAL_I2C_MspInit+0x84>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d12c      	bne.n	80025f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	4b18      	ldr	r3, [pc, #96]	; (80025fc <HAL_I2C_MspInit+0x88>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a17      	ldr	r2, [pc, #92]	; (80025fc <HAL_I2C_MspInit+0x88>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <HAL_I2C_MspInit+0x88>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b8:	2312      	movs	r3, #18
 80025ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c0:	2303      	movs	r3, #3
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025c4:	2304      	movs	r3, #4
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	480c      	ldr	r0, [pc, #48]	; (8002600 <HAL_I2C_MspInit+0x8c>)
 80025d0:	f001 fac6 	bl	8003b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_I2C_MspInit+0x88>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	4a07      	ldr	r2, [pc, #28]	; (80025fc <HAL_I2C_MspInit+0x88>)
 80025de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025e2:	6413      	str	r3, [r2, #64]	; 0x40
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_I2C_MspInit+0x88>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025f0:	bf00      	nop
 80025f2:	3728      	adds	r7, #40	; 0x28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40005400 	.word	0x40005400
 80025fc:	40023800 	.word	0x40023800
 8002600:	40020400 	.word	0x40020400

08002604 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <HAL_SPI_MspInit+0xc0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d14a      	bne.n	80026bc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_SPI_MspInit+0xc4>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a26      	ldr	r2, [pc, #152]	; (80026c8 <HAL_SPI_MspInit+0xc4>)
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_SPI_MspInit+0xc4>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_SPI_MspInit+0xc4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <HAL_SPI_MspInit+0xc4>)
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_SPI_MspInit+0xc4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_SPI_MspInit+0xc4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a18      	ldr	r2, [pc, #96]	; (80026c8 <HAL_SPI_MspInit+0xc4>)
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <HAL_SPI_MspInit+0xc4>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800267a:	230c      	movs	r3, #12
 800267c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002686:	2303      	movs	r3, #3
 8002688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800268a:	2305      	movs	r3, #5
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	480d      	ldr	r0, [pc, #52]	; (80026cc <HAL_SPI_MspInit+0xc8>)
 8002696:	f001 fa63 	bl	8003b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800269a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800269e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a8:	2303      	movs	r3, #3
 80026aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026ac:	2305      	movs	r3, #5
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4619      	mov	r1, r3
 80026b6:	4806      	ldr	r0, [pc, #24]	; (80026d0 <HAL_SPI_MspInit+0xcc>)
 80026b8:	f001 fa52 	bl	8003b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026bc:	bf00      	nop
 80026be:	3728      	adds	r7, #40	; 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40003800 	.word	0x40003800
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020400 	.word	0x40020400

080026d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e4:	d10d      	bne.n	8002702 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_TIM_Base_MspInit+0x3c>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a08      	ldr	r2, [pc, #32]	; (8002710 <HAL_TIM_Base_MspInit+0x3c>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_TIM_Base_MspInit+0x3c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a30      	ldr	r2, [pc, #192]	; (80027f4 <HAL_UART_MspInit+0xe0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d15a      	bne.n	80027ec <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <HAL_UART_MspInit+0xe4>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a2e      	ldr	r2, [pc, #184]	; (80027f8 <HAL_UART_MspInit+0xe4>)
 8002740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <HAL_UART_MspInit+0xe4>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	4b28      	ldr	r3, [pc, #160]	; (80027f8 <HAL_UART_MspInit+0xe4>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a27      	ldr	r2, [pc, #156]	; (80027f8 <HAL_UART_MspInit+0xe4>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <HAL_UART_MspInit+0xe4>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800276e:	230c      	movs	r3, #12
 8002770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002772:	2302      	movs	r3, #2
 8002774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277a:	2303      	movs	r3, #3
 800277c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800277e:	2307      	movs	r3, #7
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4619      	mov	r1, r3
 8002788:	481c      	ldr	r0, [pc, #112]	; (80027fc <HAL_UART_MspInit+0xe8>)
 800278a:	f001 f9e9 	bl	8003b60 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_UART_MspInit+0xec>)
 8002790:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <HAL_UART_MspInit+0xf0>)
 8002792:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002794:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <HAL_UART_MspInit+0xec>)
 8002796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800279a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800279c:	4b18      	ldr	r3, [pc, #96]	; (8002800 <HAL_UART_MspInit+0xec>)
 800279e:	2240      	movs	r2, #64	; 0x40
 80027a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027a8:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80027bc:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80027d0:	480b      	ldr	r0, [pc, #44]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027d2:	f000 fe55 	bl	8003480 <HAL_DMA_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80027dc:	f7ff fe20 	bl	8002420 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a07      	ldr	r2, [pc, #28]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34
 80027e6:	4a06      	ldr	r2, [pc, #24]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027ec:	bf00      	nop
 80027ee:	3728      	adds	r7, #40	; 0x28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40004400 	.word	0x40004400
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020000 	.word	0x40020000
 8002800:	20000314 	.word	0x20000314
 8002804:	400260a0 	.word	0x400260a0

08002808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8002818:	2200      	movs	r2, #0
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	2018      	movs	r0, #24
 800281e:	f000 fe05 	bl	800342c <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002822:	2018      	movs	r0, #24
 8002824:	f000 fe1e 	bl	8003464 <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_InitTick+0xa0>)
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_InitTick+0xa0>)
 8002832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002836:	6453      	str	r3, [r2, #68]	; 0x44
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_InitTick+0xa0>)
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002844:	f107 0210 	add.w	r2, r7, #16
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fc38 	bl	80050c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002854:	f002 fc22 	bl	800509c <HAL_RCC_GetPCLK2Freq>
 8002858:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	4a13      	ldr	r2, [pc, #76]	; (80028ac <HAL_InitTick+0xa4>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0c9b      	lsrs	r3, r3, #18
 8002864:	3b01      	subs	r3, #1
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_InitTick+0xa8>)
 800286a:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <HAL_InitTick+0xac>)
 800286c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_InitTick+0xa8>)
 8002870:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002874:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8002876:	4a0e      	ldr	r2, [pc, #56]	; (80028b0 <HAL_InitTick+0xa8>)
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <HAL_InitTick+0xa8>)
 800287e:	2200      	movs	r2, #0
 8002880:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_InitTick+0xa8>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8002888:	4809      	ldr	r0, [pc, #36]	; (80028b0 <HAL_InitTick+0xa8>)
 800288a:	f003 f88d 	bl	80059a8 <HAL_TIM_Base_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d104      	bne.n	800289e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8002894:	4806      	ldr	r0, [pc, #24]	; (80028b0 <HAL_InitTick+0xa8>)
 8002896:	f003 f931 	bl	8005afc <HAL_TIM_Base_Start_IT>
 800289a:	4603      	mov	r3, r0
 800289c:	e000      	b.n	80028a0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3730      	adds	r7, #48	; 0x30
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	431bde83 	.word	0x431bde83
 80028b0:	20005c9c 	.word	0x20005c9c
 80028b4:	40014000 	.word	0x40014000

080028b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028bc:	e7fe      	b.n	80028bc <NMI_Handler+0x4>

080028be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c2:	e7fe      	b.n	80028c2 <HardFault_Handler+0x4>

080028c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <MemManage_Handler+0x4>

080028ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ce:	e7fe      	b.n	80028ce <BusFault_Handler+0x4>

080028d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <UsageFault_Handler+0x4>

080028d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <DMA1_Stream6_IRQHandler+0x10>)
 80028ea:	f000 fecf 	bl	800368c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000314 	.word	0x20000314

080028f8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80028fe:	f003 f95f 	bl	8005bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20005c9c 	.word	0x20005c9c

0800290c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(toggle_robot_btn_Pin);
 8002910:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002914:	f001 fada 	bl	8003ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}

0800291c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <DMA2_Stream0_IRQHandler+0x10>)
 8002922:	f000 feb3 	bl	800368c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	2000017c 	.word	0x2000017c

08002930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <_sbrk+0x5c>)
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <_sbrk+0x60>)
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <_sbrk+0x64>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <_sbrk+0x64>)
 800294e:	4a12      	ldr	r2, [pc, #72]	; (8002998 <_sbrk+0x68>)
 8002950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	429a      	cmp	r2, r3
 800295e:	d207      	bcs.n	8002970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002960:	f00b ff0a 	bl	800e778 <__errno>
 8002964:	4603      	mov	r3, r0
 8002966:	220c      	movs	r2, #12
 8002968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800296a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800296e:	e009      	b.n	8002984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <_sbrk+0x64>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <_sbrk+0x64>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	4a05      	ldr	r2, [pc, #20]	; (8002994 <_sbrk+0x64>)
 8002980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002982:	68fb      	ldr	r3, [r7, #12]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20020000 	.word	0x20020000
 8002990:	00000400 	.word	0x00000400
 8002994:	20005ce8 	.word	0x20005ce8
 8002998:	2000a750 	.word	0x2000a750

0800299c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <SystemInit+0x20>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	4a05      	ldr	r2, [pc, #20]	; (80029bc <SystemInit+0x20>)
 80029a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029c4:	480d      	ldr	r0, [pc, #52]	; (80029fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029c6:	490e      	ldr	r1, [pc, #56]	; (8002a00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029c8:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029cc:	e002      	b.n	80029d4 <LoopCopyDataInit>

080029ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d2:	3304      	adds	r3, #4

080029d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d8:	d3f9      	bcc.n	80029ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029dc:	4c0b      	ldr	r4, [pc, #44]	; (8002a0c <LoopFillZerobss+0x26>)
  movs r3, #0
 80029de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e0:	e001      	b.n	80029e6 <LoopFillZerobss>

080029e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e4:	3204      	adds	r2, #4

080029e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e8:	d3fb      	bcc.n	80029e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029ea:	f7ff ffd7 	bl	800299c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ee:	f00b fec9 	bl	800e784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f2:	f7ff f8e9 	bl	8001bc8 <main>
  bx  lr    
 80029f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a00:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8002a04:	08021710 	.word	0x08021710
  ldr r2, =_sbss
 8002a08:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8002a0c:	2000a74c 	.word	0x2000a74c

08002a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a10:	e7fe      	b.n	8002a10 <ADC_IRQHandler>
	...

08002a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_Init+0x40>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <HAL_Init+0x40>)
 8002a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_Init+0x40>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <HAL_Init+0x40>)
 8002a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <HAL_Init+0x40>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <HAL_Init+0x40>)
 8002a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	f000 fcea 	bl	8003416 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a42:	200f      	movs	r0, #15
 8002a44:	f7ff fee0 	bl	8002808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a48:	f7ff fcf0 	bl	800242c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023c00 	.word	0x40023c00

08002a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_IncTick+0x20>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_IncTick+0x24>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <HAL_IncTick+0x24>)
 8002a6a:	6013      	str	r3, [r2, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000094 	.word	0x20000094
 8002a7c:	20005cec 	.word	0x20005cec

08002a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return uwTick;
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_GetTick+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20005cec 	.word	0x20005cec

08002a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa0:	f7ff ffee 	bl	8002a80 <HAL_GetTick>
 8002aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab0:	d005      	beq.n	8002abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <HAL_Delay+0x44>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002abe:	bf00      	nop
 8002ac0:	f7ff ffde 	bl	8002a80 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d8f7      	bhi.n	8002ac0 <HAL_Delay+0x28>
  {
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000094 	.word	0x20000094

08002ae0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e033      	b.n	8002b5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff fcc0 	bl	8002484 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d118      	bne.n	8002b50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b26:	f023 0302 	bic.w	r3, r3, #2
 8002b2a:	f043 0202 	orr.w	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa44 	bl	8002fc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b4e:	e001      	b.n	8002b54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Start_DMA+0x1e>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e0ce      	b.n	8002d24 <HAL_ADC_Start_DMA+0x1bc>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d018      	beq.n	8002bce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bac:	4b5f      	ldr	r3, [pc, #380]	; (8002d2c <HAL_ADC_Start_DMA+0x1c4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a5f      	ldr	r2, [pc, #380]	; (8002d30 <HAL_ADC_Start_DMA+0x1c8>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0c9a      	lsrs	r2, r3, #18
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bc0:	e002      	b.n	8002bc8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f9      	bne.n	8002bc2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bdc:	d107      	bne.n	8002bee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	f040 8086 	bne.w	8002d0a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3c:	d106      	bne.n	8002c4c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f023 0206 	bic.w	r2, r3, #6
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
 8002c4a:	e002      	b.n	8002c52 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c5a:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <HAL_ADC_Start_DMA+0x1cc>)
 8002c5c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	4a35      	ldr	r2, [pc, #212]	; (8002d38 <HAL_ADC_Start_DMA+0x1d0>)
 8002c64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	4a34      	ldr	r2, [pc, #208]	; (8002d3c <HAL_ADC_Start_DMA+0x1d4>)
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	4a33      	ldr	r2, [pc, #204]	; (8002d40 <HAL_ADC_Start_DMA+0x1d8>)
 8002c74:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c7e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c8e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c9e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	334c      	adds	r3, #76	; 0x4c
 8002caa:	4619      	mov	r1, r3
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f000 fc94 	bl	80035dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10f      	bne.n	8002ce0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d129      	bne.n	8002d22 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	e020      	b.n	8002d22 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <HAL_ADC_Start_DMA+0x1dc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d11b      	bne.n	8002d22 <HAL_ADC_Start_DMA+0x1ba>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d114      	bne.n	8002d22 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	e00b      	b.n	8002d22 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f043 0210 	orr.w	r2, r3, #16
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f043 0201 	orr.w	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	2000008c 	.word	0x2000008c
 8002d30:	431bde83 	.word	0x431bde83
 8002d34:	40012300 	.word	0x40012300
 8002d38:	080031b9 	.word	0x080031b9
 8002d3c:	08003273 	.word	0x08003273
 8002d40:	0800328f 	.word	0x0800328f
 8002d44:	40012000 	.word	0x40012000

08002d48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x1c>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e113      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x244>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b09      	cmp	r3, #9
 8002d86:	d925      	bls.n	8002dd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68d9      	ldr	r1, [r3, #12]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	4613      	mov	r3, r2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3b1e      	subs	r3, #30
 8002d9e:	2207      	movs	r2, #7
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43da      	mvns	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	400a      	ands	r2, r1
 8002dac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68d9      	ldr	r1, [r3, #12]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4403      	add	r3, r0
 8002dc6:	3b1e      	subs	r3, #30
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	e022      	b.n	8002e1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6919      	ldr	r1, [r3, #16]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	2207      	movs	r2, #7
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	400a      	ands	r2, r1
 8002df6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6919      	ldr	r1, [r3, #16]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4403      	add	r3, r0
 8002e10:	409a      	lsls	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d824      	bhi.n	8002e6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	3b05      	subs	r3, #5
 8002e34:	221f      	movs	r2, #31
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	400a      	ands	r2, r1
 8002e42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	4618      	mov	r0, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3b05      	subs	r3, #5
 8002e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	635a      	str	r2, [r3, #52]	; 0x34
 8002e6a:	e04c      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	d824      	bhi.n	8002ebe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	3b23      	subs	r3, #35	; 0x23
 8002e86:	221f      	movs	r2, #31
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	400a      	ands	r2, r1
 8002e94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	3b23      	subs	r3, #35	; 0x23
 8002eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
 8002ebc:	e023      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	3b41      	subs	r3, #65	; 0x41
 8002ed0:	221f      	movs	r2, #31
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	400a      	ands	r2, r1
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	4618      	mov	r0, r3
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3b41      	subs	r3, #65	; 0x41
 8002efa:	fa00 f203 	lsl.w	r2, r0, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f06:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_ADC_ConfigChannel+0x250>)
 8002f08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a28      	ldr	r2, [pc, #160]	; (8002fb0 <HAL_ADC_ConfigChannel+0x254>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d10f      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1d8>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b12      	cmp	r3, #18
 8002f1a:	d10b      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <HAL_ADC_ConfigChannel+0x254>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d12b      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x23a>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <HAL_ADC_ConfigChannel+0x258>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d003      	beq.n	8002f50 <HAL_ADC_ConfigChannel+0x1f4>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b11      	cmp	r3, #17
 8002f4e:	d122      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <HAL_ADC_ConfigChannel+0x258>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d111      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f72:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_ADC_ConfigChannel+0x25c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a11      	ldr	r2, [pc, #68]	; (8002fbc <HAL_ADC_ConfigChannel+0x260>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	0c9a      	lsrs	r2, r3, #18
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f88:	e002      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f9      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40012300 	.word	0x40012300
 8002fb0:	40012000 	.word	0x40012000
 8002fb4:	10000012 	.word	0x10000012
 8002fb8:	2000008c 	.word	0x2000008c
 8002fbc:	431bde83 	.word	0x431bde83

08002fc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc8:	4b79      	ldr	r3, [pc, #484]	; (80031b0 <ADC_Init+0x1f0>)
 8002fca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	021a      	lsls	r2, r3, #8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800303a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	4a58      	ldr	r2, [pc, #352]	; (80031b4 <ADC_Init+0x1f4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d022      	beq.n	800309e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003066:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6899      	ldr	r1, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003088:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6899      	ldr	r1, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	e00f      	b.n	80030be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0202 	bic.w	r2, r2, #2
 80030cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6899      	ldr	r1, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7e1b      	ldrb	r3, [r3, #24]
 80030d8:	005a      	lsls	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01b      	beq.n	8003124 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800310a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	3b01      	subs	r3, #1
 8003118:	035a      	lsls	r2, r3, #13
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	e007      	b.n	8003134 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003132:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	3b01      	subs	r3, #1
 8003150:	051a      	lsls	r2, r3, #20
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6899      	ldr	r1, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003176:	025a      	lsls	r2, r3, #9
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6899      	ldr	r1, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	029a      	lsls	r2, r3, #10
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	40012300 	.word	0x40012300
 80031b4:	0f000001 	.word	0x0f000001

080031b8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d13c      	bne.n	800324c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d12b      	bne.n	8003244 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d127      	bne.n	8003244 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d006      	beq.n	8003210 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800320c:	2b00      	cmp	r3, #0
 800320e:	d119      	bne.n	8003244 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0220 	bic.w	r2, r2, #32
 800321e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7fe ffcb 	bl	80021e0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800324a:	e00e      	b.n	800326a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7ff fd75 	bl	8002d48 <HAL_ADC_ErrorCallback>
}
 800325e:	e004      	b.n	800326a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	4798      	blx	r3
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7fe ff89 	bl	8002198 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2240      	movs	r2, #64	; 0x40
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f043 0204 	orr.w	r2, r3, #4
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f7ff fd4a 	bl	8002d48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d8:	4013      	ands	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ee:	4a04      	ldr	r2, [pc, #16]	; (8003300 <__NVIC_SetPriorityGrouping+0x44>)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	60d3      	str	r3, [r2, #12]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <__NVIC_GetPriorityGrouping+0x18>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	f003 0307 	and.w	r3, r3, #7
}
 8003312:	4618      	mov	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	2b00      	cmp	r3, #0
 8003330:	db0b      	blt.n	800334a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	f003 021f 	and.w	r2, r3, #31
 8003338:	4907      	ldr	r1, [pc, #28]	; (8003358 <__NVIC_EnableIRQ+0x38>)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	2001      	movs	r0, #1
 8003342:	fa00 f202 	lsl.w	r2, r0, r2
 8003346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	e000e100 	.word	0xe000e100

0800335c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336c:	2b00      	cmp	r3, #0
 800336e:	db0a      	blt.n	8003386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	b2da      	uxtb	r2, r3
 8003374:	490c      	ldr	r1, [pc, #48]	; (80033a8 <__NVIC_SetPriority+0x4c>)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	0112      	lsls	r2, r2, #4
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	440b      	add	r3, r1
 8003380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003384:	e00a      	b.n	800339c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4908      	ldr	r1, [pc, #32]	; (80033ac <__NVIC_SetPriority+0x50>)
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	3b04      	subs	r3, #4
 8003394:	0112      	lsls	r2, r2, #4
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	440b      	add	r3, r1
 800339a:	761a      	strb	r2, [r3, #24]
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000e100 	.word	0xe000e100
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	; 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f1c3 0307 	rsb	r3, r3, #7
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	bf28      	it	cs
 80033ce:	2304      	movcs	r3, #4
 80033d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d902      	bls.n	80033e0 <NVIC_EncodePriority+0x30>
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3b03      	subs	r3, #3
 80033de:	e000      	b.n	80033e2 <NVIC_EncodePriority+0x32>
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43da      	mvns	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	401a      	ands	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	43d9      	mvns	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003408:	4313      	orrs	r3, r2
         );
}
 800340a:	4618      	mov	r0, r3
 800340c:	3724      	adds	r7, #36	; 0x24
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ff4c 	bl	80032bc <__NVIC_SetPriorityGrouping>
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800343e:	f7ff ff61 	bl	8003304 <__NVIC_GetPriorityGrouping>
 8003442:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	6978      	ldr	r0, [r7, #20]
 800344a:	f7ff ffb1 	bl	80033b0 <NVIC_EncodePriority>
 800344e:	4602      	mov	r2, r0
 8003450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff80 	bl	800335c <__NVIC_SetPriority>
}
 800345c:	bf00      	nop
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff ff54 	bl	8003320 <__NVIC_EnableIRQ>
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7ff faf8 	bl	8002a80 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e099      	b.n	80035d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0201 	bic.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034bc:	e00f      	b.n	80034de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034be:	f7ff fadf 	bl	8002a80 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b05      	cmp	r3, #5
 80034ca:	d908      	bls.n	80034de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2203      	movs	r2, #3
 80034d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e078      	b.n	80035d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e8      	bne.n	80034be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <HAL_DMA_Init+0x158>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800350a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003516:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003522:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	2b04      	cmp	r3, #4
 8003536:	d107      	bne.n	8003548 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	4313      	orrs	r3, r2
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f023 0307 	bic.w	r3, r3, #7
 800355e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	2b04      	cmp	r3, #4
 8003570:	d117      	bne.n	80035a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00e      	beq.n	80035a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fa6f 	bl	8003a68 <DMA_CheckFifoParam>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2240      	movs	r2, #64	; 0x40
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800359e:	2301      	movs	r3, #1
 80035a0:	e016      	b.n	80035d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fa26 	bl	80039fc <DMA_CalcBaseAndBitshift>
 80035b0:	4603      	mov	r3, r0
 80035b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b8:	223f      	movs	r2, #63	; 0x3f
 80035ba:	409a      	lsls	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	f010803f 	.word	0xf010803f

080035dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_DMA_Start_IT+0x26>
 80035fe:	2302      	movs	r3, #2
 8003600:	e040      	b.n	8003684 <HAL_DMA_Start_IT+0xa8>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d12f      	bne.n	8003676 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2202      	movs	r2, #2
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f9b8 	bl	80039a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	223f      	movs	r2, #63	; 0x3f
 8003636:	409a      	lsls	r2, r3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0216 	orr.w	r2, r2, #22
 800364a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0208 	orr.w	r2, r2, #8
 8003662:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	e005      	b.n	8003682 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800367e:	2302      	movs	r3, #2
 8003680:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003682:	7dfb      	ldrb	r3, [r7, #23]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003698:	4b8e      	ldr	r3, [pc, #568]	; (80038d4 <HAL_DMA_IRQHandler+0x248>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a8e      	ldr	r2, [pc, #568]	; (80038d8 <HAL_DMA_IRQHandler+0x24c>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	0a9b      	lsrs	r3, r3, #10
 80036a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b6:	2208      	movs	r2, #8
 80036b8:	409a      	lsls	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d01a      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d013      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0204 	bic.w	r2, r2, #4
 80036de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	2208      	movs	r2, #8
 80036e6:	409a      	lsls	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fc:	2201      	movs	r2, #1
 80036fe:	409a      	lsls	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d012      	beq.n	800372e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371a:	2201      	movs	r2, #1
 800371c:	409a      	lsls	r2, r3
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003726:	f043 0202 	orr.w	r2, r3, #2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003732:	2204      	movs	r2, #4
 8003734:	409a      	lsls	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d012      	beq.n	8003764 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00b      	beq.n	8003764 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	2204      	movs	r2, #4
 8003752:	409a      	lsls	r2, r3
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375c:	f043 0204 	orr.w	r2, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	2210      	movs	r2, #16
 800376a:	409a      	lsls	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d043      	beq.n	80037fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d03c      	beq.n	80037fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	2210      	movs	r2, #16
 8003788:	409a      	lsls	r2, r3
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d018      	beq.n	80037ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d108      	bne.n	80037bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d024      	beq.n	80037fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	4798      	blx	r3
 80037ba:	e01f      	b.n	80037fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01b      	beq.n	80037fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
 80037cc:	e016      	b.n	80037fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d107      	bne.n	80037ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0208 	bic.w	r2, r2, #8
 80037ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	2220      	movs	r2, #32
 8003802:	409a      	lsls	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 808f 	beq.w	800392c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8087 	beq.w	800392c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003822:	2220      	movs	r2, #32
 8003824:	409a      	lsls	r2, r3
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b05      	cmp	r3, #5
 8003834:	d136      	bne.n	80038a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0216 	bic.w	r2, r2, #22
 8003844:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003854:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <HAL_DMA_IRQHandler+0x1da>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0208 	bic.w	r2, r2, #8
 8003874:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387a:	223f      	movs	r2, #63	; 0x3f
 800387c:	409a      	lsls	r2, r3
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003896:	2b00      	cmp	r3, #0
 8003898:	d07e      	beq.n	8003998 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
        }
        return;
 80038a2:	e079      	b.n	8003998 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d01d      	beq.n	80038ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10d      	bne.n	80038dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d031      	beq.n	800392c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
 80038d0:	e02c      	b.n	800392c <HAL_DMA_IRQHandler+0x2a0>
 80038d2:	bf00      	nop
 80038d4:	2000008c 	.word	0x2000008c
 80038d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d023      	beq.n	800392c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
 80038ec:	e01e      	b.n	800392c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10f      	bne.n	800391c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0210 	bic.w	r2, r2, #16
 800390a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003930:	2b00      	cmp	r3, #0
 8003932:	d032      	beq.n	800399a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d022      	beq.n	8003986 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2205      	movs	r2, #5
 8003944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	3301      	adds	r3, #1
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	429a      	cmp	r2, r3
 8003962:	d307      	bcc.n	8003974 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f2      	bne.n	8003958 <HAL_DMA_IRQHandler+0x2cc>
 8003972:	e000      	b.n	8003976 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003974:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
 8003996:	e000      	b.n	800399a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003998:	bf00      	nop
    }
  }
}
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d108      	bne.n	80039e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039de:	e007      	b.n	80039f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]
}
 80039f0:	bf00      	nop
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	3b10      	subs	r3, #16
 8003a0c:	4a14      	ldr	r2, [pc, #80]	; (8003a60 <DMA_CalcBaseAndBitshift+0x64>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a16:	4a13      	ldr	r2, [pc, #76]	; (8003a64 <DMA_CalcBaseAndBitshift+0x68>)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d909      	bls.n	8003a3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a32:	f023 0303 	bic.w	r3, r3, #3
 8003a36:	1d1a      	adds	r2, r3, #4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	659a      	str	r2, [r3, #88]	; 0x58
 8003a3c:	e007      	b.n	8003a4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a46:	f023 0303 	bic.w	r3, r3, #3
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	aaaaaaab 	.word	0xaaaaaaab
 8003a64:	0800f3cc 	.word	0x0800f3cc

08003a68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d11f      	bne.n	8003ac2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d856      	bhi.n	8003b36 <DMA_CheckFifoParam+0xce>
 8003a88:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <DMA_CheckFifoParam+0x28>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003aa1 	.word	0x08003aa1
 8003a94:	08003ab3 	.word	0x08003ab3
 8003a98:	08003aa1 	.word	0x08003aa1
 8003a9c:	08003b37 	.word	0x08003b37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d046      	beq.n	8003b3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab0:	e043      	b.n	8003b3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aba:	d140      	bne.n	8003b3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac0:	e03d      	b.n	8003b3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aca:	d121      	bne.n	8003b10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d837      	bhi.n	8003b42 <DMA_CheckFifoParam+0xda>
 8003ad2:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <DMA_CheckFifoParam+0x70>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003ae9 	.word	0x08003ae9
 8003adc:	08003aef 	.word	0x08003aef
 8003ae0:	08003ae9 	.word	0x08003ae9
 8003ae4:	08003b01 	.word	0x08003b01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
      break;
 8003aec:	e030      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d025      	beq.n	8003b46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afe:	e022      	b.n	8003b46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b08:	d11f      	bne.n	8003b4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b0e:	e01c      	b.n	8003b4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d903      	bls.n	8003b1e <DMA_CheckFifoParam+0xb6>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d003      	beq.n	8003b24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b1c:	e018      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	73fb      	strb	r3, [r7, #15]
      break;
 8003b22:	e015      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00e      	beq.n	8003b4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      break;
 8003b34:	e00b      	b.n	8003b4e <DMA_CheckFifoParam+0xe6>
      break;
 8003b36:	bf00      	nop
 8003b38:	e00a      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e008      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e006      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      break;
 8003b42:	bf00      	nop
 8003b44:	e004      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      break;
 8003b46:	bf00      	nop
 8003b48:	e002      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b4a:	bf00      	nop
 8003b4c:	e000      	b.n	8003b50 <DMA_CheckFifoParam+0xe8>
      break;
 8003b4e:	bf00      	nop
    }
  } 
  
  return status; 
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop

08003b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b089      	sub	sp, #36	; 0x24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	e159      	b.n	8003e30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	f040 8148 	bne.w	8003e2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d005      	beq.n	8003bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d130      	bne.n	8003c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be8:	2201      	movs	r2, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 0201 	and.w	r2, r3, #1
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d017      	beq.n	8003c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4013      	ands	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d123      	bne.n	8003ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	08da      	lsrs	r2, r3, #3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3208      	adds	r2, #8
 8003c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	220f      	movs	r2, #15
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	08da      	lsrs	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3208      	adds	r2, #8
 8003c9e:	69b9      	ldr	r1, [r7, #24]
 8003ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	2203      	movs	r2, #3
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0203 	and.w	r2, r3, #3
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80a2 	beq.w	8003e2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	4b57      	ldr	r3, [pc, #348]	; (8003e48 <HAL_GPIO_Init+0x2e8>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	4a56      	ldr	r2, [pc, #344]	; (8003e48 <HAL_GPIO_Init+0x2e8>)
 8003cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cf6:	4b54      	ldr	r3, [pc, #336]	; (8003e48 <HAL_GPIO_Init+0x2e8>)
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d02:	4a52      	ldr	r2, [pc, #328]	; (8003e4c <HAL_GPIO_Init+0x2ec>)
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	089b      	lsrs	r3, r3, #2
 8003d08:	3302      	adds	r3, #2
 8003d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	220f      	movs	r2, #15
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a49      	ldr	r2, [pc, #292]	; (8003e50 <HAL_GPIO_Init+0x2f0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d019      	beq.n	8003d62 <HAL_GPIO_Init+0x202>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a48      	ldr	r2, [pc, #288]	; (8003e54 <HAL_GPIO_Init+0x2f4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <HAL_GPIO_Init+0x1fe>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a47      	ldr	r2, [pc, #284]	; (8003e58 <HAL_GPIO_Init+0x2f8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00d      	beq.n	8003d5a <HAL_GPIO_Init+0x1fa>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a46      	ldr	r2, [pc, #280]	; (8003e5c <HAL_GPIO_Init+0x2fc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <HAL_GPIO_Init+0x1f6>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a45      	ldr	r2, [pc, #276]	; (8003e60 <HAL_GPIO_Init+0x300>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d101      	bne.n	8003d52 <HAL_GPIO_Init+0x1f2>
 8003d4e:	2304      	movs	r3, #4
 8003d50:	e008      	b.n	8003d64 <HAL_GPIO_Init+0x204>
 8003d52:	2307      	movs	r3, #7
 8003d54:	e006      	b.n	8003d64 <HAL_GPIO_Init+0x204>
 8003d56:	2303      	movs	r3, #3
 8003d58:	e004      	b.n	8003d64 <HAL_GPIO_Init+0x204>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e002      	b.n	8003d64 <HAL_GPIO_Init+0x204>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <HAL_GPIO_Init+0x204>
 8003d62:	2300      	movs	r3, #0
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	f002 0203 	and.w	r2, r2, #3
 8003d6a:	0092      	lsls	r2, r2, #2
 8003d6c:	4093      	lsls	r3, r2
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d74:	4935      	ldr	r1, [pc, #212]	; (8003e4c <HAL_GPIO_Init+0x2ec>)
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d82:	4b38      	ldr	r3, [pc, #224]	; (8003e64 <HAL_GPIO_Init+0x304>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003da6:	4a2f      	ldr	r2, [pc, #188]	; (8003e64 <HAL_GPIO_Init+0x304>)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dac:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <HAL_GPIO_Init+0x304>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dd0:	4a24      	ldr	r2, [pc, #144]	; (8003e64 <HAL_GPIO_Init+0x304>)
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dd6:	4b23      	ldr	r3, [pc, #140]	; (8003e64 <HAL_GPIO_Init+0x304>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dfa:	4a1a      	ldr	r2, [pc, #104]	; (8003e64 <HAL_GPIO_Init+0x304>)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e00:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <HAL_GPIO_Init+0x304>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e24:	4a0f      	ldr	r2, [pc, #60]	; (8003e64 <HAL_GPIO_Init+0x304>)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b0f      	cmp	r3, #15
 8003e34:	f67f aea2 	bls.w	8003b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	3724      	adds	r7, #36	; 0x24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	40013800 	.word	0x40013800
 8003e50:	40020000 	.word	0x40020000
 8003e54:	40020400 	.word	0x40020400
 8003e58:	40020800 	.word	0x40020800
 8003e5c:	40020c00 	.word	0x40020c00
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40013c00 	.word	0x40013c00

08003e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	887b      	ldrh	r3, [r7, #2]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
 8003e84:	e001      	b.n	8003e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e86:	2300      	movs	r3, #0
 8003e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ea8:	787b      	ldrb	r3, [r7, #1]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eae:	887a      	ldrh	r2, [r7, #2]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003eb4:	e003      	b.n	8003ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eb6:	887b      	ldrh	r3, [r7, #2]
 8003eb8:	041a      	lsls	r2, r3, #16
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	619a      	str	r2, [r3, #24]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d006      	beq.n	8003ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ee2:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe f9a4 	bl	8002238 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40013c00 	.word	0x40013c00

08003efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e12b      	b.n	8004166 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fe fb26 	bl	8002574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2224      	movs	r2, #36	; 0x24
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f60:	f001 f888 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 8003f64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4a81      	ldr	r2, [pc, #516]	; (8004170 <HAL_I2C_Init+0x274>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d807      	bhi.n	8003f80 <HAL_I2C_Init+0x84>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a80      	ldr	r2, [pc, #512]	; (8004174 <HAL_I2C_Init+0x278>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	bf94      	ite	ls
 8003f78:	2301      	movls	r3, #1
 8003f7a:	2300      	movhi	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	e006      	b.n	8003f8e <HAL_I2C_Init+0x92>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a7d      	ldr	r2, [pc, #500]	; (8004178 <HAL_I2C_Init+0x27c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	bf94      	ite	ls
 8003f88:	2301      	movls	r3, #1
 8003f8a:	2300      	movhi	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0e7      	b.n	8004166 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4a78      	ldr	r2, [pc, #480]	; (800417c <HAL_I2C_Init+0x280>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	0c9b      	lsrs	r3, r3, #18
 8003fa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4a6a      	ldr	r2, [pc, #424]	; (8004170 <HAL_I2C_Init+0x274>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d802      	bhi.n	8003fd0 <HAL_I2C_Init+0xd4>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	e009      	b.n	8003fe4 <HAL_I2C_Init+0xe8>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fd6:	fb02 f303 	mul.w	r3, r2, r3
 8003fda:	4a69      	ldr	r2, [pc, #420]	; (8004180 <HAL_I2C_Init+0x284>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	099b      	lsrs	r3, r3, #6
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ff6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	495c      	ldr	r1, [pc, #368]	; (8004170 <HAL_I2C_Init+0x274>)
 8004000:	428b      	cmp	r3, r1
 8004002:	d819      	bhi.n	8004038 <HAL_I2C_Init+0x13c>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1e59      	subs	r1, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004012:	1c59      	adds	r1, r3, #1
 8004014:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004018:	400b      	ands	r3, r1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_I2C_Init+0x138>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1e59      	subs	r1, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	fbb1 f3f3 	udiv	r3, r1, r3
 800402c:	3301      	adds	r3, #1
 800402e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004032:	e051      	b.n	80040d8 <HAL_I2C_Init+0x1dc>
 8004034:	2304      	movs	r3, #4
 8004036:	e04f      	b.n	80040d8 <HAL_I2C_Init+0x1dc>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d111      	bne.n	8004064 <HAL_I2C_Init+0x168>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1e58      	subs	r0, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	440b      	add	r3, r1
 800404e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004052:	3301      	adds	r3, #1
 8004054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e012      	b.n	800408a <HAL_I2C_Init+0x18e>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1e58      	subs	r0, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	0099      	lsls	r1, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	fbb0 f3f3 	udiv	r3, r0, r3
 800407a:	3301      	adds	r3, #1
 800407c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Init+0x196>
 800408e:	2301      	movs	r3, #1
 8004090:	e022      	b.n	80040d8 <HAL_I2C_Init+0x1dc>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10e      	bne.n	80040b8 <HAL_I2C_Init+0x1bc>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1e58      	subs	r0, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	440b      	add	r3, r1
 80040a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ac:	3301      	adds	r3, #1
 80040ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b6:	e00f      	b.n	80040d8 <HAL_I2C_Init+0x1dc>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1e58      	subs	r0, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6859      	ldr	r1, [r3, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	0099      	lsls	r1, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ce:	3301      	adds	r3, #1
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	6809      	ldr	r1, [r1, #0]
 80040dc:	4313      	orrs	r3, r2
 80040de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6911      	ldr	r1, [r2, #16]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68d2      	ldr	r2, [r2, #12]
 8004112:	4311      	orrs	r1, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	430b      	orrs	r3, r1
 800411a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	000186a0 	.word	0x000186a0
 8004174:	001e847f 	.word	0x001e847f
 8004178:	003d08ff 	.word	0x003d08ff
 800417c:	431bde83 	.word	0x431bde83
 8004180:	10624dd3 	.word	0x10624dd3

08004184 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	461a      	mov	r2, r3
 8004190:	460b      	mov	r3, r1
 8004192:	817b      	strh	r3, [r7, #10]
 8004194:	4613      	mov	r3, r2
 8004196:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004198:	f7fe fc72 	bl	8002a80 <HAL_GetTick>
 800419c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	f040 80e0 	bne.w	800436c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2319      	movs	r3, #25
 80041b2:	2201      	movs	r2, #1
 80041b4:	4970      	ldr	r1, [pc, #448]	; (8004378 <HAL_I2C_Master_Transmit+0x1f4>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f964 	bl	8004484 <I2C_WaitOnFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041c2:	2302      	movs	r3, #2
 80041c4:	e0d3      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_I2C_Master_Transmit+0x50>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e0cc      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ea>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d007      	beq.n	80041fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0201 	orr.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004208:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2221      	movs	r2, #33	; 0x21
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2210      	movs	r2, #16
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	893a      	ldrh	r2, [r7, #8]
 800422a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4a50      	ldr	r2, [pc, #320]	; (800437c <HAL_I2C_Master_Transmit+0x1f8>)
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800423c:	8979      	ldrh	r1, [r7, #10]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f89c 	bl	8004380 <I2C_MasterRequestWrite>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e08d      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004268:	e066      	b.n	8004338 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	6a39      	ldr	r1, [r7, #32]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f9de 	bl	8004630 <I2C_WaitOnTXEFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00d      	beq.n	8004296 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	2b04      	cmp	r3, #4
 8004280:	d107      	bne.n	8004292 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004290:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e06b      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	781a      	ldrb	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d11b      	bne.n	800430c <HAL_I2C_Master_Transmit+0x188>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d017      	beq.n	800430c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	6a39      	ldr	r1, [r7, #32]
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f9ce 	bl	80046b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00d      	beq.n	8004338 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	2b04      	cmp	r3, #4
 8004322:	d107      	bne.n	8004334 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004332:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e01a      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433c:	2b00      	cmp	r3, #0
 800433e:	d194      	bne.n	800426a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e000      	b.n	800436e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
  }
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	00100002 	.word	0x00100002
 800437c:	ffff0000 	.word	0xffff0000

08004380 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	460b      	mov	r3, r1
 800438e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b08      	cmp	r3, #8
 800439a:	d006      	beq.n	80043aa <I2C_MasterRequestWrite+0x2a>
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d003      	beq.n	80043aa <I2C_MasterRequestWrite+0x2a>
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043a8:	d108      	bne.n	80043bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	e00b      	b.n	80043d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	2b12      	cmp	r3, #18
 80043c2:	d107      	bne.n	80043d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 f84f 	bl	8004484 <I2C_WaitOnFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00d      	beq.n	8004408 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fa:	d103      	bne.n	8004404 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e035      	b.n	8004474 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004410:	d108      	bne.n	8004424 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004412:	897b      	ldrh	r3, [r7, #10]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	461a      	mov	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004420:	611a      	str	r2, [r3, #16]
 8004422:	e01b      	b.n	800445c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004424:	897b      	ldrh	r3, [r7, #10]
 8004426:	11db      	asrs	r3, r3, #7
 8004428:	b2db      	uxtb	r3, r3
 800442a:	f003 0306 	and.w	r3, r3, #6
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f063 030f 	orn	r3, r3, #15
 8004434:	b2da      	uxtb	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	490e      	ldr	r1, [pc, #56]	; (800447c <I2C_MasterRequestWrite+0xfc>)
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f875 	bl	8004532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e010      	b.n	8004474 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004452:	897b      	ldrh	r3, [r7, #10]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	4907      	ldr	r1, [pc, #28]	; (8004480 <I2C_MasterRequestWrite+0x100>)
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f865 	bl	8004532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	00010008 	.word	0x00010008
 8004480:	00010002 	.word	0x00010002

08004484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004494:	e025      	b.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800449c:	d021      	beq.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449e:	f7fe faef 	bl	8002a80 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d302      	bcc.n	80044b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d116      	bne.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f043 0220 	orr.w	r2, r3, #32
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e023      	b.n	800452a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d10d      	bne.n	8004508 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	43da      	mvns	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	e00c      	b.n	8004522 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	43da      	mvns	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	79fb      	ldrb	r3, [r7, #7]
 8004524:	429a      	cmp	r2, r3
 8004526:	d0b6      	beq.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004540:	e051      	b.n	80045e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800454c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004550:	d123      	bne.n	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004560:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800456a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	f043 0204 	orr.w	r2, r3, #4
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e046      	b.n	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a0:	d021      	beq.n	80045e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a2:	f7fe fa6d 	bl	8002a80 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d302      	bcc.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d116      	bne.n	80045e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f043 0220 	orr.w	r2, r3, #32
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e020      	b.n	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	0c1b      	lsrs	r3, r3, #16
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d10c      	bne.n	800460a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	43da      	mvns	r2, r3
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4013      	ands	r3, r2
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	bf14      	ite	ne
 8004602:	2301      	movne	r3, #1
 8004604:	2300      	moveq	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	e00b      	b.n	8004622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	43da      	mvns	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4013      	ands	r3, r2
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d18d      	bne.n	8004542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800463c:	e02d      	b.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f878 	bl	8004734 <I2C_IsAcknowledgeFailed>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e02d      	b.n	80046aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004654:	d021      	beq.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004656:	f7fe fa13 	bl	8002a80 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	429a      	cmp	r2, r3
 8004664:	d302      	bcc.n	800466c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d116      	bne.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f043 0220 	orr.w	r2, r3, #32
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e007      	b.n	80046aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a4:	2b80      	cmp	r3, #128	; 0x80
 80046a6:	d1ca      	bne.n	800463e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046be:	e02d      	b.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f837 	bl	8004734 <I2C_IsAcknowledgeFailed>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e02d      	b.n	800472c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046d6:	d021      	beq.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d8:	f7fe f9d2 	bl	8002a80 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d302      	bcc.n	80046ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d116      	bne.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f043 0220 	orr.w	r2, r3, #32
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e007      	b.n	800472c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b04      	cmp	r3, #4
 8004728:	d1ca      	bne.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474a:	d11b      	bne.n	8004784 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004754:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	f043 0204 	orr.w	r2, r3, #4
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e267      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d075      	beq.n	800489e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b2:	4b88      	ldr	r3, [pc, #544]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d00c      	beq.n	80047d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047be:	4b85      	ldr	r3, [pc, #532]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d112      	bne.n	80047f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ca:	4b82      	ldr	r3, [pc, #520]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d6:	d10b      	bne.n	80047f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d8:	4b7e      	ldr	r3, [pc, #504]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d05b      	beq.n	800489c <HAL_RCC_OscConfig+0x108>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d157      	bne.n	800489c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e242      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f8:	d106      	bne.n	8004808 <HAL_RCC_OscConfig+0x74>
 80047fa:	4b76      	ldr	r3, [pc, #472]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a75      	ldr	r2, [pc, #468]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e01d      	b.n	8004844 <HAL_RCC_OscConfig+0xb0>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004810:	d10c      	bne.n	800482c <HAL_RCC_OscConfig+0x98>
 8004812:	4b70      	ldr	r3, [pc, #448]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a6f      	ldr	r2, [pc, #444]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4b6d      	ldr	r3, [pc, #436]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6c      	ldr	r2, [pc, #432]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e00b      	b.n	8004844 <HAL_RCC_OscConfig+0xb0>
 800482c:	4b69      	ldr	r3, [pc, #420]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a68      	ldr	r2, [pc, #416]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	4b66      	ldr	r3, [pc, #408]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a65      	ldr	r2, [pc, #404]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 800483e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d013      	beq.n	8004874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fe f918 	bl	8002a80 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004854:	f7fe f914 	bl	8002a80 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	; 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e207      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	4b5b      	ldr	r3, [pc, #364]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0xc0>
 8004872:	e014      	b.n	800489e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004874:	f7fe f904 	bl	8002a80 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800487c:	f7fe f900 	bl	8002a80 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	; 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e1f3      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488e:	4b51      	ldr	r3, [pc, #324]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0xe8>
 800489a:	e000      	b.n	800489e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d063      	beq.n	8004972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048aa:	4b4a      	ldr	r3, [pc, #296]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b6:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d11c      	bne.n	80048fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048c2:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d116      	bne.n	80048fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ce:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <HAL_RCC_OscConfig+0x152>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d001      	beq.n	80048e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e1c7      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e6:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4937      	ldr	r1, [pc, #220]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048fa:	e03a      	b.n	8004972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d020      	beq.n	8004946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004904:	4b34      	ldr	r3, [pc, #208]	; (80049d8 <HAL_RCC_OscConfig+0x244>)
 8004906:	2201      	movs	r2, #1
 8004908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fe f8b9 	bl	8002a80 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004912:	f7fe f8b5 	bl	8002a80 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e1a8      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004924:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004930:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	4925      	ldr	r1, [pc, #148]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004940:	4313      	orrs	r3, r2
 8004942:	600b      	str	r3, [r1, #0]
 8004944:	e015      	b.n	8004972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <HAL_RCC_OscConfig+0x244>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fe f898 	bl	8002a80 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004954:	f7fe f894 	bl	8002a80 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e187      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004966:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d036      	beq.n	80049ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d016      	beq.n	80049b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <HAL_RCC_OscConfig+0x248>)
 8004988:	2201      	movs	r2, #1
 800498a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498c:	f7fe f878 	bl	8002a80 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004994:	f7fe f874 	bl	8002a80 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e167      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_OscConfig+0x240>)
 80049a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0x200>
 80049b2:	e01b      	b.n	80049ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_RCC_OscConfig+0x248>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ba:	f7fe f861 	bl	8002a80 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c0:	e00e      	b.n	80049e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c2:	f7fe f85d 	bl	8002a80 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d907      	bls.n	80049e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e150      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
 80049d4:	40023800 	.word	0x40023800
 80049d8:	42470000 	.word	0x42470000
 80049dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e0:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 80049e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1ea      	bne.n	80049c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8097 	beq.w	8004b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fe:	4b81      	ldr	r3, [pc, #516]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10f      	bne.n	8004a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60bb      	str	r3, [r7, #8]
 8004a0e:	4b7d      	ldr	r3, [pc, #500]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	4a7c      	ldr	r2, [pc, #496]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1a:	4b7a      	ldr	r3, [pc, #488]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2a:	4b77      	ldr	r3, [pc, #476]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d118      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a36:	4b74      	ldr	r3, [pc, #464]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a73      	ldr	r2, [pc, #460]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a42:	f7fe f81d 	bl	8002a80 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4a:	f7fe f819 	bl	8002a80 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e10c      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5c:	4b6a      	ldr	r3, [pc, #424]	; (8004c08 <HAL_RCC_OscConfig+0x474>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d106      	bne.n	8004a7e <HAL_RCC_OscConfig+0x2ea>
 8004a70:	4b64      	ldr	r3, [pc, #400]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	4a63      	ldr	r2, [pc, #396]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a76:	f043 0301 	orr.w	r3, r3, #1
 8004a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7c:	e01c      	b.n	8004ab8 <HAL_RCC_OscConfig+0x324>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b05      	cmp	r3, #5
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x30c>
 8004a86:	4b5f      	ldr	r3, [pc, #380]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	4a5e      	ldr	r2, [pc, #376]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	6713      	str	r3, [r2, #112]	; 0x70
 8004a92:	4b5c      	ldr	r3, [pc, #368]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a5b      	ldr	r2, [pc, #364]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9e:	e00b      	b.n	8004ab8 <HAL_RCC_OscConfig+0x324>
 8004aa0:	4b58      	ldr	r3, [pc, #352]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa4:	4a57      	ldr	r2, [pc, #348]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8004aac:	4b55      	ldr	r3, [pc, #340]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	4a54      	ldr	r2, [pc, #336]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004ab2:	f023 0304 	bic.w	r3, r3, #4
 8004ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d015      	beq.n	8004aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fd ffde 	bl	8002a80 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac8:	f7fd ffda 	bl	8002a80 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e0cb      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ade:	4b49      	ldr	r3, [pc, #292]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0ee      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x334>
 8004aea:	e014      	b.n	8004b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aec:	f7fd ffc8 	bl	8002a80 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af2:	e00a      	b.n	8004b0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af4:	f7fd ffc4 	bl	8002a80 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e0b5      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0a:	4b3e      	ldr	r3, [pc, #248]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1ee      	bne.n	8004af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d105      	bne.n	8004b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1c:	4b39      	ldr	r3, [pc, #228]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	4a38      	ldr	r2, [pc, #224]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80a1 	beq.w	8004c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b32:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d05c      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d141      	bne.n	8004bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b46:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fd ff98 	bl	8002a80 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fd ff94 	bl	8002a80 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e087      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	019b      	lsls	r3, r3, #6
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	491b      	ldr	r1, [pc, #108]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba2:	f7fd ff6d 	bl	8002a80 <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004baa:	f7fd ff69 	bl	8002a80 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e05c      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x416>
 8004bc8:	e054      	b.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <HAL_RCC_OscConfig+0x478>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fd ff56 	bl	8002a80 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd8:	f7fd ff52 	bl	8002a80 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e045      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <HAL_RCC_OscConfig+0x470>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x444>
 8004bf6:	e03d      	b.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d107      	bne.n	8004c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e038      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
 8004c04:	40023800 	.word	0x40023800
 8004c08:	40007000 	.word	0x40007000
 8004c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c10:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <HAL_RCC_OscConfig+0x4ec>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d028      	beq.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d121      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d11a      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d111      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800

08004c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0cc      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c98:	4b68      	ldr	r3, [pc, #416]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d90c      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b65      	ldr	r3, [pc, #404]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b63      	ldr	r3, [pc, #396]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0b8      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d020      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cd8:	4b59      	ldr	r3, [pc, #356]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a58      	ldr	r2, [pc, #352]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cf0:	4b53      	ldr	r3, [pc, #332]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	4a52      	ldr	r2, [pc, #328]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cfc:	4b50      	ldr	r3, [pc, #320]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	494d      	ldr	r1, [pc, #308]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d044      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d107      	bne.n	8004d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	4b47      	ldr	r3, [pc, #284]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d119      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e07f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d003      	beq.n	8004d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d107      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d42:	4b3f      	ldr	r3, [pc, #252]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e06f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d52:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e067      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d62:	4b37      	ldr	r3, [pc, #220]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f023 0203 	bic.w	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4934      	ldr	r1, [pc, #208]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d74:	f7fd fe84 	bl	8002a80 <HAL_GetTick>
 8004d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7c:	f7fd fe80 	bl	8002a80 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e04f      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d92:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 020c 	and.w	r2, r3, #12
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d1eb      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da4:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d20c      	bcs.n	8004dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4b22      	ldr	r3, [pc, #136]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dba:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e032      	b.n	8004e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dd8:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	4916      	ldr	r1, [pc, #88]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004df6:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	490e      	ldr	r1, [pc, #56]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e0a:	f000 f821 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	490a      	ldr	r1, [pc, #40]	; (8004e44 <HAL_RCC_ClockConfig+0x1c0>)
 8004e1c:	5ccb      	ldrb	r3, [r1, r3]
 8004e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e22:	4a09      	ldr	r2, [pc, #36]	; (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e26:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fd fcec 	bl	8002808 <HAL_InitTick>

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023c00 	.word	0x40023c00
 8004e40:	40023800 	.word	0x40023800
 8004e44:	0800f3b4 	.word	0x0800f3b4
 8004e48:	2000008c 	.word	0x2000008c
 8004e4c:	20000090 	.word	0x20000090

08004e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e54:	b094      	sub	sp, #80	; 0x50
 8004e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e60:	2300      	movs	r3, #0
 8004e62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e68:	4b79      	ldr	r3, [pc, #484]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d00d      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x40>
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	f200 80e1 	bhi.w	800503c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x34>
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d003      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e82:	e0db      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e84:	4b73      	ldr	r3, [pc, #460]	; (8005054 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004e88:	e0db      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e8a:	4b73      	ldr	r3, [pc, #460]	; (8005058 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e8e:	e0d8      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e90:	4b6f      	ldr	r3, [pc, #444]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e9a:	4b6d      	ldr	r3, [pc, #436]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d063      	beq.n	8004f6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ea6:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	099b      	lsrs	r3, r3, #6
 8004eac:	2200      	movs	r2, #0
 8004eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eba:	2300      	movs	r3, #0
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ebe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	f04f 0000 	mov.w	r0, #0
 8004eca:	f04f 0100 	mov.w	r1, #0
 8004ece:	0159      	lsls	r1, r3, #5
 8004ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ed4:	0150      	lsls	r0, r2, #5
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4621      	mov	r1, r4
 8004edc:	1a51      	subs	r1, r2, r1
 8004ede:	6139      	str	r1, [r7, #16]
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	018b      	lsls	r3, r1, #6
 8004ef8:	4651      	mov	r1, sl
 8004efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004efe:	4651      	mov	r1, sl
 8004f00:	018a      	lsls	r2, r1, #6
 8004f02:	4651      	mov	r1, sl
 8004f04:	ebb2 0801 	subs.w	r8, r2, r1
 8004f08:	4659      	mov	r1, fp
 8004f0a:	eb63 0901 	sbc.w	r9, r3, r1
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f22:	4690      	mov	r8, r2
 8004f24:	4699      	mov	r9, r3
 8004f26:	4623      	mov	r3, r4
 8004f28:	eb18 0303 	adds.w	r3, r8, r3
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	462b      	mov	r3, r5
 8004f30:	eb49 0303 	adc.w	r3, r9, r3
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f42:	4629      	mov	r1, r5
 8004f44:	024b      	lsls	r3, r1, #9
 8004f46:	4621      	mov	r1, r4
 8004f48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	024a      	lsls	r2, r1, #9
 8004f50:	4610      	mov	r0, r2
 8004f52:	4619      	mov	r1, r3
 8004f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f56:	2200      	movs	r2, #0
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f60:	f7fb fcf4 	bl	800094c <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4613      	mov	r3, r2
 8004f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f6c:	e058      	b.n	8005020 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f6e:	4b38      	ldr	r3, [pc, #224]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	099b      	lsrs	r3, r3, #6
 8004f74:	2200      	movs	r2, #0
 8004f76:	4618      	mov	r0, r3
 8004f78:	4611      	mov	r1, r2
 8004f7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f7e:	623b      	str	r3, [r7, #32]
 8004f80:	2300      	movs	r3, #0
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
 8004f84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	f04f 0000 	mov.w	r0, #0
 8004f90:	f04f 0100 	mov.w	r1, #0
 8004f94:	0159      	lsls	r1, r3, #5
 8004f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f9a:	0150      	lsls	r0, r2, #5
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fc0:	ebb2 040a 	subs.w	r4, r2, sl
 8004fc4:	eb63 050b 	sbc.w	r5, r3, fp
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	00eb      	lsls	r3, r5, #3
 8004fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fd6:	00e2      	lsls	r2, r4, #3
 8004fd8:	4614      	mov	r4, r2
 8004fda:	461d      	mov	r5, r3
 8004fdc:	4643      	mov	r3, r8
 8004fde:	18e3      	adds	r3, r4, r3
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	eb45 0303 	adc.w	r3, r5, r3
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	028b      	lsls	r3, r1, #10
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005000:	4621      	mov	r1, r4
 8005002:	028a      	lsls	r2, r1, #10
 8005004:	4610      	mov	r0, r2
 8005006:	4619      	mov	r1, r3
 8005008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500a:	2200      	movs	r2, #0
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	61fa      	str	r2, [r7, #28]
 8005010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005014:	f7fb fc9a 	bl	800094c <__aeabi_uldivmod>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4613      	mov	r3, r2
 800501e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005020:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <HAL_RCC_GetSysClockFreq+0x200>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	0c1b      	lsrs	r3, r3, #16
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	3301      	adds	r3, #1
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800503a:	e002      	b.n	8005042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_RCC_GetSysClockFreq+0x204>)
 800503e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005044:	4618      	mov	r0, r3
 8005046:	3750      	adds	r7, #80	; 0x50
 8005048:	46bd      	mov	sp, r7
 800504a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800
 8005054:	00f42400 	.word	0x00f42400
 8005058:	007a1200 	.word	0x007a1200

0800505c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005060:	4b03      	ldr	r3, [pc, #12]	; (8005070 <HAL_RCC_GetHCLKFreq+0x14>)
 8005062:	681b      	ldr	r3, [r3, #0]
}
 8005064:	4618      	mov	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	2000008c 	.word	0x2000008c

08005074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005078:	f7ff fff0 	bl	800505c <HAL_RCC_GetHCLKFreq>
 800507c:	4602      	mov	r2, r0
 800507e:	4b05      	ldr	r3, [pc, #20]	; (8005094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	0a9b      	lsrs	r3, r3, #10
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	4903      	ldr	r1, [pc, #12]	; (8005098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800508a:	5ccb      	ldrb	r3, [r1, r3]
 800508c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005090:	4618      	mov	r0, r3
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40023800 	.word	0x40023800
 8005098:	0800f3c4 	.word	0x0800f3c4

0800509c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050a0:	f7ff ffdc 	bl	800505c <HAL_RCC_GetHCLKFreq>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	0b5b      	lsrs	r3, r3, #13
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	4903      	ldr	r1, [pc, #12]	; (80050c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050b2:	5ccb      	ldrb	r3, [r1, r3]
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40023800 	.word	0x40023800
 80050c0:	0800f3c4 	.word	0x0800f3c4

080050c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	220f      	movs	r2, #15
 80050d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050d4:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_RCC_GetClockConfig+0x5c>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 0203 	and.w	r2, r3, #3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050e0:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <HAL_RCC_GetClockConfig+0x5c>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050ec:	4b0c      	ldr	r3, [pc, #48]	; (8005120 <HAL_RCC_GetClockConfig+0x5c>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80050f8:	4b09      	ldr	r3, [pc, #36]	; (8005120 <HAL_RCC_GetClockConfig+0x5c>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	08db      	lsrs	r3, r3, #3
 80050fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005106:	4b07      	ldr	r3, [pc, #28]	; (8005124 <HAL_RCC_GetClockConfig+0x60>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0207 	and.w	r2, r3, #7
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	601a      	str	r2, [r3, #0]
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40023800 	.word	0x40023800
 8005124:	40023c00 	.word	0x40023c00

08005128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e07b      	b.n	8005232 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	2b00      	cmp	r3, #0
 8005140:	d108      	bne.n	8005154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800514a:	d009      	beq.n	8005160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	61da      	str	r2, [r3, #28]
 8005152:	e005      	b.n	8005160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fd fa42 	bl	8002604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005196:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	ea42 0103 	orr.w	r1, r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	f003 0104 	and.w	r1, r3, #4
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	f003 0210 	and.w	r2, r3, #16
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b088      	sub	sp, #32
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	603b      	str	r3, [r7, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_SPI_Transmit+0x22>
 8005258:	2302      	movs	r3, #2
 800525a:	e126      	b.n	80054aa <HAL_SPI_Transmit+0x270>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005264:	f7fd fc0c 	bl	8002a80 <HAL_GetTick>
 8005268:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b01      	cmp	r3, #1
 8005278:	d002      	beq.n	8005280 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800527a:	2302      	movs	r3, #2
 800527c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800527e:	e10b      	b.n	8005498 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_SPI_Transmit+0x52>
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005290:	e102      	b.n	8005498 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2203      	movs	r2, #3
 8005296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	88fa      	ldrh	r2, [r7, #6]
 80052aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d8:	d10f      	bne.n	80052fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005304:	2b40      	cmp	r3, #64	; 0x40
 8005306:	d007      	beq.n	8005318 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005316:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005320:	d14b      	bne.n	80053ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_SPI_Transmit+0xf6>
 800532a:	8afb      	ldrh	r3, [r7, #22]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d13e      	bne.n	80053ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	881a      	ldrh	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	1c9a      	adds	r2, r3, #2
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005354:	e02b      	b.n	80053ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b02      	cmp	r3, #2
 8005362:	d112      	bne.n	800538a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	881a      	ldrh	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005374:	1c9a      	adds	r2, r3, #2
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	86da      	strh	r2, [r3, #54]	; 0x36
 8005388:	e011      	b.n	80053ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800538a:	f7fd fb79 	bl	8002a80 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d803      	bhi.n	80053a2 <HAL_SPI_Transmit+0x168>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a0:	d102      	bne.n	80053a8 <HAL_SPI_Transmit+0x16e>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053ac:	e074      	b.n	8005498 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1ce      	bne.n	8005356 <HAL_SPI_Transmit+0x11c>
 80053b8:	e04c      	b.n	8005454 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_SPI_Transmit+0x18e>
 80053c2:	8afb      	ldrh	r3, [r7, #22]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d140      	bne.n	800544a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	330c      	adds	r3, #12
 80053d2:	7812      	ldrb	r2, [r2, #0]
 80053d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053ee:	e02c      	b.n	800544a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d113      	bne.n	8005426 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330c      	adds	r3, #12
 8005408:	7812      	ldrb	r2, [r2, #0]
 800540a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	86da      	strh	r2, [r3, #54]	; 0x36
 8005424:	e011      	b.n	800544a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005426:	f7fd fb2b 	bl	8002a80 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d803      	bhi.n	800543e <HAL_SPI_Transmit+0x204>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800543c:	d102      	bne.n	8005444 <HAL_SPI_Transmit+0x20a>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005448:	e026      	b.n	8005498 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1cd      	bne.n	80053f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 fa63 	bl	8005924 <SPI_EndRxTxTransaction>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	77fb      	strb	r3, [r7, #31]
 8005494:	e000      	b.n	8005498 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005496:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3720      	adds	r7, #32
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b08c      	sub	sp, #48	; 0x30
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054c0:	2301      	movs	r3, #1
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_SPI_TransmitReceive+0x26>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e18a      	b.n	80057ee <HAL_SPI_TransmitReceive+0x33c>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e0:	f7fd face 	bl	8002a80 <HAL_GetTick>
 80054e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054f6:	887b      	ldrh	r3, [r7, #2]
 80054f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d00f      	beq.n	8005522 <HAL_SPI_TransmitReceive+0x70>
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005508:	d107      	bne.n	800551a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d103      	bne.n	800551a <HAL_SPI_TransmitReceive+0x68>
 8005512:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005516:	2b04      	cmp	r3, #4
 8005518:	d003      	beq.n	8005522 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800551a:	2302      	movs	r3, #2
 800551c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005520:	e15b      	b.n	80057da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_SPI_TransmitReceive+0x82>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <HAL_SPI_TransmitReceive+0x82>
 800552e:	887b      	ldrh	r3, [r7, #2]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d103      	bne.n	800553c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800553a:	e14e      	b.n	80057da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b04      	cmp	r3, #4
 8005546:	d003      	beq.n	8005550 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2205      	movs	r2, #5
 800554c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	887a      	ldrh	r2, [r7, #2]
 8005560:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	887a      	ldrh	r2, [r7, #2]
 8005566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	887a      	ldrh	r2, [r7, #2]
 8005572:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	887a      	ldrh	r2, [r7, #2]
 8005578:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d007      	beq.n	80055a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ac:	d178      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_SPI_TransmitReceive+0x10a>
 80055b6:	8b7b      	ldrh	r3, [r7, #26]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d166      	bne.n	800568a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	881a      	ldrh	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	1c9a      	adds	r2, r3, #2
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055e0:	e053      	b.n	800568a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d11b      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x176>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d016      	beq.n	8005628 <HAL_SPI_TransmitReceive+0x176>
 80055fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d113      	bne.n	8005628 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	881a      	ldrh	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	1c9a      	adds	r2, r3, #2
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b01      	cmp	r3, #1
 8005634:	d119      	bne.n	800566a <HAL_SPI_TransmitReceive+0x1b8>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563a:	b29b      	uxth	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d014      	beq.n	800566a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	b292      	uxth	r2, r2
 800564c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	1c9a      	adds	r2, r3, #2
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005666:	2301      	movs	r3, #1
 8005668:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800566a:	f7fd fa09 	bl	8002a80 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005676:	429a      	cmp	r2, r3
 8005678:	d807      	bhi.n	800568a <HAL_SPI_TransmitReceive+0x1d8>
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005680:	d003      	beq.n	800568a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005688:	e0a7      	b.n	80057da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1a6      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x130>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1a1      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x130>
 800569e:	e07c      	b.n	800579a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <HAL_SPI_TransmitReceive+0x1fc>
 80056a8:	8b7b      	ldrh	r3, [r7, #26]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d16b      	bne.n	8005786 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	330c      	adds	r3, #12
 80056b8:	7812      	ldrb	r2, [r2, #0]
 80056ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d4:	e057      	b.n	8005786 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d11c      	bne.n	800571e <HAL_SPI_TransmitReceive+0x26c>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d017      	beq.n	800571e <HAL_SPI_TransmitReceive+0x26c>
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d114      	bne.n	800571e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	330c      	adds	r3, #12
 80056fe:	7812      	ldrb	r2, [r2, #0]
 8005700:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b01      	cmp	r3, #1
 800572a:	d119      	bne.n	8005760 <HAL_SPI_TransmitReceive+0x2ae>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d014      	beq.n	8005760 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005752:	b29b      	uxth	r3, r3
 8005754:	3b01      	subs	r3, #1
 8005756:	b29a      	uxth	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800575c:	2301      	movs	r3, #1
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005760:	f7fd f98e 	bl	8002a80 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800576c:	429a      	cmp	r2, r3
 800576e:	d803      	bhi.n	8005778 <HAL_SPI_TransmitReceive+0x2c6>
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005776:	d102      	bne.n	800577e <HAL_SPI_TransmitReceive+0x2cc>
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	2b00      	cmp	r3, #0
 800577c:	d103      	bne.n	8005786 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005784:	e029      	b.n	80057da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1a2      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x224>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d19d      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800579a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 f8c0 	bl	8005924 <SPI_EndRxTxTransaction>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d006      	beq.n	80057b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2220      	movs	r2, #32
 80057b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80057b6:	e010      	b.n	80057da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057c0:	2300      	movs	r3, #0
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	e000      	b.n	80057da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80057d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3730      	adds	r7, #48	; 0x30
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005804:	b2db      	uxtb	r3, r3
}
 8005806:	4618      	mov	r0, r3
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	603b      	str	r3, [r7, #0]
 8005820:	4613      	mov	r3, r2
 8005822:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005824:	f7fd f92c 	bl	8002a80 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	1a9b      	subs	r3, r3, r2
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	4413      	add	r3, r2
 8005832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005834:	f7fd f924 	bl	8002a80 <HAL_GetTick>
 8005838:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800583a:	4b39      	ldr	r3, [pc, #228]	; (8005920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	015b      	lsls	r3, r3, #5
 8005840:	0d1b      	lsrs	r3, r3, #20
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	fb02 f303 	mul.w	r3, r2, r3
 8005848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800584a:	e054      	b.n	80058f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005852:	d050      	beq.n	80058f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005854:	f7fd f914 	bl	8002a80 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	429a      	cmp	r2, r3
 8005862:	d902      	bls.n	800586a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d13d      	bne.n	80058e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005882:	d111      	bne.n	80058a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800588c:	d004      	beq.n	8005898 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005896:	d107      	bne.n	80058a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b0:	d10f      	bne.n	80058d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e017      	b.n	8005916 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4013      	ands	r3, r2
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	429a      	cmp	r2, r3
 8005904:	bf0c      	ite	eq
 8005906:	2301      	moveq	r3, #1
 8005908:	2300      	movne	r3, #0
 800590a:	b2db      	uxtb	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	429a      	cmp	r2, r3
 8005912:	d19b      	bne.n	800584c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3720      	adds	r7, #32
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	2000008c 	.word	0x2000008c

08005924 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af02      	add	r7, sp, #8
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005930:	4b1b      	ldr	r3, [pc, #108]	; (80059a0 <SPI_EndRxTxTransaction+0x7c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <SPI_EndRxTxTransaction+0x80>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	0d5b      	lsrs	r3, r3, #21
 800593c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005940:	fb02 f303 	mul.w	r3, r2, r3
 8005944:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800594e:	d112      	bne.n	8005976 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2200      	movs	r2, #0
 8005958:	2180      	movs	r1, #128	; 0x80
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f7ff ff5a 	bl	8005814 <SPI_WaitFlagStateUntilTimeout>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d016      	beq.n	8005994 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596a:	f043 0220 	orr.w	r2, r3, #32
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e00f      	b.n	8005996 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	3b01      	subs	r3, #1
 8005980:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598c:	2b80      	cmp	r3, #128	; 0x80
 800598e:	d0f2      	beq.n	8005976 <SPI_EndRxTxTransaction+0x52>
 8005990:	e000      	b.n	8005994 <SPI_EndRxTxTransaction+0x70>
        break;
 8005992:	bf00      	nop
  }

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	2000008c 	.word	0x2000008c
 80059a4:	165e9f81 	.word	0x165e9f81

080059a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e041      	b.n	8005a3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fc fe80 	bl	80026d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3304      	adds	r3, #4
 80059e4:	4619      	mov	r1, r3
 80059e6:	4610      	mov	r0, r2
 80059e8:	f000 fae2 	bl	8005fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d001      	beq.n	8005a60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e03c      	b.n	8005ada <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ae8 <HAL_TIM_Base_Start+0xa0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d018      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x5c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7a:	d013      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x5c>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1a      	ldr	r2, [pc, #104]	; (8005aec <HAL_TIM_Base_Start+0xa4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00e      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x5c>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a19      	ldr	r2, [pc, #100]	; (8005af0 <HAL_TIM_Base_Start+0xa8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d009      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x5c>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a17      	ldr	r2, [pc, #92]	; (8005af4 <HAL_TIM_Base_Start+0xac>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x5c>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a16      	ldr	r2, [pc, #88]	; (8005af8 <HAL_TIM_Base_Start+0xb0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d111      	bne.n	8005ac8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b06      	cmp	r3, #6
 8005ab4:	d010      	beq.n	8005ad8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac6:	e007      	b.n	8005ad8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40010000 	.word	0x40010000
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40000800 	.word	0x40000800
 8005af4:	40000c00 	.word	0x40000c00
 8005af8:	40014000 	.word	0x40014000

08005afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d001      	beq.n	8005b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e044      	b.n	8005b9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1e      	ldr	r2, [pc, #120]	; (8005bac <HAL_TIM_Base_Start_IT+0xb0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d018      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x6c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3e:	d013      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x6c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1a      	ldr	r2, [pc, #104]	; (8005bb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00e      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x6c>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a19      	ldr	r2, [pc, #100]	; (8005bb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d009      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x6c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a17      	ldr	r2, [pc, #92]	; (8005bb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x6c>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a16      	ldr	r2, [pc, #88]	; (8005bbc <HAL_TIM_Base_Start_IT+0xc0>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d111      	bne.n	8005b8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b06      	cmp	r3, #6
 8005b78:	d010      	beq.n	8005b9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0201 	orr.w	r2, r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8a:	e007      	b.n	8005b9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40010000 	.word	0x40010000
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	40000800 	.word	0x40000800
 8005bb8:	40000c00 	.word	0x40000c00
 8005bbc:	40014000 	.word	0x40014000

08005bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d122      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d11b      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0202 	mvn.w	r2, #2
 8005bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f9b5 	bl	8005f72 <HAL_TIM_IC_CaptureCallback>
 8005c08:	e005      	b.n	8005c16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f9a7 	bl	8005f5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f9b8 	bl	8005f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d122      	bne.n	8005c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d11b      	bne.n	8005c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0204 	mvn.w	r2, #4
 8005c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2202      	movs	r2, #2
 8005c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f98b 	bl	8005f72 <HAL_TIM_IC_CaptureCallback>
 8005c5c:	e005      	b.n	8005c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f97d 	bl	8005f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f98e 	bl	8005f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0308 	and.w	r3, r3, #8
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	d122      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d11b      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0208 	mvn.w	r2, #8
 8005c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f961 	bl	8005f72 <HAL_TIM_IC_CaptureCallback>
 8005cb0:	e005      	b.n	8005cbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f953 	bl	8005f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f964 	bl	8005f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0310 	and.w	r3, r3, #16
 8005cce:	2b10      	cmp	r3, #16
 8005cd0:	d122      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0310 	and.w	r3, r3, #16
 8005cdc:	2b10      	cmp	r3, #16
 8005cde:	d11b      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0210 	mvn.w	r2, #16
 8005ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2208      	movs	r2, #8
 8005cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f937 	bl	8005f72 <HAL_TIM_IC_CaptureCallback>
 8005d04:	e005      	b.n	8005d12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f929 	bl	8005f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f93a 	bl	8005f86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d10e      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d107      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0201 	mvn.w	r2, #1
 8005d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fc fb5c 	bl	80023fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4e:	2b80      	cmp	r3, #128	; 0x80
 8005d50:	d10e      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5c:	2b80      	cmp	r3, #128	; 0x80
 8005d5e:	d107      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fab2 	bl	80062d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7a:	2b40      	cmp	r3, #64	; 0x40
 8005d7c:	d10e      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b40      	cmp	r3, #64	; 0x40
 8005d8a:	d107      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f8ff 	bl	8005f9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	d10e      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d107      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0220 	mvn.w	r2, #32
 8005dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa7c 	bl	80062c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dc8:	bf00      	nop
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_TIM_ConfigClockSource+0x1c>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e0b4      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x186>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2202      	movs	r2, #2
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e24:	d03e      	beq.n	8005ea4 <HAL_TIM_ConfigClockSource+0xd4>
 8005e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e2a:	f200 8087 	bhi.w	8005f3c <HAL_TIM_ConfigClockSource+0x16c>
 8005e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e32:	f000 8086 	beq.w	8005f42 <HAL_TIM_ConfigClockSource+0x172>
 8005e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e3a:	d87f      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x16c>
 8005e3c:	2b70      	cmp	r3, #112	; 0x70
 8005e3e:	d01a      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0xa6>
 8005e40:	2b70      	cmp	r3, #112	; 0x70
 8005e42:	d87b      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x16c>
 8005e44:	2b60      	cmp	r3, #96	; 0x60
 8005e46:	d050      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x11a>
 8005e48:	2b60      	cmp	r3, #96	; 0x60
 8005e4a:	d877      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x16c>
 8005e4c:	2b50      	cmp	r3, #80	; 0x50
 8005e4e:	d03c      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0xfa>
 8005e50:	2b50      	cmp	r3, #80	; 0x50
 8005e52:	d873      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x16c>
 8005e54:	2b40      	cmp	r3, #64	; 0x40
 8005e56:	d058      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x13a>
 8005e58:	2b40      	cmp	r3, #64	; 0x40
 8005e5a:	d86f      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x16c>
 8005e5c:	2b30      	cmp	r3, #48	; 0x30
 8005e5e:	d064      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x15a>
 8005e60:	2b30      	cmp	r3, #48	; 0x30
 8005e62:	d86b      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x16c>
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d060      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x15a>
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	d867      	bhi.n	8005f3c <HAL_TIM_ConfigClockSource+0x16c>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d05c      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x15a>
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d05a      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x15a>
 8005e74:	e062      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6818      	ldr	r0, [r3, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	6899      	ldr	r1, [r3, #8]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f000 f98d 	bl	80061a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	609a      	str	r2, [r3, #8]
      break;
 8005ea2:	e04f      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6818      	ldr	r0, [r3, #0]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	6899      	ldr	r1, [r3, #8]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f000 f976 	bl	80061a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ec6:	609a      	str	r2, [r3, #8]
      break;
 8005ec8:	e03c      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6859      	ldr	r1, [r3, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f000 f8ea 	bl	80060b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2150      	movs	r1, #80	; 0x50
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 f943 	bl	800616e <TIM_ITRx_SetConfig>
      break;
 8005ee8:	e02c      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6859      	ldr	r1, [r3, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f000 f909 	bl	800610e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2160      	movs	r1, #96	; 0x60
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 f933 	bl	800616e <TIM_ITRx_SetConfig>
      break;
 8005f08:	e01c      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6859      	ldr	r1, [r3, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	461a      	mov	r2, r3
 8005f18:	f000 f8ca 	bl	80060b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2140      	movs	r1, #64	; 0x40
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 f923 	bl	800616e <TIM_ITRx_SetConfig>
      break;
 8005f28:	e00c      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f000 f91a 	bl	800616e <TIM_ITRx_SetConfig>
      break;
 8005f3a:	e003      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f40:	e000      	b.n	8005f44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
	...

08005fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a34      	ldr	r2, [pc, #208]	; (8006094 <TIM_Base_SetConfig+0xe4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00f      	beq.n	8005fe8 <TIM_Base_SetConfig+0x38>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fce:	d00b      	beq.n	8005fe8 <TIM_Base_SetConfig+0x38>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a31      	ldr	r2, [pc, #196]	; (8006098 <TIM_Base_SetConfig+0xe8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d007      	beq.n	8005fe8 <TIM_Base_SetConfig+0x38>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a30      	ldr	r2, [pc, #192]	; (800609c <TIM_Base_SetConfig+0xec>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_Base_SetConfig+0x38>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a2f      	ldr	r2, [pc, #188]	; (80060a0 <TIM_Base_SetConfig+0xf0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d108      	bne.n	8005ffa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a25      	ldr	r2, [pc, #148]	; (8006094 <TIM_Base_SetConfig+0xe4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d01b      	beq.n	800603a <TIM_Base_SetConfig+0x8a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006008:	d017      	beq.n	800603a <TIM_Base_SetConfig+0x8a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a22      	ldr	r2, [pc, #136]	; (8006098 <TIM_Base_SetConfig+0xe8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <TIM_Base_SetConfig+0x8a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a21      	ldr	r2, [pc, #132]	; (800609c <TIM_Base_SetConfig+0xec>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00f      	beq.n	800603a <TIM_Base_SetConfig+0x8a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a20      	ldr	r2, [pc, #128]	; (80060a0 <TIM_Base_SetConfig+0xf0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00b      	beq.n	800603a <TIM_Base_SetConfig+0x8a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <TIM_Base_SetConfig+0xf4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d007      	beq.n	800603a <TIM_Base_SetConfig+0x8a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a1e      	ldr	r2, [pc, #120]	; (80060a8 <TIM_Base_SetConfig+0xf8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_Base_SetConfig+0x8a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <TIM_Base_SetConfig+0xfc>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d108      	bne.n	800604c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a08      	ldr	r2, [pc, #32]	; (8006094 <TIM_Base_SetConfig+0xe4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d103      	bne.n	8006080 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	615a      	str	r2, [r3, #20]
}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40010000 	.word	0x40010000
 8006098:	40000400 	.word	0x40000400
 800609c:	40000800 	.word	0x40000800
 80060a0:	40000c00 	.word	0x40000c00
 80060a4:	40014000 	.word	0x40014000
 80060a8:	40014400 	.word	0x40014400
 80060ac:	40014800 	.word	0x40014800

080060b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	f023 0201 	bic.w	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f023 030a 	bic.w	r3, r3, #10
 80060ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800610e:	b480      	push	{r7}
 8006110:	b087      	sub	sp, #28
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f023 0210 	bic.w	r2, r3, #16
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	031b      	lsls	r3, r3, #12
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800614a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	621a      	str	r2, [r3, #32]
}
 8006162:	bf00      	nop
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800616e:	b480      	push	{r7}
 8006170:	b085      	sub	sp, #20
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	f043 0307 	orr.w	r3, r3, #7
 8006190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	609a      	str	r2, [r3, #8]
}
 8006198:	bf00      	nop
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	021a      	lsls	r2, r3, #8
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	609a      	str	r2, [r3, #8]
}
 80061d8:	bf00      	nop
 80061da:	371c      	adds	r7, #28
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e050      	b.n	800629e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1c      	ldr	r2, [pc, #112]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d018      	beq.n	8006272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006248:	d013      	beq.n	8006272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d00e      	beq.n	8006272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a16      	ldr	r2, [pc, #88]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d009      	beq.n	8006272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a15      	ldr	r2, [pc, #84]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d004      	beq.n	8006272 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a13      	ldr	r2, [pc, #76]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d10c      	bne.n	800628c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	4313      	orrs	r3, r2
 8006282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40014000 	.word	0x40014000

080062c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e03f      	b.n	800637a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fc fa00 	bl	8002714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2224      	movs	r2, #36	; 0x24
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800632a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f929 	bl	8006584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695a      	ldr	r2, [r3, #20]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b08a      	sub	sp, #40	; 0x28
 8006386:	af02      	add	r7, sp, #8
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	603b      	str	r3, [r7, #0]
 800638e:	4613      	mov	r3, r2
 8006390:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d17c      	bne.n	800649c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_UART_Transmit+0x2c>
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e075      	b.n	800649e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_UART_Transmit+0x3e>
 80063bc:	2302      	movs	r3, #2
 80063be:	e06e      	b.n	800649e <HAL_UART_Transmit+0x11c>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2221      	movs	r2, #33	; 0x21
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063d6:	f7fc fb53 	bl	8002a80 <HAL_GetTick>
 80063da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	88fa      	ldrh	r2, [r7, #6]
 80063e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	88fa      	ldrh	r2, [r7, #6]
 80063e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f0:	d108      	bne.n	8006404 <HAL_UART_Transmit+0x82>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d104      	bne.n	8006404 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	e003      	b.n	800640c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006408:	2300      	movs	r3, #0
 800640a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006414:	e02a      	b.n	800646c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2200      	movs	r2, #0
 800641e:	2180      	movs	r1, #128	; 0x80
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 f840 	bl	80064a6 <UART_WaitOnFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e036      	b.n	800649e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10b      	bne.n	800644e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006444:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	3302      	adds	r3, #2
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	e007      	b.n	800645e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	781a      	ldrb	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	3301      	adds	r3, #1
 800645c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006470:	b29b      	uxth	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1cf      	bne.n	8006416 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2200      	movs	r2, #0
 800647e:	2140      	movs	r1, #64	; 0x40
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 f810 	bl	80064a6 <UART_WaitOnFlagUntilTimeout>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e006      	b.n	800649e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	e000      	b.n	800649e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800649c:	2302      	movs	r3, #2
  }
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3720      	adds	r7, #32
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b090      	sub	sp, #64	; 0x40
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	603b      	str	r3, [r7, #0]
 80064b2:	4613      	mov	r3, r2
 80064b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b6:	e050      	b.n	800655a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064be:	d04c      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d007      	beq.n	80064d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80064c6:	f7fc fadb 	bl	8002a80 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d241      	bcs.n	800655a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	330c      	adds	r3, #12
 80064dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	330c      	adds	r3, #12
 80064f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064f6:	637a      	str	r2, [r7, #52]	; 0x34
 80064f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064fe:	e841 2300 	strex	r3, r2, [r1]
 8006502:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e5      	bne.n	80064d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3314      	adds	r3, #20
 8006510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	613b      	str	r3, [r7, #16]
   return(result);
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	63bb      	str	r3, [r7, #56]	; 0x38
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3314      	adds	r3, #20
 8006528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800652a:	623a      	str	r2, [r7, #32]
 800652c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	69f9      	ldr	r1, [r7, #28]
 8006530:	6a3a      	ldr	r2, [r7, #32]
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	61bb      	str	r3, [r7, #24]
   return(result);
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e5      	bne.n	800650a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e00f      	b.n	800657a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4013      	ands	r3, r2
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	429a      	cmp	r2, r3
 8006568:	bf0c      	ite	eq
 800656a:	2301      	moveq	r3, #1
 800656c:	2300      	movne	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	79fb      	ldrb	r3, [r7, #7]
 8006574:	429a      	cmp	r2, r3
 8006576:	d09f      	beq.n	80064b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3740      	adds	r7, #64	; 0x40
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006588:	b0c0      	sub	sp, #256	; 0x100
 800658a:	af00      	add	r7, sp, #0
 800658c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	68d9      	ldr	r1, [r3, #12]
 80065a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	ea40 0301 	orr.w	r3, r0, r1
 80065ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	431a      	orrs	r2, r3
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	431a      	orrs	r2, r3
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065dc:	f021 010c 	bic.w	r1, r1, #12
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065ea:	430b      	orrs	r3, r1
 80065ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fe:	6999      	ldr	r1, [r3, #24]
 8006600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	ea40 0301 	orr.w	r3, r0, r1
 800660a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4b8f      	ldr	r3, [pc, #572]	; (8006850 <UART_SetConfig+0x2cc>)
 8006614:	429a      	cmp	r2, r3
 8006616:	d005      	beq.n	8006624 <UART_SetConfig+0xa0>
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b8d      	ldr	r3, [pc, #564]	; (8006854 <UART_SetConfig+0x2d0>)
 8006620:	429a      	cmp	r2, r3
 8006622:	d104      	bne.n	800662e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006624:	f7fe fd3a 	bl	800509c <HAL_RCC_GetPCLK2Freq>
 8006628:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800662c:	e003      	b.n	8006636 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800662e:	f7fe fd21 	bl	8005074 <HAL_RCC_GetPCLK1Freq>
 8006632:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006640:	f040 810c 	bne.w	800685c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006648:	2200      	movs	r2, #0
 800664a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800664e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006652:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006656:	4622      	mov	r2, r4
 8006658:	462b      	mov	r3, r5
 800665a:	1891      	adds	r1, r2, r2
 800665c:	65b9      	str	r1, [r7, #88]	; 0x58
 800665e:	415b      	adcs	r3, r3
 8006660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006662:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006666:	4621      	mov	r1, r4
 8006668:	eb12 0801 	adds.w	r8, r2, r1
 800666c:	4629      	mov	r1, r5
 800666e:	eb43 0901 	adc.w	r9, r3, r1
 8006672:	f04f 0200 	mov.w	r2, #0
 8006676:	f04f 0300 	mov.w	r3, #0
 800667a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800667e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006686:	4690      	mov	r8, r2
 8006688:	4699      	mov	r9, r3
 800668a:	4623      	mov	r3, r4
 800668c:	eb18 0303 	adds.w	r3, r8, r3
 8006690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006694:	462b      	mov	r3, r5
 8006696:	eb49 0303 	adc.w	r3, r9, r3
 800669a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800669e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066b2:	460b      	mov	r3, r1
 80066b4:	18db      	adds	r3, r3, r3
 80066b6:	653b      	str	r3, [r7, #80]	; 0x50
 80066b8:	4613      	mov	r3, r2
 80066ba:	eb42 0303 	adc.w	r3, r2, r3
 80066be:	657b      	str	r3, [r7, #84]	; 0x54
 80066c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066c8:	f7fa f940 	bl	800094c <__aeabi_uldivmod>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4b61      	ldr	r3, [pc, #388]	; (8006858 <UART_SetConfig+0x2d4>)
 80066d2:	fba3 2302 	umull	r2, r3, r3, r2
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	011c      	lsls	r4, r3, #4
 80066da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	1891      	adds	r1, r2, r2
 80066f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80066f4:	415b      	adcs	r3, r3
 80066f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066fc:	4641      	mov	r1, r8
 80066fe:	eb12 0a01 	adds.w	sl, r2, r1
 8006702:	4649      	mov	r1, r9
 8006704:	eb43 0b01 	adc.w	fp, r3, r1
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	f04f 0300 	mov.w	r3, #0
 8006710:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006714:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800671c:	4692      	mov	sl, r2
 800671e:	469b      	mov	fp, r3
 8006720:	4643      	mov	r3, r8
 8006722:	eb1a 0303 	adds.w	r3, sl, r3
 8006726:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800672a:	464b      	mov	r3, r9
 800672c:	eb4b 0303 	adc.w	r3, fp, r3
 8006730:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006740:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006744:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006748:	460b      	mov	r3, r1
 800674a:	18db      	adds	r3, r3, r3
 800674c:	643b      	str	r3, [r7, #64]	; 0x40
 800674e:	4613      	mov	r3, r2
 8006750:	eb42 0303 	adc.w	r3, r2, r3
 8006754:	647b      	str	r3, [r7, #68]	; 0x44
 8006756:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800675a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800675e:	f7fa f8f5 	bl	800094c <__aeabi_uldivmod>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4611      	mov	r1, r2
 8006768:	4b3b      	ldr	r3, [pc, #236]	; (8006858 <UART_SetConfig+0x2d4>)
 800676a:	fba3 2301 	umull	r2, r3, r3, r1
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	2264      	movs	r2, #100	; 0x64
 8006772:	fb02 f303 	mul.w	r3, r2, r3
 8006776:	1acb      	subs	r3, r1, r3
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800677e:	4b36      	ldr	r3, [pc, #216]	; (8006858 <UART_SetConfig+0x2d4>)
 8006780:	fba3 2302 	umull	r2, r3, r3, r2
 8006784:	095b      	lsrs	r3, r3, #5
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800678c:	441c      	add	r4, r3
 800678e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006792:	2200      	movs	r2, #0
 8006794:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006798:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800679c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067a0:	4642      	mov	r2, r8
 80067a2:	464b      	mov	r3, r9
 80067a4:	1891      	adds	r1, r2, r2
 80067a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80067a8:	415b      	adcs	r3, r3
 80067aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067b0:	4641      	mov	r1, r8
 80067b2:	1851      	adds	r1, r2, r1
 80067b4:	6339      	str	r1, [r7, #48]	; 0x30
 80067b6:	4649      	mov	r1, r9
 80067b8:	414b      	adcs	r3, r1
 80067ba:	637b      	str	r3, [r7, #52]	; 0x34
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067c8:	4659      	mov	r1, fp
 80067ca:	00cb      	lsls	r3, r1, #3
 80067cc:	4651      	mov	r1, sl
 80067ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067d2:	4651      	mov	r1, sl
 80067d4:	00ca      	lsls	r2, r1, #3
 80067d6:	4610      	mov	r0, r2
 80067d8:	4619      	mov	r1, r3
 80067da:	4603      	mov	r3, r0
 80067dc:	4642      	mov	r2, r8
 80067de:	189b      	adds	r3, r3, r2
 80067e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067e4:	464b      	mov	r3, r9
 80067e6:	460a      	mov	r2, r1
 80067e8:	eb42 0303 	adc.w	r3, r2, r3
 80067ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006800:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006804:	460b      	mov	r3, r1
 8006806:	18db      	adds	r3, r3, r3
 8006808:	62bb      	str	r3, [r7, #40]	; 0x28
 800680a:	4613      	mov	r3, r2
 800680c:	eb42 0303 	adc.w	r3, r2, r3
 8006810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006812:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006816:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800681a:	f7fa f897 	bl	800094c <__aeabi_uldivmod>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4b0d      	ldr	r3, [pc, #52]	; (8006858 <UART_SetConfig+0x2d4>)
 8006824:	fba3 1302 	umull	r1, r3, r3, r2
 8006828:	095b      	lsrs	r3, r3, #5
 800682a:	2164      	movs	r1, #100	; 0x64
 800682c:	fb01 f303 	mul.w	r3, r1, r3
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	3332      	adds	r3, #50	; 0x32
 8006836:	4a08      	ldr	r2, [pc, #32]	; (8006858 <UART_SetConfig+0x2d4>)
 8006838:	fba2 2303 	umull	r2, r3, r2, r3
 800683c:	095b      	lsrs	r3, r3, #5
 800683e:	f003 0207 	and.w	r2, r3, #7
 8006842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4422      	add	r2, r4
 800684a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800684c:	e105      	b.n	8006a5a <UART_SetConfig+0x4d6>
 800684e:	bf00      	nop
 8006850:	40011000 	.word	0x40011000
 8006854:	40011400 	.word	0x40011400
 8006858:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800685c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006860:	2200      	movs	r2, #0
 8006862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006866:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800686a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800686e:	4642      	mov	r2, r8
 8006870:	464b      	mov	r3, r9
 8006872:	1891      	adds	r1, r2, r2
 8006874:	6239      	str	r1, [r7, #32]
 8006876:	415b      	adcs	r3, r3
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
 800687a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800687e:	4641      	mov	r1, r8
 8006880:	1854      	adds	r4, r2, r1
 8006882:	4649      	mov	r1, r9
 8006884:	eb43 0501 	adc.w	r5, r3, r1
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	00eb      	lsls	r3, r5, #3
 8006892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006896:	00e2      	lsls	r2, r4, #3
 8006898:	4614      	mov	r4, r2
 800689a:	461d      	mov	r5, r3
 800689c:	4643      	mov	r3, r8
 800689e:	18e3      	adds	r3, r4, r3
 80068a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068a4:	464b      	mov	r3, r9
 80068a6:	eb45 0303 	adc.w	r3, r5, r3
 80068aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068ca:	4629      	mov	r1, r5
 80068cc:	008b      	lsls	r3, r1, #2
 80068ce:	4621      	mov	r1, r4
 80068d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068d4:	4621      	mov	r1, r4
 80068d6:	008a      	lsls	r2, r1, #2
 80068d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068dc:	f7fa f836 	bl	800094c <__aeabi_uldivmod>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4b60      	ldr	r3, [pc, #384]	; (8006a68 <UART_SetConfig+0x4e4>)
 80068e6:	fba3 2302 	umull	r2, r3, r3, r2
 80068ea:	095b      	lsrs	r3, r3, #5
 80068ec:	011c      	lsls	r4, r3, #4
 80068ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006900:	4642      	mov	r2, r8
 8006902:	464b      	mov	r3, r9
 8006904:	1891      	adds	r1, r2, r2
 8006906:	61b9      	str	r1, [r7, #24]
 8006908:	415b      	adcs	r3, r3
 800690a:	61fb      	str	r3, [r7, #28]
 800690c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006910:	4641      	mov	r1, r8
 8006912:	1851      	adds	r1, r2, r1
 8006914:	6139      	str	r1, [r7, #16]
 8006916:	4649      	mov	r1, r9
 8006918:	414b      	adcs	r3, r1
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006928:	4659      	mov	r1, fp
 800692a:	00cb      	lsls	r3, r1, #3
 800692c:	4651      	mov	r1, sl
 800692e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006932:	4651      	mov	r1, sl
 8006934:	00ca      	lsls	r2, r1, #3
 8006936:	4610      	mov	r0, r2
 8006938:	4619      	mov	r1, r3
 800693a:	4603      	mov	r3, r0
 800693c:	4642      	mov	r2, r8
 800693e:	189b      	adds	r3, r3, r2
 8006940:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006944:	464b      	mov	r3, r9
 8006946:	460a      	mov	r2, r1
 8006948:	eb42 0303 	adc.w	r3, r2, r3
 800694c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	67bb      	str	r3, [r7, #120]	; 0x78
 800695a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006968:	4649      	mov	r1, r9
 800696a:	008b      	lsls	r3, r1, #2
 800696c:	4641      	mov	r1, r8
 800696e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006972:	4641      	mov	r1, r8
 8006974:	008a      	lsls	r2, r1, #2
 8006976:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800697a:	f7f9 ffe7 	bl	800094c <__aeabi_uldivmod>
 800697e:	4602      	mov	r2, r0
 8006980:	460b      	mov	r3, r1
 8006982:	4b39      	ldr	r3, [pc, #228]	; (8006a68 <UART_SetConfig+0x4e4>)
 8006984:	fba3 1302 	umull	r1, r3, r3, r2
 8006988:	095b      	lsrs	r3, r3, #5
 800698a:	2164      	movs	r1, #100	; 0x64
 800698c:	fb01 f303 	mul.w	r3, r1, r3
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	3332      	adds	r3, #50	; 0x32
 8006996:	4a34      	ldr	r2, [pc, #208]	; (8006a68 <UART_SetConfig+0x4e4>)
 8006998:	fba2 2303 	umull	r2, r3, r2, r3
 800699c:	095b      	lsrs	r3, r3, #5
 800699e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069a2:	441c      	add	r4, r3
 80069a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069a8:	2200      	movs	r2, #0
 80069aa:	673b      	str	r3, [r7, #112]	; 0x70
 80069ac:	677a      	str	r2, [r7, #116]	; 0x74
 80069ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069b2:	4642      	mov	r2, r8
 80069b4:	464b      	mov	r3, r9
 80069b6:	1891      	adds	r1, r2, r2
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	415b      	adcs	r3, r3
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069c2:	4641      	mov	r1, r8
 80069c4:	1851      	adds	r1, r2, r1
 80069c6:	6039      	str	r1, [r7, #0]
 80069c8:	4649      	mov	r1, r9
 80069ca:	414b      	adcs	r3, r1
 80069cc:	607b      	str	r3, [r7, #4]
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	f04f 0300 	mov.w	r3, #0
 80069d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069da:	4659      	mov	r1, fp
 80069dc:	00cb      	lsls	r3, r1, #3
 80069de:	4651      	mov	r1, sl
 80069e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069e4:	4651      	mov	r1, sl
 80069e6:	00ca      	lsls	r2, r1, #3
 80069e8:	4610      	mov	r0, r2
 80069ea:	4619      	mov	r1, r3
 80069ec:	4603      	mov	r3, r0
 80069ee:	4642      	mov	r2, r8
 80069f0:	189b      	adds	r3, r3, r2
 80069f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80069f4:	464b      	mov	r3, r9
 80069f6:	460a      	mov	r2, r1
 80069f8:	eb42 0303 	adc.w	r3, r2, r3
 80069fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	663b      	str	r3, [r7, #96]	; 0x60
 8006a08:	667a      	str	r2, [r7, #100]	; 0x64
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	f04f 0300 	mov.w	r3, #0
 8006a12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a16:	4649      	mov	r1, r9
 8006a18:	008b      	lsls	r3, r1, #2
 8006a1a:	4641      	mov	r1, r8
 8006a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a20:	4641      	mov	r1, r8
 8006a22:	008a      	lsls	r2, r1, #2
 8006a24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a28:	f7f9 ff90 	bl	800094c <__aeabi_uldivmod>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <UART_SetConfig+0x4e4>)
 8006a32:	fba3 1302 	umull	r1, r3, r3, r2
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	2164      	movs	r1, #100	; 0x64
 8006a3a:	fb01 f303 	mul.w	r3, r1, r3
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	3332      	adds	r3, #50	; 0x32
 8006a44:	4a08      	ldr	r2, [pc, #32]	; (8006a68 <UART_SetConfig+0x4e4>)
 8006a46:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4a:	095b      	lsrs	r3, r3, #5
 8006a4c:	f003 020f 	and.w	r2, r3, #15
 8006a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4422      	add	r2, r4
 8006a58:	609a      	str	r2, [r3, #8]
}
 8006a5a:	bf00      	nop
 8006a5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a60:	46bd      	mov	sp, r7
 8006a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a66:	bf00      	nop
 8006a68:	51eb851f 	.word	0x51eb851f

08006a6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006a70:	4904      	ldr	r1, [pc, #16]	; (8006a84 <MX_FATFS_Init+0x18>)
 8006a72:	4805      	ldr	r0, [pc, #20]	; (8006a88 <MX_FATFS_Init+0x1c>)
 8006a74:	f003 f862 	bl	8009b3c <FATFS_LinkDriver>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	4b03      	ldr	r3, [pc, #12]	; (8006a8c <MX_FATFS_Init+0x20>)
 8006a7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006a80:	bf00      	nop
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20005cf4 	.word	0x20005cf4
 8006a88:	20000098 	.word	0x20000098
 8006a8c:	20005cf0 	.word	0x20005cf0

08006a90 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006a94:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	  Stat = SD_disk_initialize(pdrv);
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fa fa89 	bl	8000fc4 <SD_disk_initialize>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4b04      	ldr	r3, [pc, #16]	; (8006ac8 <USER_initialize+0x28>)
 8006ab8:	701a      	strb	r2, [r3, #0]
	    return Stat;
 8006aba:	4b03      	ldr	r3, [pc, #12]	; (8006ac8 <USER_initialize+0x28>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	20000095 	.word	0x20000095

08006acc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fa fb5d 	bl	8001198 <SD_disk_status>
 8006ade:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8006af8:	7bf8      	ldrb	r0, [r7, #15]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	f7fa fb60 	bl	80011c4 <SD_disk_read>
 8006b04:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8006b1e:	7bf8      	ldrb	r0, [r7, #15]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	f7fa fbb7 	bl	8001298 <SD_disk_write>
 8006b2a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	603a      	str	r2, [r7, #0]
 8006b3e:	71fb      	strb	r3, [r7, #7]
 8006b40:	460b      	mov	r3, r1
 8006b42:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8006b44:	79b9      	ldrb	r1, [r7, #6]
 8006b46:	79fb      	ldrb	r3, [r7, #7]
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fa fc28 	bl	80013a0 <SD_disk_ioctl>
 8006b50:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	4a08      	ldr	r2, [pc, #32]	; (8006b8c <disk_status+0x30>)
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	79fa      	ldrb	r2, [r7, #7]
 8006b74:	4905      	ldr	r1, [pc, #20]	; (8006b8c <disk_status+0x30>)
 8006b76:	440a      	add	r2, r1
 8006b78:	7a12      	ldrb	r2, [r2, #8]
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	4798      	blx	r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20005d20 	.word	0x20005d20

08006b90 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	4a0d      	ldr	r2, [pc, #52]	; (8006bd8 <disk_initialize+0x48>)
 8006ba2:	5cd3      	ldrb	r3, [r2, r3]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d111      	bne.n	8006bcc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	4a0b      	ldr	r2, [pc, #44]	; (8006bd8 <disk_initialize+0x48>)
 8006bac:	2101      	movs	r1, #1
 8006bae:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	4a09      	ldr	r2, [pc, #36]	; (8006bd8 <disk_initialize+0x48>)
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	79fa      	ldrb	r2, [r7, #7]
 8006bbe:	4906      	ldr	r1, [pc, #24]	; (8006bd8 <disk_initialize+0x48>)
 8006bc0:	440a      	add	r2, r1
 8006bc2:	7a12      	ldrb	r2, [r2, #8]
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4798      	blx	r3
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20005d20 	.word	0x20005d20

08006bdc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006bdc:	b590      	push	{r4, r7, lr}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	603b      	str	r3, [r7, #0]
 8006be8:	4603      	mov	r3, r0
 8006bea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	4a0a      	ldr	r2, [pc, #40]	; (8006c18 <disk_read+0x3c>)
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	689c      	ldr	r4, [r3, #8]
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	4a07      	ldr	r2, [pc, #28]	; (8006c18 <disk_read+0x3c>)
 8006bfc:	4413      	add	r3, r2
 8006bfe:	7a18      	ldrb	r0, [r3, #8]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	68b9      	ldr	r1, [r7, #8]
 8006c06:	47a0      	blx	r4
 8006c08:	4603      	mov	r3, r0
 8006c0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd90      	pop	{r4, r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20005d20 	.word	0x20005d20

08006c1c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006c1c:	b590      	push	{r4, r7, lr}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	4603      	mov	r3, r0
 8006c2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	4a0a      	ldr	r2, [pc, #40]	; (8006c58 <disk_write+0x3c>)
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	68dc      	ldr	r4, [r3, #12]
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	4a07      	ldr	r2, [pc, #28]	; (8006c58 <disk_write+0x3c>)
 8006c3c:	4413      	add	r3, r2
 8006c3e:	7a18      	ldrb	r0, [r3, #8]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	68b9      	ldr	r1, [r7, #8]
 8006c46:	47a0      	blx	r4
 8006c48:	4603      	mov	r3, r0
 8006c4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd90      	pop	{r4, r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20005d20 	.word	0x20005d20

08006c5c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4603      	mov	r3, r0
 8006c64:	603a      	str	r2, [r7, #0]
 8006c66:	71fb      	strb	r3, [r7, #7]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	4a09      	ldr	r2, [pc, #36]	; (8006c94 <disk_ioctl+0x38>)
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	79fa      	ldrb	r2, [r7, #7]
 8006c7a:	4906      	ldr	r1, [pc, #24]	; (8006c94 <disk_ioctl+0x38>)
 8006c7c:	440a      	add	r2, r1
 8006c7e:	7a10      	ldrb	r0, [r2, #8]
 8006c80:	79b9      	ldrb	r1, [r7, #6]
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	4798      	blx	r3
 8006c86:	4603      	mov	r3, r0
 8006c88:	73fb      	strb	r3, [r7, #15]
  return res;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20005d20 	.word	0x20005d20

08006c98 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006ca8:	89fb      	ldrh	r3, [r7, #14]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	b21a      	sxth	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	b21b      	sxth	r3, r3
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	b21b      	sxth	r3, r3
 8006cb8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006cba:	89fb      	ldrh	r3, [r7, #14]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3303      	adds	r3, #3
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	021b      	lsls	r3, r3, #8
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	3202      	adds	r2, #2
 8006ce0:	7812      	ldrb	r2, [r2, #0]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	3201      	adds	r2, #1
 8006cee:	7812      	ldrb	r2, [r2, #0]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	7812      	ldrb	r2, [r2, #0]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
	return rv;
 8006d00:	68fb      	ldr	r3, [r7, #12]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b083      	sub	sp, #12
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	460b      	mov	r3, r1
 8006d18:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	887a      	ldrh	r2, [r7, #2]
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	701a      	strb	r2, [r3, #0]
 8006d26:	887b      	ldrh	r3, [r7, #2]
 8006d28:	0a1b      	lsrs	r3, r3, #8
 8006d2a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	607a      	str	r2, [r7, #4]
 8006d32:	887a      	ldrh	r2, [r7, #2]
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	701a      	strb	r2, [r3, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	0a1b      	lsrs	r3, r3, #8
 8006d5e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	0a1b      	lsrs	r3, r3, #8
 8006d82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	607a      	str	r2, [r7, #4]
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	b2d2      	uxtb	r2, r2
 8006d8e:	701a      	strb	r2, [r3, #0]
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00d      	beq.n	8006dd2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	1c53      	adds	r3, r2, #1
 8006dba:	613b      	str	r3, [r7, #16]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	1c59      	adds	r1, r3, #1
 8006dc0:	6179      	str	r1, [r7, #20]
 8006dc2:	7812      	ldrb	r2, [r2, #0]
 8006dc4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	607b      	str	r3, [r7, #4]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f1      	bne.n	8006db6 <mem_cpy+0x1a>
	}
}
 8006dd2:	bf00      	nop
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006dde:	b480      	push	{r7}
 8006de0:	b087      	sub	sp, #28
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	617a      	str	r2, [r7, #20]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	607b      	str	r3, [r7, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f3      	bne.n	8006dee <mem_set+0x10>
}
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006e14:	b480      	push	{r7}
 8006e16:	b089      	sub	sp, #36	; 0x24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	61fa      	str	r2, [r7, #28]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	4619      	mov	r1, r3
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	61ba      	str	r2, [r7, #24]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	1acb      	subs	r3, r1, r3
 8006e40:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	607b      	str	r3, [r7, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <mem_cmp+0x40>
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d0eb      	beq.n	8006e2c <mem_cmp+0x18>

	return r;
 8006e54:	697b      	ldr	r3, [r7, #20]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3724      	adds	r7, #36	; 0x24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006e6c:	e002      	b.n	8006e74 <chk_chr+0x12>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3301      	adds	r3, #1
 8006e72:	607b      	str	r3, [r7, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <chk_chr+0x26>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d1f2      	bne.n	8006e6e <chk_chr+0xc>
	return *str;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d009      	beq.n	8006eba <lock_fs+0x22>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f002 ff43 	bl	8009d36 <ff_req_grant>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <lock_fs+0x22>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <lock_fs+0x24>
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00d      	beq.n	8006ef2 <unlock_fs+0x2e>
 8006ed6:	78fb      	ldrb	r3, [r7, #3]
 8006ed8:	2b0c      	cmp	r3, #12
 8006eda:	d00a      	beq.n	8006ef2 <unlock_fs+0x2e>
 8006edc:	78fb      	ldrb	r3, [r7, #3]
 8006ede:	2b0b      	cmp	r3, #11
 8006ee0:	d007      	beq.n	8006ef2 <unlock_fs+0x2e>
 8006ee2:	78fb      	ldrb	r3, [r7, #3]
 8006ee4:	2b0f      	cmp	r3, #15
 8006ee6:	d004      	beq.n	8006ef2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f002 ff37 	bl	8009d60 <ff_rel_grant>
	}
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f06:	2300      	movs	r3, #0
 8006f08:	60bb      	str	r3, [r7, #8]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	e029      	b.n	8006f64 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006f10:	4a27      	ldr	r2, [pc, #156]	; (8006fb0 <chk_lock+0xb4>)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	4413      	add	r3, r2
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d01d      	beq.n	8006f5a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f1e:	4a24      	ldr	r2, [pc, #144]	; (8006fb0 <chk_lock+0xb4>)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	4413      	add	r3, r2
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d116      	bne.n	8006f5e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006f30:	4a1f      	ldr	r2, [pc, #124]	; (8006fb0 <chk_lock+0xb4>)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	4413      	add	r3, r2
 8006f38:	3304      	adds	r3, #4
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d10c      	bne.n	8006f5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f44:	4a1a      	ldr	r2, [pc, #104]	; (8006fb0 <chk_lock+0xb4>)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	4413      	add	r3, r2
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d102      	bne.n	8006f5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f58:	e007      	b.n	8006f6a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3301      	adds	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d9d2      	bls.n	8006f10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d109      	bne.n	8006f84 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d102      	bne.n	8006f7c <chk_lock+0x80>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d101      	bne.n	8006f80 <chk_lock+0x84>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e010      	b.n	8006fa2 <chk_lock+0xa6>
 8006f80:	2312      	movs	r3, #18
 8006f82:	e00e      	b.n	8006fa2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d108      	bne.n	8006f9c <chk_lock+0xa0>
 8006f8a:	4a09      	ldr	r2, [pc, #36]	; (8006fb0 <chk_lock+0xb4>)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	4413      	add	r3, r2
 8006f92:	330c      	adds	r3, #12
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f9a:	d101      	bne.n	8006fa0 <chk_lock+0xa4>
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	e000      	b.n	8006fa2 <chk_lock+0xa6>
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20005d00 	.word	0x20005d00

08006fb4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	607b      	str	r3, [r7, #4]
 8006fbe:	e002      	b.n	8006fc6 <enq_lock+0x12>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	607b      	str	r3, [r7, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d806      	bhi.n	8006fda <enq_lock+0x26>
 8006fcc:	4a09      	ldr	r2, [pc, #36]	; (8006ff4 <enq_lock+0x40>)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	4413      	add	r3, r2
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f2      	bne.n	8006fc0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	bf14      	ite	ne
 8006fe0:	2301      	movne	r3, #1
 8006fe2:	2300      	moveq	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20005d00 	.word	0x20005d00

08006ff8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007002:	2300      	movs	r3, #0
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	e01f      	b.n	8007048 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007008:	4a41      	ldr	r2, [pc, #260]	; (8007110 <inc_lock+0x118>)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	011b      	lsls	r3, r3, #4
 800700e:	4413      	add	r3, r2
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d113      	bne.n	8007042 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800701a:	4a3d      	ldr	r2, [pc, #244]	; (8007110 <inc_lock+0x118>)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	4413      	add	r3, r2
 8007022:	3304      	adds	r3, #4
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800702a:	429a      	cmp	r2, r3
 800702c:	d109      	bne.n	8007042 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800702e:	4a38      	ldr	r2, [pc, #224]	; (8007110 <inc_lock+0x118>)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	4413      	add	r3, r2
 8007036:	3308      	adds	r3, #8
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800703e:	429a      	cmp	r2, r3
 8007040:	d006      	beq.n	8007050 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d9dc      	bls.n	8007008 <inc_lock+0x10>
 800704e:	e000      	b.n	8007052 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007050:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d132      	bne.n	80070be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	e002      	b.n	8007064 <inc_lock+0x6c>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d806      	bhi.n	8007078 <inc_lock+0x80>
 800706a:	4a29      	ldr	r2, [pc, #164]	; (8007110 <inc_lock+0x118>)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	4413      	add	r3, r2
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1f2      	bne.n	800705e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d101      	bne.n	8007082 <inc_lock+0x8a>
 800707e:	2300      	movs	r3, #0
 8007080:	e040      	b.n	8007104 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4922      	ldr	r1, [pc, #136]	; (8007110 <inc_lock+0x118>)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	440b      	add	r3, r1
 800708e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	491e      	ldr	r1, [pc, #120]	; (8007110 <inc_lock+0x118>)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	440b      	add	r3, r1
 800709c:	3304      	adds	r3, #4
 800709e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	695a      	ldr	r2, [r3, #20]
 80070a4:	491a      	ldr	r1, [pc, #104]	; (8007110 <inc_lock+0x118>)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	440b      	add	r3, r1
 80070ac:	3308      	adds	r3, #8
 80070ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80070b0:	4a17      	ldr	r2, [pc, #92]	; (8007110 <inc_lock+0x118>)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	4413      	add	r3, r2
 80070b8:	330c      	adds	r3, #12
 80070ba:	2200      	movs	r2, #0
 80070bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d009      	beq.n	80070d8 <inc_lock+0xe0>
 80070c4:	4a12      	ldr	r2, [pc, #72]	; (8007110 <inc_lock+0x118>)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	4413      	add	r3, r2
 80070cc:	330c      	adds	r3, #12
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <inc_lock+0xe0>
 80070d4:	2300      	movs	r3, #0
 80070d6:	e015      	b.n	8007104 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d108      	bne.n	80070f0 <inc_lock+0xf8>
 80070de:	4a0c      	ldr	r2, [pc, #48]	; (8007110 <inc_lock+0x118>)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	4413      	add	r3, r2
 80070e6:	330c      	adds	r3, #12
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	3301      	adds	r3, #1
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	e001      	b.n	80070f4 <inc_lock+0xfc>
 80070f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070f4:	4906      	ldr	r1, [pc, #24]	; (8007110 <inc_lock+0x118>)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	440b      	add	r3, r1
 80070fc:	330c      	adds	r3, #12
 80070fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3301      	adds	r3, #1
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	20005d00 	.word	0x20005d00

08007114 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3b01      	subs	r3, #1
 8007120:	607b      	str	r3, [r7, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d825      	bhi.n	8007174 <dec_lock+0x60>
		n = Files[i].ctr;
 8007128:	4a17      	ldr	r2, [pc, #92]	; (8007188 <dec_lock+0x74>)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	4413      	add	r3, r2
 8007130:	330c      	adds	r3, #12
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007136:	89fb      	ldrh	r3, [r7, #14]
 8007138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800713c:	d101      	bne.n	8007142 <dec_lock+0x2e>
 800713e:	2300      	movs	r3, #0
 8007140:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007142:	89fb      	ldrh	r3, [r7, #14]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <dec_lock+0x3a>
 8007148:	89fb      	ldrh	r3, [r7, #14]
 800714a:	3b01      	subs	r3, #1
 800714c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800714e:	4a0e      	ldr	r2, [pc, #56]	; (8007188 <dec_lock+0x74>)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	4413      	add	r3, r2
 8007156:	330c      	adds	r3, #12
 8007158:	89fa      	ldrh	r2, [r7, #14]
 800715a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800715c:	89fb      	ldrh	r3, [r7, #14]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d105      	bne.n	800716e <dec_lock+0x5a>
 8007162:	4a09      	ldr	r2, [pc, #36]	; (8007188 <dec_lock+0x74>)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	4413      	add	r3, r2
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	737b      	strb	r3, [r7, #13]
 8007172:	e001      	b.n	8007178 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007174:	2302      	movs	r3, #2
 8007176:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007178:	7b7b      	ldrb	r3, [r7, #13]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	20005d00 	.word	0x20005d00

0800718c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007194:	2300      	movs	r3, #0
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	e010      	b.n	80071bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800719a:	4a0d      	ldr	r2, [pc, #52]	; (80071d0 <clear_lock+0x44>)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	4413      	add	r3, r2
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d105      	bne.n	80071b6 <clear_lock+0x2a>
 80071aa:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <clear_lock+0x44>)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	4413      	add	r3, r2
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3301      	adds	r3, #1
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d9eb      	bls.n	800719a <clear_lock+0xe>
	}
}
 80071c2:	bf00      	nop
 80071c4:	bf00      	nop
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	20005d00 	.word	0x20005d00

080071d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	78db      	ldrb	r3, [r3, #3]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d034      	beq.n	8007252 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	7858      	ldrb	r0, [r3, #1]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80071f8:	2301      	movs	r3, #1
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	f7ff fd0e 	bl	8006c1c <disk_write>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007206:	2301      	movs	r3, #1
 8007208:	73fb      	strb	r3, [r7, #15]
 800720a:	e022      	b.n	8007252 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	1ad2      	subs	r2, r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	429a      	cmp	r2, r3
 8007220:	d217      	bcs.n	8007252 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	789b      	ldrb	r3, [r3, #2]
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	e010      	b.n	800724c <sync_window+0x78>
					wsect += fs->fsize;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4413      	add	r3, r2
 8007232:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	7858      	ldrb	r0, [r3, #1]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800723e:	2301      	movs	r3, #1
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	f7ff fceb 	bl	8006c1c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	3b01      	subs	r3, #1
 800724a:	613b      	str	r3, [r7, #16]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d8eb      	bhi.n	800722a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007252:	7bfb      	ldrb	r3, [r7, #15]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d01b      	beq.n	80072ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff ffad 	bl	80071d4 <sync_window>
 800727a:	4603      	mov	r3, r0
 800727c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d113      	bne.n	80072ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	7858      	ldrb	r0, [r3, #1]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800728e:	2301      	movs	r3, #1
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	f7ff fca3 	bl	8006bdc <disk_read>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d004      	beq.n	80072a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800729c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff ff87 	bl	80071d4 <sync_window>
 80072c6:	4603      	mov	r3, r0
 80072c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d159      	bne.n	8007384 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d149      	bne.n	800736c <sync_fs+0xb4>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	791b      	ldrb	r3, [r3, #4]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d145      	bne.n	800736c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	899b      	ldrh	r3, [r3, #12]
 80072ea:	461a      	mov	r2, r3
 80072ec:	2100      	movs	r1, #0
 80072ee:	f7ff fd76 	bl	8006dde <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	333c      	adds	r3, #60	; 0x3c
 80072f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff fd05 	bl	8006d0e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	333c      	adds	r3, #60	; 0x3c
 8007308:	4921      	ldr	r1, [pc, #132]	; (8007390 <sync_fs+0xd8>)
 800730a:	4618      	mov	r0, r3
 800730c:	f7ff fd1a 	bl	8006d44 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	333c      	adds	r3, #60	; 0x3c
 8007314:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007318:	491e      	ldr	r1, [pc, #120]	; (8007394 <sync_fs+0xdc>)
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fd12 	bl	8006d44 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	333c      	adds	r3, #60	; 0x3c
 8007324:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	4619      	mov	r1, r3
 800732e:	4610      	mov	r0, r2
 8007330:	f7ff fd08 	bl	8006d44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	333c      	adds	r3, #60	; 0x3c
 8007338:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	4619      	mov	r1, r3
 8007342:	4610      	mov	r0, r2
 8007344:	f7ff fcfe 	bl	8006d44 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	7858      	ldrb	r0, [r3, #1]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007360:	2301      	movs	r3, #1
 8007362:	f7ff fc5b 	bl	8006c1c <disk_write>
			fs->fsi_flag = 0;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	785b      	ldrb	r3, [r3, #1]
 8007370:	2200      	movs	r2, #0
 8007372:	2100      	movs	r1, #0
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff fc71 	bl	8006c5c <disk_ioctl>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <sync_fs+0xcc>
 8007380:	2301      	movs	r3, #1
 8007382:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007384:	7bfb      	ldrb	r3, [r7, #15]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	41615252 	.word	0x41615252
 8007394:	61417272 	.word	0x61417272

08007398 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	3b02      	subs	r3, #2
 80073a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	3b02      	subs	r3, #2
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d301      	bcc.n	80073b8 <clust2sect+0x20>
 80073b4:	2300      	movs	r3, #0
 80073b6:	e008      	b.n	80073ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	895b      	ldrh	r3, [r3, #10]
 80073bc:	461a      	mov	r2, r3
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	fb03 f202 	mul.w	r2, r3, r2
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c8:	4413      	add	r3, r2
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b086      	sub	sp, #24
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d904      	bls.n	80073f6 <get_fat+0x20>
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d302      	bcc.n	80073fc <get_fat+0x26>
		val = 1;	/* Internal error */
 80073f6:	2301      	movs	r3, #1
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	e0bb      	b.n	8007574 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80073fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007400:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b03      	cmp	r3, #3
 8007408:	f000 8083 	beq.w	8007512 <get_fat+0x13c>
 800740c:	2b03      	cmp	r3, #3
 800740e:	f300 80a7 	bgt.w	8007560 <get_fat+0x18a>
 8007412:	2b01      	cmp	r3, #1
 8007414:	d002      	beq.n	800741c <get_fat+0x46>
 8007416:	2b02      	cmp	r3, #2
 8007418:	d056      	beq.n	80074c8 <get_fat+0xf2>
 800741a:	e0a1      	b.n	8007560 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	899b      	ldrh	r3, [r3, #12]
 8007432:	4619      	mov	r1, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	fbb3 f3f1 	udiv	r3, r3, r1
 800743a:	4413      	add	r3, r2
 800743c:	4619      	mov	r1, r3
 800743e:	6938      	ldr	r0, [r7, #16]
 8007440:	f7ff ff0c 	bl	800725c <move_window>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	f040 808d 	bne.w	8007566 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	60fa      	str	r2, [r7, #12]
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	8992      	ldrh	r2, [r2, #12]
 8007456:	fbb3 f1f2 	udiv	r1, r3, r2
 800745a:	fb01 f202 	mul.w	r2, r1, r2
 800745e:	1a9b      	subs	r3, r3, r2
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	4413      	add	r3, r2
 8007464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007468:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	899b      	ldrh	r3, [r3, #12]
 8007472:	4619      	mov	r1, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	fbb3 f3f1 	udiv	r3, r3, r1
 800747a:	4413      	add	r3, r2
 800747c:	4619      	mov	r1, r3
 800747e:	6938      	ldr	r0, [r7, #16]
 8007480:	f7ff feec 	bl	800725c <move_window>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d16f      	bne.n	800756a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	899b      	ldrh	r3, [r3, #12]
 800748e:	461a      	mov	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	fbb3 f1f2 	udiv	r1, r3, r2
 8007496:	fb01 f202 	mul.w	r2, r1, r2
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4413      	add	r3, r2
 80074a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a4:	021b      	lsls	r3, r3, #8
 80074a6:	461a      	mov	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <get_fat+0xe8>
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	091b      	lsrs	r3, r3, #4
 80074bc:	e002      	b.n	80074c4 <get_fat+0xee>
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074c4:	617b      	str	r3, [r7, #20]
			break;
 80074c6:	e055      	b.n	8007574 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	899b      	ldrh	r3, [r3, #12]
 80074d0:	085b      	lsrs	r3, r3, #1
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	4619      	mov	r1, r3
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80074dc:	4413      	add	r3, r2
 80074de:	4619      	mov	r1, r3
 80074e0:	6938      	ldr	r0, [r7, #16]
 80074e2:	f7ff febb 	bl	800725c <move_window>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d140      	bne.n	800756e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	8992      	ldrh	r2, [r2, #12]
 80074fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80074fe:	fb00 f202 	mul.w	r2, r0, r2
 8007502:	1a9b      	subs	r3, r3, r2
 8007504:	440b      	add	r3, r1
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff fbc6 	bl	8006c98 <ld_word>
 800750c:	4603      	mov	r3, r0
 800750e:	617b      	str	r3, [r7, #20]
			break;
 8007510:	e030      	b.n	8007574 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	899b      	ldrh	r3, [r3, #12]
 800751a:	089b      	lsrs	r3, r3, #2
 800751c:	b29b      	uxth	r3, r3
 800751e:	4619      	mov	r1, r3
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	fbb3 f3f1 	udiv	r3, r3, r1
 8007526:	4413      	add	r3, r2
 8007528:	4619      	mov	r1, r3
 800752a:	6938      	ldr	r0, [r7, #16]
 800752c:	f7ff fe96 	bl	800725c <move_window>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d11d      	bne.n	8007572 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	8992      	ldrh	r2, [r2, #12]
 8007544:	fbb3 f0f2 	udiv	r0, r3, r2
 8007548:	fb00 f202 	mul.w	r2, r0, r2
 800754c:	1a9b      	subs	r3, r3, r2
 800754e:	440b      	add	r3, r1
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff fbb9 	bl	8006cc8 <ld_dword>
 8007556:	4603      	mov	r3, r0
 8007558:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800755c:	617b      	str	r3, [r7, #20]
			break;
 800755e:	e009      	b.n	8007574 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007560:	2301      	movs	r3, #1
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	e006      	b.n	8007574 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007566:	bf00      	nop
 8007568:	e004      	b.n	8007574 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800756a:	bf00      	nop
 800756c:	e002      	b.n	8007574 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800756e:	bf00      	nop
 8007570:	e000      	b.n	8007574 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007572:	bf00      	nop
		}
	}

	return val;
 8007574:	697b      	ldr	r3, [r7, #20]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800757e:	b590      	push	{r4, r7, lr}
 8007580:	b089      	sub	sp, #36	; 0x24
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800758a:	2302      	movs	r3, #2
 800758c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b01      	cmp	r3, #1
 8007592:	f240 8102 	bls.w	800779a <put_fat+0x21c>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	429a      	cmp	r2, r3
 800759e:	f080 80fc 	bcs.w	800779a <put_fat+0x21c>
		switch (fs->fs_type) {
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	f000 80b6 	beq.w	8007718 <put_fat+0x19a>
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	f300 80fd 	bgt.w	80077ac <put_fat+0x22e>
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d003      	beq.n	80075be <put_fat+0x40>
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	f000 8083 	beq.w	80076c2 <put_fat+0x144>
 80075bc:	e0f6      	b.n	80077ac <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	61bb      	str	r3, [r7, #24]
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	085b      	lsrs	r3, r3, #1
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	4413      	add	r3, r2
 80075ca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	899b      	ldrh	r3, [r3, #12]
 80075d4:	4619      	mov	r1, r3
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80075dc:	4413      	add	r3, r2
 80075de:	4619      	mov	r1, r3
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f7ff fe3b 	bl	800725c <move_window>
 80075e6:	4603      	mov	r3, r0
 80075e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075ea:	7ffb      	ldrb	r3, [r7, #31]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f040 80d6 	bne.w	800779e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	61ba      	str	r2, [r7, #24]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	8992      	ldrh	r2, [r2, #12]
 8007602:	fbb3 f0f2 	udiv	r0, r3, r2
 8007606:	fb00 f202 	mul.w	r2, r0, r2
 800760a:	1a9b      	subs	r3, r3, r2
 800760c:	440b      	add	r3, r1
 800760e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00d      	beq.n	8007636 <put_fat+0xb8>
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	b25b      	sxtb	r3, r3
 8007620:	f003 030f 	and.w	r3, r3, #15
 8007624:	b25a      	sxtb	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	b25b      	sxtb	r3, r3
 800762e:	4313      	orrs	r3, r2
 8007630:	b25b      	sxtb	r3, r3
 8007632:	b2db      	uxtb	r3, r3
 8007634:	e001      	b.n	800763a <put_fat+0xbc>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2201      	movs	r2, #1
 8007642:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	899b      	ldrh	r3, [r3, #12]
 800764c:	4619      	mov	r1, r3
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	fbb3 f3f1 	udiv	r3, r3, r1
 8007654:	4413      	add	r3, r2
 8007656:	4619      	mov	r1, r3
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7ff fdff 	bl	800725c <move_window>
 800765e:	4603      	mov	r3, r0
 8007660:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007662:	7ffb      	ldrb	r3, [r7, #31]
 8007664:	2b00      	cmp	r3, #0
 8007666:	f040 809c 	bne.w	80077a2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	899b      	ldrh	r3, [r3, #12]
 8007674:	461a      	mov	r2, r3
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	fbb3 f0f2 	udiv	r0, r3, r2
 800767c:	fb00 f202 	mul.w	r2, r0, r2
 8007680:	1a9b      	subs	r3, r3, r2
 8007682:	440b      	add	r3, r1
 8007684:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <put_fat+0x11a>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	091b      	lsrs	r3, r3, #4
 8007694:	b2db      	uxtb	r3, r3
 8007696:	e00e      	b.n	80076b6 <put_fat+0x138>
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b25b      	sxtb	r3, r3
 800769e:	f023 030f 	bic.w	r3, r3, #15
 80076a2:	b25a      	sxtb	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	0a1b      	lsrs	r3, r3, #8
 80076a8:	b25b      	sxtb	r3, r3
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	b25b      	sxtb	r3, r3
 80076b0:	4313      	orrs	r3, r2
 80076b2:	b25b      	sxtb	r3, r3
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	70da      	strb	r2, [r3, #3]
			break;
 80076c0:	e074      	b.n	80077ac <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	899b      	ldrh	r3, [r3, #12]
 80076ca:	085b      	lsrs	r3, r3, #1
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	4619      	mov	r1, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80076d6:	4413      	add	r3, r2
 80076d8:	4619      	mov	r1, r3
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f7ff fdbe 	bl	800725c <move_window>
 80076e0:	4603      	mov	r3, r0
 80076e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076e4:	7ffb      	ldrb	r3, [r7, #31]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d15d      	bne.n	80077a6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	8992      	ldrh	r2, [r2, #12]
 80076f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80076fc:	fb00 f202 	mul.w	r2, r0, r2
 8007700:	1a9b      	subs	r3, r3, r2
 8007702:	440b      	add	r3, r1
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	b292      	uxth	r2, r2
 8007708:	4611      	mov	r1, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff faff 	bl	8006d0e <st_word>
			fs->wflag = 1;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2201      	movs	r2, #1
 8007714:	70da      	strb	r2, [r3, #3]
			break;
 8007716:	e049      	b.n	80077ac <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	899b      	ldrh	r3, [r3, #12]
 8007720:	089b      	lsrs	r3, r3, #2
 8007722:	b29b      	uxth	r3, r3
 8007724:	4619      	mov	r1, r3
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	fbb3 f3f1 	udiv	r3, r3, r1
 800772c:	4413      	add	r3, r2
 800772e:	4619      	mov	r1, r3
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f7ff fd93 	bl	800725c <move_window>
 8007736:	4603      	mov	r3, r0
 8007738:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800773a:	7ffb      	ldrb	r3, [r7, #31]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d134      	bne.n	80077aa <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	8992      	ldrh	r2, [r2, #12]
 8007754:	fbb3 f0f2 	udiv	r0, r3, r2
 8007758:	fb00 f202 	mul.w	r2, r0, r2
 800775c:	1a9b      	subs	r3, r3, r2
 800775e:	440b      	add	r3, r1
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff fab1 	bl	8006cc8 <ld_dword>
 8007766:	4603      	mov	r3, r0
 8007768:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800776c:	4323      	orrs	r3, r4
 800776e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	8992      	ldrh	r2, [r2, #12]
 800777e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007782:	fb00 f202 	mul.w	r2, r0, r2
 8007786:	1a9b      	subs	r3, r3, r2
 8007788:	440b      	add	r3, r1
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff fad9 	bl	8006d44 <st_dword>
			fs->wflag = 1;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	70da      	strb	r2, [r3, #3]
			break;
 8007798:	e008      	b.n	80077ac <put_fat+0x22e>
		}
	}
 800779a:	bf00      	nop
 800779c:	e006      	b.n	80077ac <put_fat+0x22e>
			if (res != FR_OK) break;
 800779e:	bf00      	nop
 80077a0:	e004      	b.n	80077ac <put_fat+0x22e>
			if (res != FR_OK) break;
 80077a2:	bf00      	nop
 80077a4:	e002      	b.n	80077ac <put_fat+0x22e>
			if (res != FR_OK) break;
 80077a6:	bf00      	nop
 80077a8:	e000      	b.n	80077ac <put_fat+0x22e>
			if (res != FR_OK) break;
 80077aa:	bf00      	nop
	return res;
 80077ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3724      	adds	r7, #36	; 0x24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd90      	pop	{r4, r7, pc}

080077b6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b088      	sub	sp, #32
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d904      	bls.n	80077dc <remove_chain+0x26>
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d301      	bcc.n	80077e0 <remove_chain+0x2a>
 80077dc:	2302      	movs	r3, #2
 80077de:	e04b      	b.n	8007878 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00c      	beq.n	8007800 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80077e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	69b8      	ldr	r0, [r7, #24]
 80077ee:	f7ff fec6 	bl	800757e <put_fat>
 80077f2:	4603      	mov	r3, r0
 80077f4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80077f6:	7ffb      	ldrb	r3, [r7, #31]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <remove_chain+0x4a>
 80077fc:	7ffb      	ldrb	r3, [r7, #31]
 80077fe:	e03b      	b.n	8007878 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007800:	68b9      	ldr	r1, [r7, #8]
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7ff fde7 	bl	80073d6 <get_fat>
 8007808:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d031      	beq.n	8007874 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d101      	bne.n	800781a <remove_chain+0x64>
 8007816:	2302      	movs	r3, #2
 8007818:	e02e      	b.n	8007878 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007820:	d101      	bne.n	8007826 <remove_chain+0x70>
 8007822:	2301      	movs	r3, #1
 8007824:	e028      	b.n	8007878 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007826:	2200      	movs	r2, #0
 8007828:	68b9      	ldr	r1, [r7, #8]
 800782a:	69b8      	ldr	r0, [r7, #24]
 800782c:	f7ff fea7 	bl	800757e <put_fat>
 8007830:	4603      	mov	r3, r0
 8007832:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007834:	7ffb      	ldrb	r3, [r7, #31]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <remove_chain+0x88>
 800783a:	7ffb      	ldrb	r3, [r7, #31]
 800783c:	e01c      	b.n	8007878 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	69da      	ldr	r2, [r3, #28]
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	3b02      	subs	r3, #2
 8007848:	429a      	cmp	r2, r3
 800784a:	d20b      	bcs.n	8007864 <remove_chain+0xae>
			fs->free_clst++;
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	69db      	ldr	r3, [r3, #28]
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	791b      	ldrb	r3, [r3, #4]
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	b2da      	uxtb	r2, r3
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	429a      	cmp	r2, r3
 8007870:	d3c6      	bcc.n	8007800 <remove_chain+0x4a>
 8007872:	e000      	b.n	8007876 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007874:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3720      	adds	r7, #32
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10d      	bne.n	80078b2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d004      	beq.n	80078ac <create_chain+0x2c>
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d31b      	bcc.n	80078e4 <create_chain+0x64>
 80078ac:	2301      	movs	r3, #1
 80078ae:	61bb      	str	r3, [r7, #24]
 80078b0:	e018      	b.n	80078e4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff fd8e 	bl	80073d6 <get_fat>
 80078ba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d801      	bhi.n	80078c6 <create_chain+0x46>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e070      	b.n	80079a8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078cc:	d101      	bne.n	80078d2 <create_chain+0x52>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	e06a      	b.n	80079a8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d201      	bcs.n	80078e0 <create_chain+0x60>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	e063      	b.n	80079a8 <create_chain+0x128>
		scl = clst;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	3301      	adds	r3, #1
 80078ec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	69fa      	ldr	r2, [r7, #28]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d307      	bcc.n	8007908 <create_chain+0x88>
				ncl = 2;
 80078f8:	2302      	movs	r3, #2
 80078fa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80078fc:	69fa      	ldr	r2, [r7, #28]
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	429a      	cmp	r2, r3
 8007902:	d901      	bls.n	8007908 <create_chain+0x88>
 8007904:	2300      	movs	r3, #0
 8007906:	e04f      	b.n	80079a8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007908:	69f9      	ldr	r1, [r7, #28]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff fd63 	bl	80073d6 <get_fat>
 8007910:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00e      	beq.n	8007936 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d003      	beq.n	8007926 <create_chain+0xa6>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007924:	d101      	bne.n	800792a <create_chain+0xaa>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	e03e      	b.n	80079a8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	429a      	cmp	r2, r3
 8007930:	d1da      	bne.n	80078e8 <create_chain+0x68>
 8007932:	2300      	movs	r3, #0
 8007934:	e038      	b.n	80079a8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007936:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800793c:	69f9      	ldr	r1, [r7, #28]
 800793e:	6938      	ldr	r0, [r7, #16]
 8007940:	f7ff fe1d 	bl	800757e <put_fat>
 8007944:	4603      	mov	r3, r0
 8007946:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <create_chain+0xe2>
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d006      	beq.n	8007962 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6938      	ldr	r0, [r7, #16]
 800795a:	f7ff fe10 	bl	800757e <put_fat>
 800795e:	4603      	mov	r3, r0
 8007960:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d116      	bne.n	8007996 <create_chain+0x116>
		fs->last_clst = ncl;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	69da      	ldr	r2, [r3, #28]
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	3b02      	subs	r3, #2
 8007978:	429a      	cmp	r2, r3
 800797a:	d804      	bhi.n	8007986 <create_chain+0x106>
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	1e5a      	subs	r2, r3, #1
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	791b      	ldrb	r3, [r3, #4]
 800798a:	f043 0301 	orr.w	r3, r3, #1
 800798e:	b2da      	uxtb	r2, r3
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	711a      	strb	r2, [r3, #4]
 8007994:	e007      	b.n	80079a6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d102      	bne.n	80079a2 <create_chain+0x122>
 800799c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079a0:	e000      	b.n	80079a4 <create_chain+0x124>
 80079a2:	2301      	movs	r3, #1
 80079a4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80079a6:	69fb      	ldr	r3, [r7, #28]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3720      	adds	r7, #32
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	3304      	adds	r3, #4
 80079c6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	899b      	ldrh	r3, [r3, #12]
 80079cc:	461a      	mov	r2, r3
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	8952      	ldrh	r2, [r2, #10]
 80079d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80079dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	1d1a      	adds	r2, r3, #4
 80079e2:	613a      	str	r2, [r7, #16]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <clmt_clust+0x42>
 80079ee:	2300      	movs	r3, #0
 80079f0:	e010      	b.n	8007a14 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d307      	bcc.n	8007a0a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	3304      	adds	r3, #4
 8007a06:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a08:	e7e9      	b.n	80079de <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007a0a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	4413      	add	r3, r2
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	371c      	adds	r7, #28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a36:	d204      	bcs.n	8007a42 <dir_sdi+0x22>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f003 031f 	and.w	r3, r3, #31
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007a42:	2302      	movs	r3, #2
 8007a44:	e071      	b.n	8007b2a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d106      	bne.n	8007a66 <dir_sdi+0x46>
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d902      	bls.n	8007a66 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a64:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10c      	bne.n	8007a86 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	8912      	ldrh	r2, [r2, #8]
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d301      	bcc.n	8007a7c <dir_sdi+0x5c>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e056      	b.n	8007b2a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	61da      	str	r2, [r3, #28]
 8007a84:	e02d      	b.n	8007ae2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	895b      	ldrh	r3, [r3, #10]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	899b      	ldrh	r3, [r3, #12]
 8007a90:	fb02 f303 	mul.w	r3, r2, r3
 8007a94:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a96:	e019      	b.n	8007acc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6979      	ldr	r1, [r7, #20]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff fc9a 	bl	80073d6 <get_fat>
 8007aa2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aaa:	d101      	bne.n	8007ab0 <dir_sdi+0x90>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e03c      	b.n	8007b2a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d904      	bls.n	8007ac0 <dir_sdi+0xa0>
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d301      	bcc.n	8007ac4 <dir_sdi+0xa4>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e032      	b.n	8007b2a <dir_sdi+0x10a>
			ofs -= csz;
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d2e1      	bcs.n	8007a98 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007ad4:	6979      	ldr	r1, [r7, #20]
 8007ad6:	6938      	ldr	r0, [r7, #16]
 8007ad8:	f7ff fc5e 	bl	8007398 <clust2sect>
 8007adc:	4602      	mov	r2, r0
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	69db      	ldr	r3, [r3, #28]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <dir_sdi+0xd4>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e01a      	b.n	8007b2a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	69da      	ldr	r2, [r3, #28]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	899b      	ldrh	r3, [r3, #12]
 8007afc:	4619      	mov	r1, r3
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b04:	441a      	add	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	899b      	ldrh	r3, [r3, #12]
 8007b14:	461a      	mov	r2, r3
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b1c:	fb00 f202 	mul.w	r2, r0, r2
 8007b20:	1a9b      	subs	r3, r3, r2
 8007b22:	18ca      	adds	r2, r1, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b086      	sub	sp, #24
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	3320      	adds	r3, #32
 8007b48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <dir_next+0x28>
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b58:	d301      	bcc.n	8007b5e <dir_next+0x2c>
 8007b5a:	2304      	movs	r3, #4
 8007b5c:	e0bb      	b.n	8007cd6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	899b      	ldrh	r3, [r3, #12]
 8007b62:	461a      	mov	r2, r3
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b6a:	fb01 f202 	mul.w	r2, r1, r2
 8007b6e:	1a9b      	subs	r3, r3, r2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f040 809d 	bne.w	8007cb0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	1c5a      	adds	r2, r3, #1
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10b      	bne.n	8007ba0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	8912      	ldrh	r2, [r2, #8]
 8007b90:	4293      	cmp	r3, r2
 8007b92:	f0c0 808d 	bcc.w	8007cb0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	61da      	str	r2, [r3, #28]
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	e09a      	b.n	8007cd6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	899b      	ldrh	r3, [r3, #12]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	8952      	ldrh	r2, [r2, #10]
 8007bb0:	3a01      	subs	r2, #1
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d17b      	bne.n	8007cb0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	f7ff fc08 	bl	80073d6 <get_fat>
 8007bc6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d801      	bhi.n	8007bd2 <dir_next+0xa0>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	e081      	b.n	8007cd6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bd8:	d101      	bne.n	8007bde <dir_next+0xac>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e07b      	b.n	8007cd6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d359      	bcc.n	8007c9c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d104      	bne.n	8007bf8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	61da      	str	r2, [r3, #28]
 8007bf4:	2304      	movs	r3, #4
 8007bf6:	e06e      	b.n	8007cd6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4610      	mov	r0, r2
 8007c02:	f7ff fe3d 	bl	8007880 <create_chain>
 8007c06:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <dir_next+0xe0>
 8007c0e:	2307      	movs	r3, #7
 8007c10:	e061      	b.n	8007cd6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <dir_next+0xea>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e05c      	b.n	8007cd6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c22:	d101      	bne.n	8007c28 <dir_next+0xf6>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e056      	b.n	8007cd6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7ff fad3 	bl	80071d4 <sync_window>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <dir_next+0x106>
 8007c34:	2301      	movs	r3, #1
 8007c36:	e04e      	b.n	8007cd6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	899b      	ldrh	r3, [r3, #12]
 8007c42:	461a      	mov	r2, r3
 8007c44:	2100      	movs	r1, #0
 8007c46:	f7ff f8ca 	bl	8006dde <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	613b      	str	r3, [r7, #16]
 8007c4e:	6979      	ldr	r1, [r7, #20]
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f7ff fba1 	bl	8007398 <clust2sect>
 8007c56:	4602      	mov	r2, r0
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8007c5c:	e012      	b.n	8007c84 <dir_next+0x152>
						fs->wflag = 1;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2201      	movs	r2, #1
 8007c62:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7ff fab5 	bl	80071d4 <sync_window>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <dir_next+0x142>
 8007c70:	2301      	movs	r3, #1
 8007c72:	e030      	b.n	8007cd6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	3301      	adds	r3, #1
 8007c78:	613b      	str	r3, [r7, #16]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	895b      	ldrh	r3, [r3, #10]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d3e6      	bcc.n	8007c5e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	1ad2      	subs	r2, r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007ca2:	6979      	ldr	r1, [r7, #20]
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f7ff fb77 	bl	8007398 <clust2sect>
 8007caa:	4602      	mov	r2, r0
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	899b      	ldrh	r3, [r3, #12]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cc8:	fb00 f202 	mul.w	r2, r0, r2
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	18ca      	adds	r2, r1, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b086      	sub	sp, #24
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007cee:	2100      	movs	r1, #0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff fe95 	bl	8007a20 <dir_sdi>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d12b      	bne.n	8007d58 <dir_alloc+0x7a>
		n = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7ff faa6 	bl	800725c <move_window>
 8007d10:	4603      	mov	r3, r0
 8007d12:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d11d      	bne.n	8007d56 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2be5      	cmp	r3, #229	; 0xe5
 8007d22:	d004      	beq.n	8007d2e <dir_alloc+0x50>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d107      	bne.n	8007d3e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	3301      	adds	r3, #1
 8007d32:	613b      	str	r3, [r7, #16]
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d102      	bne.n	8007d42 <dir_alloc+0x64>
 8007d3c:	e00c      	b.n	8007d58 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007d3e:	2300      	movs	r3, #0
 8007d40:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007d42:	2101      	movs	r1, #1
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff fef4 	bl	8007b32 <dir_next>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0d7      	beq.n	8007d04 <dir_alloc+0x26>
 8007d54:	e000      	b.n	8007d58 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007d56:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d101      	bne.n	8007d62 <dir_alloc+0x84>
 8007d5e:	2307      	movs	r3, #7
 8007d60:	75fb      	strb	r3, [r7, #23]
	return res;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	331a      	adds	r3, #26
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe ff8c 	bl	8006c98 <ld_word>
 8007d80:	4603      	mov	r3, r0
 8007d82:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d109      	bne.n	8007da0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	3314      	adds	r3, #20
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe ff81 	bl	8006c98 <ld_word>
 8007d96:	4603      	mov	r3, r0
 8007d98:	041b      	lsls	r3, r3, #16
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007da0:	68fb      	ldr	r3, [r7, #12]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b084      	sub	sp, #16
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	60f8      	str	r0, [r7, #12]
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	331a      	adds	r3, #26
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	b292      	uxth	r2, r2
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fe ffa4 	bl	8006d0e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d109      	bne.n	8007de2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f103 0214 	add.w	r2, r3, #20
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	0c1b      	lsrs	r3, r3, #16
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f7fe ff96 	bl	8006d0e <st_word>
	}
}
 8007de2:	bf00      	nop
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007dec:	b590      	push	{r4, r7, lr}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	331a      	adds	r3, #26
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe ff4c 	bl	8006c98 <ld_word>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <cmp_lfn+0x1e>
 8007e06:	2300      	movs	r3, #0
 8007e08:	e059      	b.n	8007ebe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e12:	1e5a      	subs	r2, r3, #1
 8007e14:	4613      	mov	r3, r2
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007e20:	2301      	movs	r3, #1
 8007e22:	81fb      	strh	r3, [r7, #14]
 8007e24:	2300      	movs	r3, #0
 8007e26:	613b      	str	r3, [r7, #16]
 8007e28:	e033      	b.n	8007e92 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007e2a:	4a27      	ldr	r2, [pc, #156]	; (8007ec8 <cmp_lfn+0xdc>)
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	4413      	add	r3, r2
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	4413      	add	r3, r2
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fe ff2d 	bl	8006c98 <ld_word>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007e42:	89fb      	ldrh	r3, [r7, #14]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d01a      	beq.n	8007e7e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	2bfe      	cmp	r3, #254	; 0xfe
 8007e4c:	d812      	bhi.n	8007e74 <cmp_lfn+0x88>
 8007e4e:	89bb      	ldrh	r3, [r7, #12]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f001 febf 	bl	8009bd4 <ff_wtoupper>
 8007e56:	4603      	mov	r3, r0
 8007e58:	461c      	mov	r4, r3
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	617a      	str	r2, [r7, #20]
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	4413      	add	r3, r2
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f001 feb3 	bl	8009bd4 <ff_wtoupper>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	429c      	cmp	r4, r3
 8007e72:	d001      	beq.n	8007e78 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007e74:	2300      	movs	r3, #0
 8007e76:	e022      	b.n	8007ebe <cmp_lfn+0xd2>
			}
			wc = uc;
 8007e78:	89bb      	ldrh	r3, [r7, #12]
 8007e7a:	81fb      	strh	r3, [r7, #14]
 8007e7c:	e006      	b.n	8007e8c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007e7e:	89bb      	ldrh	r3, [r7, #12]
 8007e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d001      	beq.n	8007e8c <cmp_lfn+0xa0>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	e018      	b.n	8007ebe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	613b      	str	r3, [r7, #16]
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2b0c      	cmp	r3, #12
 8007e96:	d9c8      	bls.n	8007e2a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <cmp_lfn+0xd0>
 8007ea4:	89fb      	ldrh	r3, [r7, #14]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d008      	beq.n	8007ebc <cmp_lfn+0xd0>
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <cmp_lfn+0xd0>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e000      	b.n	8007ebe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007ebc:	2301      	movs	r3, #1
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	371c      	adds	r7, #28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd90      	pop	{r4, r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	0800f454 	.word	0x0800f454

08007ecc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	461a      	mov	r2, r3
 8007eda:	460b      	mov	r3, r1
 8007edc:	71fb      	strb	r3, [r7, #7]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	330d      	adds	r3, #13
 8007ee6:	79ba      	ldrb	r2, [r7, #6]
 8007ee8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	330b      	adds	r3, #11
 8007eee:	220f      	movs	r2, #15
 8007ef0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	330c      	adds	r3, #12
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	331a      	adds	r3, #26
 8007efe:	2100      	movs	r1, #0
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fe ff04 	bl	8006d0e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	1e5a      	subs	r2, r3, #1
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	4413      	add	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	82fb      	strh	r3, [r7, #22]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007f1e:	8afb      	ldrh	r3, [r7, #22]
 8007f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d007      	beq.n	8007f38 <put_lfn+0x6c>
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	61fa      	str	r2, [r7, #28]
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007f38:	4a17      	ldr	r2, [pc, #92]	; (8007f98 <put_lfn+0xcc>)
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	461a      	mov	r2, r3
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	4413      	add	r3, r2
 8007f46:	8afa      	ldrh	r2, [r7, #22]
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fedf 	bl	8006d0e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007f50:	8afb      	ldrh	r3, [r7, #22]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d102      	bne.n	8007f5c <put_lfn+0x90>
 8007f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f5a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	61bb      	str	r3, [r7, #24]
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	2b0c      	cmp	r3, #12
 8007f66:	d9da      	bls.n	8007f1e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007f68:	8afb      	ldrh	r3, [r7, #22]
 8007f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d006      	beq.n	8007f80 <put_lfn+0xb4>
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	4413      	add	r3, r2
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d103      	bne.n	8007f88 <put_lfn+0xbc>
 8007f80:	79fb      	ldrb	r3, [r7, #7]
 8007f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f86:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	79fa      	ldrb	r2, [r7, #7]
 8007f8c:	701a      	strb	r2, [r3, #0]
}
 8007f8e:	bf00      	nop
 8007f90:	3720      	adds	r7, #32
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	0800f454 	.word	0x0800f454

08007f9c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08c      	sub	sp, #48	; 0x30
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
 8007fa8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007faa:	220b      	movs	r2, #11
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f7fe fef4 	bl	8006d9c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2b05      	cmp	r3, #5
 8007fb8:	d92b      	bls.n	8008012 <gen_numname+0x76>
		sr = seq;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007fbe:	e022      	b.n	8008006 <gen_numname+0x6a>
			wc = *lfn++;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	1c9a      	adds	r2, r3, #2
 8007fc4:	607a      	str	r2, [r7, #4]
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8007fca:	2300      	movs	r3, #0
 8007fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fce:	e017      	b.n	8008000 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	005a      	lsls	r2, r3, #1
 8007fd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	4413      	add	r3, r2
 8007fdc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007fde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fe0:	085b      	lsrs	r3, r3, #1
 8007fe2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d005      	beq.n	8007ffa <gen_numname+0x5e>
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007ff4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007ff8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	2b0f      	cmp	r3, #15
 8008004:	d9e4      	bls.n	8007fd0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1d8      	bne.n	8007fc0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008012:	2307      	movs	r3, #7
 8008014:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	b2db      	uxtb	r3, r3
 800801a:	f003 030f 	and.w	r3, r3, #15
 800801e:	b2db      	uxtb	r3, r3
 8008020:	3330      	adds	r3, #48	; 0x30
 8008022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800802a:	2b39      	cmp	r3, #57	; 0x39
 800802c:	d904      	bls.n	8008038 <gen_numname+0x9c>
 800802e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008032:	3307      	adds	r3, #7
 8008034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	1e5a      	subs	r2, r3, #1
 800803c:	62ba      	str	r2, [r7, #40]	; 0x28
 800803e:	3330      	adds	r3, #48	; 0x30
 8008040:	443b      	add	r3, r7
 8008042:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008046:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	091b      	lsrs	r3, r3, #4
 800804e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1df      	bne.n	8008016 <gen_numname+0x7a>
	ns[i] = '~';
 8008056:	f107 0214 	add.w	r2, r7, #20
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	4413      	add	r3, r2
 800805e:	227e      	movs	r2, #126	; 0x7e
 8008060:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008062:	2300      	movs	r3, #0
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
 8008066:	e002      	b.n	800806e <gen_numname+0xd2>
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	3301      	adds	r3, #1
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
 800806e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	429a      	cmp	r2, r3
 8008074:	d205      	bcs.n	8008082 <gen_numname+0xe6>
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	4413      	add	r3, r2
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	2b20      	cmp	r3, #32
 8008080:	d1f2      	bne.n	8008068 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008084:	2b07      	cmp	r3, #7
 8008086:	d807      	bhi.n	8008098 <gen_numname+0xfc>
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	62ba      	str	r2, [r7, #40]	; 0x28
 800808e:	3330      	adds	r3, #48	; 0x30
 8008090:	443b      	add	r3, r7
 8008092:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008096:	e000      	b.n	800809a <gen_numname+0xfe>
 8008098:	2120      	movs	r1, #32
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	627a      	str	r2, [r7, #36]	; 0x24
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	4413      	add	r3, r2
 80080a4:	460a      	mov	r2, r1
 80080a6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	2b07      	cmp	r3, #7
 80080ac:	d9e9      	bls.n	8008082 <gen_numname+0xe6>
}
 80080ae:	bf00      	nop
 80080b0:	bf00      	nop
 80080b2:	3730      	adds	r7, #48	; 0x30
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80080c4:	230b      	movs	r3, #11
 80080c6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	0852      	lsrs	r2, r2, #1
 80080ce:	01db      	lsls	r3, r3, #7
 80080d0:	4313      	orrs	r3, r2
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	1c59      	adds	r1, r3, #1
 80080d8:	6079      	str	r1, [r7, #4]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	4413      	add	r3, r2
 80080de:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	60bb      	str	r3, [r7, #8]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1ed      	bne.n	80080c8 <sum_sfn+0x10>
	return sum;
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b086      	sub	sp, #24
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008108:	2100      	movs	r1, #0
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7ff fc88 	bl	8007a20 <dir_sdi>
 8008110:	4603      	mov	r3, r0
 8008112:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008114:	7dfb      	ldrb	r3, [r7, #23]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <dir_find+0x24>
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	e0a9      	b.n	8008272 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800811e:	23ff      	movs	r3, #255	; 0xff
 8008120:	753b      	strb	r3, [r7, #20]
 8008122:	7d3b      	ldrb	r3, [r7, #20]
 8008124:	757b      	strb	r3, [r7, #21]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800812c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	4619      	mov	r1, r3
 8008134:	6938      	ldr	r0, [r7, #16]
 8008136:	f7ff f891 	bl	800725c <move_window>
 800813a:	4603      	mov	r3, r0
 800813c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	2b00      	cmp	r3, #0
 8008142:	f040 8090 	bne.w	8008266 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800814e:	7dbb      	ldrb	r3, [r7, #22]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <dir_find+0x60>
 8008154:	2304      	movs	r3, #4
 8008156:	75fb      	strb	r3, [r7, #23]
 8008158:	e08a      	b.n	8008270 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	330b      	adds	r3, #11
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008166:	73fb      	strb	r3, [r7, #15]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	7bfa      	ldrb	r2, [r7, #15]
 800816c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800816e:	7dbb      	ldrb	r3, [r7, #22]
 8008170:	2be5      	cmp	r3, #229	; 0xe5
 8008172:	d007      	beq.n	8008184 <dir_find+0x8a>
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	f003 0308 	and.w	r3, r3, #8
 800817a:	2b00      	cmp	r3, #0
 800817c:	d009      	beq.n	8008192 <dir_find+0x98>
 800817e:	7bfb      	ldrb	r3, [r7, #15]
 8008180:	2b0f      	cmp	r3, #15
 8008182:	d006      	beq.n	8008192 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008184:	23ff      	movs	r3, #255	; 0xff
 8008186:	757b      	strb	r3, [r7, #21]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800818e:	631a      	str	r2, [r3, #48]	; 0x30
 8008190:	e05e      	b.n	8008250 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	2b0f      	cmp	r3, #15
 8008196:	d136      	bne.n	8008206 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800819e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d154      	bne.n	8008250 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80081a6:	7dbb      	ldrb	r3, [r7, #22]
 80081a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00d      	beq.n	80081cc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	7b5b      	ldrb	r3, [r3, #13]
 80081b6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80081b8:	7dbb      	ldrb	r3, [r7, #22]
 80081ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081be:	75bb      	strb	r3, [r7, #22]
 80081c0:	7dbb      	ldrb	r3, [r7, #22]
 80081c2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	695a      	ldr	r2, [r3, #20]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80081cc:	7dba      	ldrb	r2, [r7, #22]
 80081ce:	7d7b      	ldrb	r3, [r7, #21]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d115      	bne.n	8008200 <dir_find+0x106>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	330d      	adds	r3, #13
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	7d3a      	ldrb	r2, [r7, #20]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d10e      	bne.n	8008200 <dir_find+0x106>
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	691a      	ldr	r2, [r3, #16]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	4619      	mov	r1, r3
 80081ec:	4610      	mov	r0, r2
 80081ee:	f7ff fdfd 	bl	8007dec <cmp_lfn>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <dir_find+0x106>
 80081f8:	7d7b      	ldrb	r3, [r7, #21]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	e000      	b.n	8008202 <dir_find+0x108>
 8008200:	23ff      	movs	r3, #255	; 0xff
 8008202:	757b      	strb	r3, [r7, #21]
 8008204:	e024      	b.n	8008250 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008206:	7d7b      	ldrb	r3, [r7, #21]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d109      	bne.n	8008220 <dir_find+0x126>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a1b      	ldr	r3, [r3, #32]
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff ff51 	bl	80080b8 <sum_sfn>
 8008216:	4603      	mov	r3, r0
 8008218:	461a      	mov	r2, r3
 800821a:	7d3b      	ldrb	r3, [r7, #20]
 800821c:	4293      	cmp	r3, r2
 800821e:	d024      	beq.n	800826a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10a      	bne.n	8008244 <dir_find+0x14a>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a18      	ldr	r0, [r3, #32]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	3324      	adds	r3, #36	; 0x24
 8008236:	220b      	movs	r2, #11
 8008238:	4619      	mov	r1, r3
 800823a:	f7fe fdeb 	bl	8006e14 <mem_cmp>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d014      	beq.n	800826e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008244:	23ff      	movs	r3, #255	; 0xff
 8008246:	757b      	strb	r3, [r7, #21]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800824e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008250:	2100      	movs	r1, #0
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff fc6d 	bl	8007b32 <dir_next>
 8008258:	4603      	mov	r3, r0
 800825a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800825c:	7dfb      	ldrb	r3, [r7, #23]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f43f af65 	beq.w	800812e <dir_find+0x34>
 8008264:	e004      	b.n	8008270 <dir_find+0x176>
		if (res != FR_OK) break;
 8008266:	bf00      	nop
 8008268:	e002      	b.n	8008270 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800826a:	bf00      	nop
 800826c:	e000      	b.n	8008270 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800826e:	bf00      	nop

	return res;
 8008270:	7dfb      	ldrb	r3, [r7, #23]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
	...

0800827c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08c      	sub	sp, #48	; 0x30
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008290:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <dir_register+0x20>
 8008298:	2306      	movs	r3, #6
 800829a:	e0e0      	b.n	800845e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800829c:	2300      	movs	r3, #0
 800829e:	627b      	str	r3, [r7, #36]	; 0x24
 80082a0:	e002      	b.n	80082a8 <dir_register+0x2c>
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	3301      	adds	r3, #1
 80082a6:	627b      	str	r3, [r7, #36]	; 0x24
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	691a      	ldr	r2, [r3, #16]
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	4413      	add	r3, r2
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1f4      	bne.n	80082a2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80082be:	f107 030c 	add.w	r3, r7, #12
 80082c2:	220c      	movs	r2, #12
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe fd69 	bl	8006d9c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d032      	beq.n	800833a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2240      	movs	r2, #64	; 0x40
 80082d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80082dc:	2301      	movs	r3, #1
 80082de:	62bb      	str	r3, [r7, #40]	; 0x28
 80082e0:	e016      	b.n	8008310 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	691a      	ldr	r2, [r3, #16]
 80082ec:	f107 010c 	add.w	r1, r7, #12
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	f7ff fe53 	bl	8007f9c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff feff 	bl	80080fa <dir_find>
 80082fc:	4603      	mov	r3, r0
 80082fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008306:	2b00      	cmp	r3, #0
 8008308:	d106      	bne.n	8008318 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	3301      	adds	r3, #1
 800830e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	2b63      	cmp	r3, #99	; 0x63
 8008314:	d9e5      	bls.n	80082e2 <dir_register+0x66>
 8008316:	e000      	b.n	800831a <dir_register+0x9e>
			if (res != FR_OK) break;
 8008318:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831c:	2b64      	cmp	r3, #100	; 0x64
 800831e:	d101      	bne.n	8008324 <dir_register+0xa8>
 8008320:	2307      	movs	r3, #7
 8008322:	e09c      	b.n	800845e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008328:	2b04      	cmp	r3, #4
 800832a:	d002      	beq.n	8008332 <dir_register+0xb6>
 800832c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008330:	e095      	b.n	800845e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008332:	7dfa      	ldrb	r2, [r7, #23]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800833a:	7dfb      	ldrb	r3, [r7, #23]
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	2b00      	cmp	r3, #0
 8008342:	d007      	beq.n	8008354 <dir_register+0xd8>
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	330c      	adds	r3, #12
 8008348:	4a47      	ldr	r2, [pc, #284]	; (8008468 <dir_register+0x1ec>)
 800834a:	fba2 2303 	umull	r2, r3, r2, r3
 800834e:	089b      	lsrs	r3, r3, #2
 8008350:	3301      	adds	r3, #1
 8008352:	e000      	b.n	8008356 <dir_register+0xda>
 8008354:	2301      	movs	r3, #1
 8008356:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008358:	6a39      	ldr	r1, [r7, #32]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff fcbf 	bl	8007cde <dir_alloc>
 8008360:	4603      	mov	r3, r0
 8008362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800836a:	2b00      	cmp	r3, #0
 800836c:	d148      	bne.n	8008400 <dir_register+0x184>
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	3b01      	subs	r3, #1
 8008372:	623b      	str	r3, [r7, #32]
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d042      	beq.n	8008400 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	695a      	ldr	r2, [r3, #20]
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	015b      	lsls	r3, r3, #5
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff fb4a 	bl	8007a20 <dir_sdi>
 800838c:	4603      	mov	r3, r0
 800838e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008396:	2b00      	cmp	r3, #0
 8008398:	d132      	bne.n	8008400 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3324      	adds	r3, #36	; 0x24
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff fe8a 	bl	80080b8 <sum_sfn>
 80083a4:	4603      	mov	r3, r0
 80083a6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	4619      	mov	r1, r3
 80083ae:	69f8      	ldr	r0, [r7, #28]
 80083b0:	f7fe ff54 	bl	800725c <move_window>
 80083b4:	4603      	mov	r3, r0
 80083b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80083ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d11d      	bne.n	80083fe <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	6918      	ldr	r0, [r3, #16]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a19      	ldr	r1, [r3, #32]
 80083ca:	6a3b      	ldr	r3, [r7, #32]
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	7efb      	ldrb	r3, [r7, #27]
 80083d0:	f7ff fd7c 	bl	8007ecc <put_lfn>
				fs->wflag = 1;
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	2201      	movs	r2, #1
 80083d8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80083da:	2100      	movs	r1, #0
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff fba8 	bl	8007b32 <dir_next>
 80083e2:	4603      	mov	r3, r0
 80083e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80083e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d107      	bne.n	8008400 <dir_register+0x184>
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	623b      	str	r3, [r7, #32]
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1d5      	bne.n	80083a8 <dir_register+0x12c>
 80083fc:	e000      	b.n	8008400 <dir_register+0x184>
				if (res != FR_OK) break;
 80083fe:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008404:	2b00      	cmp	r3, #0
 8008406:	d128      	bne.n	800845a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	4619      	mov	r1, r3
 800840e:	69f8      	ldr	r0, [r7, #28]
 8008410:	f7fe ff24 	bl	800725c <move_window>
 8008414:	4603      	mov	r3, r0
 8008416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800841a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800841e:	2b00      	cmp	r3, #0
 8008420:	d11b      	bne.n	800845a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	2220      	movs	r2, #32
 8008428:	2100      	movs	r1, #0
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fcd7 	bl	8006dde <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a18      	ldr	r0, [r3, #32]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3324      	adds	r3, #36	; 0x24
 8008438:	220b      	movs	r2, #11
 800843a:	4619      	mov	r1, r3
 800843c:	f7fe fcae 	bl	8006d9c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	330c      	adds	r3, #12
 800844c:	f002 0218 	and.w	r2, r2, #24
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	2201      	movs	r2, #1
 8008458:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800845a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800845e:	4618      	mov	r0, r3
 8008460:	3730      	adds	r7, #48	; 0x30
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	4ec4ec4f 	.word	0x4ec4ec4f

0800846c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08a      	sub	sp, #40	; 0x28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	613b      	str	r3, [r7, #16]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	2300      	movs	r3, #0
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	1c5a      	adds	r2, r3, #1
 8008490:	61ba      	str	r2, [r7, #24]
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4413      	add	r3, r2
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800849a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800849c:	2b1f      	cmp	r3, #31
 800849e:	d940      	bls.n	8008522 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80084a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084a2:	2b2f      	cmp	r3, #47	; 0x2f
 80084a4:	d006      	beq.n	80084b4 <create_name+0x48>
 80084a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084a8:	2b5c      	cmp	r3, #92	; 0x5c
 80084aa:	d110      	bne.n	80084ce <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80084ac:	e002      	b.n	80084b4 <create_name+0x48>
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	3301      	adds	r3, #1
 80084b2:	61bb      	str	r3, [r7, #24]
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	4413      	add	r3, r2
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b2f      	cmp	r3, #47	; 0x2f
 80084be:	d0f6      	beq.n	80084ae <create_name+0x42>
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	4413      	add	r3, r2
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b5c      	cmp	r3, #92	; 0x5c
 80084ca:	d0f0      	beq.n	80084ae <create_name+0x42>
			break;
 80084cc:	e02a      	b.n	8008524 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2bfe      	cmp	r3, #254	; 0xfe
 80084d2:	d901      	bls.n	80084d8 <create_name+0x6c>
 80084d4:	2306      	movs	r3, #6
 80084d6:	e17d      	b.n	80087d4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80084d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80084de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084e0:	2101      	movs	r1, #1
 80084e2:	4618      	mov	r0, r3
 80084e4:	f001 fb3a 	bl	8009b5c <ff_convert>
 80084e8:	4603      	mov	r3, r0
 80084ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80084ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <create_name+0x8a>
 80084f2:	2306      	movs	r3, #6
 80084f4:	e16e      	b.n	80087d4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80084f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084f8:	2b7f      	cmp	r3, #127	; 0x7f
 80084fa:	d809      	bhi.n	8008510 <create_name+0xa4>
 80084fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084fe:	4619      	mov	r1, r3
 8008500:	488d      	ldr	r0, [pc, #564]	; (8008738 <create_name+0x2cc>)
 8008502:	f7fe fcae 	bl	8006e62 <chk_chr>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <create_name+0xa4>
 800850c:	2306      	movs	r3, #6
 800850e:	e161      	b.n	80087d4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	617a      	str	r2, [r7, #20]
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800851e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008520:	e7b4      	b.n	800848c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008522:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	441a      	add	r2, r3
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800852e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008530:	2b1f      	cmp	r3, #31
 8008532:	d801      	bhi.n	8008538 <create_name+0xcc>
 8008534:	2304      	movs	r3, #4
 8008536:	e000      	b.n	800853a <create_name+0xce>
 8008538:	2300      	movs	r3, #0
 800853a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800853e:	e011      	b.n	8008564 <create_name+0xf8>
		w = lfn[di - 1];
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008546:	3b01      	subs	r3, #1
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	4413      	add	r3, r2
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008554:	2b20      	cmp	r3, #32
 8008556:	d002      	beq.n	800855e <create_name+0xf2>
 8008558:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800855a:	2b2e      	cmp	r3, #46	; 0x2e
 800855c:	d106      	bne.n	800856c <create_name+0x100>
		di--;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	3b01      	subs	r3, #1
 8008562:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1ea      	bne.n	8008540 <create_name+0xd4>
 800856a:	e000      	b.n	800856e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800856c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	2200      	movs	r2, #0
 8008578:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <create_name+0x118>
 8008580:	2306      	movs	r3, #6
 8008582:	e127      	b.n	80087d4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3324      	adds	r3, #36	; 0x24
 8008588:	220b      	movs	r2, #11
 800858a:	2120      	movs	r1, #32
 800858c:	4618      	mov	r0, r3
 800858e:	f7fe fc26 	bl	8006dde <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008592:	2300      	movs	r3, #0
 8008594:	61bb      	str	r3, [r7, #24]
 8008596:	e002      	b.n	800859e <create_name+0x132>
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	3301      	adds	r3, #1
 800859c:	61bb      	str	r3, [r7, #24]
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4413      	add	r3, r2
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	2b20      	cmp	r3, #32
 80085aa:	d0f5      	beq.n	8008598 <create_name+0x12c>
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4413      	add	r3, r2
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	2b2e      	cmp	r3, #46	; 0x2e
 80085b8:	d0ee      	beq.n	8008598 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d009      	beq.n	80085d4 <create_name+0x168>
 80085c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085c4:	f043 0303 	orr.w	r3, r3, #3
 80085c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80085cc:	e002      	b.n	80085d4 <create_name+0x168>
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d009      	beq.n	80085ee <create_name+0x182>
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80085e0:	3b01      	subs	r3, #1
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4413      	add	r3, r2
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	2b2e      	cmp	r3, #46	; 0x2e
 80085ec:	d1ef      	bne.n	80085ce <create_name+0x162>

	i = b = 0; ni = 8;
 80085ee:	2300      	movs	r3, #0
 80085f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80085f4:	2300      	movs	r3, #0
 80085f6:	623b      	str	r3, [r7, #32]
 80085f8:	2308      	movs	r3, #8
 80085fa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	61ba      	str	r2, [r7, #24]
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4413      	add	r3, r2
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800860c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 8090 	beq.w	8008734 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008614:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008616:	2b20      	cmp	r3, #32
 8008618:	d006      	beq.n	8008628 <create_name+0x1bc>
 800861a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800861c:	2b2e      	cmp	r3, #46	; 0x2e
 800861e:	d10a      	bne.n	8008636 <create_name+0x1ca>
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	429a      	cmp	r2, r3
 8008626:	d006      	beq.n	8008636 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800862c:	f043 0303 	orr.w	r3, r3, #3
 8008630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008634:	e07d      	b.n	8008732 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008636:	6a3a      	ldr	r2, [r7, #32]
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	429a      	cmp	r2, r3
 800863c:	d203      	bcs.n	8008646 <create_name+0x1da>
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	429a      	cmp	r2, r3
 8008644:	d123      	bne.n	800868e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	2b0b      	cmp	r3, #11
 800864a:	d106      	bne.n	800865a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800864c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008650:	f043 0303 	orr.w	r3, r3, #3
 8008654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008658:	e075      	b.n	8008746 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	429a      	cmp	r2, r3
 8008660:	d005      	beq.n	800866e <create_name+0x202>
 8008662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008666:	f043 0303 	orr.w	r3, r3, #3
 800866a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	429a      	cmp	r2, r3
 8008674:	d866      	bhi.n	8008744 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	61bb      	str	r3, [r7, #24]
 800867a:	2308      	movs	r3, #8
 800867c:	623b      	str	r3, [r7, #32]
 800867e:	230b      	movs	r3, #11
 8008680:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008682:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800868c:	e051      	b.n	8008732 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800868e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008690:	2b7f      	cmp	r3, #127	; 0x7f
 8008692:	d914      	bls.n	80086be <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008694:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008696:	2100      	movs	r1, #0
 8008698:	4618      	mov	r0, r3
 800869a:	f001 fa5f 	bl	8009b5c <ff_convert>
 800869e:	4603      	mov	r3, r0
 80086a0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80086a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d004      	beq.n	80086b2 <create_name+0x246>
 80086a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086aa:	3b80      	subs	r3, #128	; 0x80
 80086ac:	4a23      	ldr	r2, [pc, #140]	; (800873c <create_name+0x2d0>)
 80086ae:	5cd3      	ldrb	r3, [r2, r3]
 80086b0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80086b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086b6:	f043 0302 	orr.w	r3, r3, #2
 80086ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80086be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d007      	beq.n	80086d4 <create_name+0x268>
 80086c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086c6:	4619      	mov	r1, r3
 80086c8:	481d      	ldr	r0, [pc, #116]	; (8008740 <create_name+0x2d4>)
 80086ca:	f7fe fbca 	bl	8006e62 <chk_chr>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d008      	beq.n	80086e6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80086d4:	235f      	movs	r3, #95	; 0x5f
 80086d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80086d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086dc:	f043 0303 	orr.w	r3, r3, #3
 80086e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80086e4:	e01b      	b.n	800871e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80086e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086e8:	2b40      	cmp	r3, #64	; 0x40
 80086ea:	d909      	bls.n	8008700 <create_name+0x294>
 80086ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086ee:	2b5a      	cmp	r3, #90	; 0x5a
 80086f0:	d806      	bhi.n	8008700 <create_name+0x294>
					b |= 2;
 80086f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086f6:	f043 0302 	orr.w	r3, r3, #2
 80086fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80086fe:	e00e      	b.n	800871e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008702:	2b60      	cmp	r3, #96	; 0x60
 8008704:	d90b      	bls.n	800871e <create_name+0x2b2>
 8008706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008708:	2b7a      	cmp	r3, #122	; 0x7a
 800870a:	d808      	bhi.n	800871e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800870c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008710:	f043 0301 	orr.w	r3, r3, #1
 8008714:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800871a:	3b20      	subs	r3, #32
 800871c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	623a      	str	r2, [r7, #32]
 8008724:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008726:	b2d1      	uxtb	r1, r2
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	4413      	add	r3, r2
 800872c:	460a      	mov	r2, r1
 800872e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008732:	e763      	b.n	80085fc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008734:	bf00      	nop
 8008736:	e006      	b.n	8008746 <create_name+0x2da>
 8008738:	0800f2e8 	.word	0x0800f2e8
 800873c:	0800f3d4 	.word	0x0800f3d4
 8008740:	0800f2f4 	.word	0x0800f2f4
			if (si > di) break;			/* No extension */
 8008744:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800874c:	2be5      	cmp	r3, #229	; 0xe5
 800874e:	d103      	bne.n	8008758 <create_name+0x2ec>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2205      	movs	r2, #5
 8008754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	2b08      	cmp	r3, #8
 800875c:	d104      	bne.n	8008768 <create_name+0x2fc>
 800875e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008768:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800876c:	f003 030c 	and.w	r3, r3, #12
 8008770:	2b0c      	cmp	r3, #12
 8008772:	d005      	beq.n	8008780 <create_name+0x314>
 8008774:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008778:	f003 0303 	and.w	r3, r3, #3
 800877c:	2b03      	cmp	r3, #3
 800877e:	d105      	bne.n	800878c <create_name+0x320>
 8008780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008784:	f043 0302 	orr.w	r3, r3, #2
 8008788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800878c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008790:	f003 0302 	and.w	r3, r3, #2
 8008794:	2b00      	cmp	r3, #0
 8008796:	d117      	bne.n	80087c8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008798:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800879c:	f003 0303 	and.w	r3, r3, #3
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d105      	bne.n	80087b0 <create_name+0x344>
 80087a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087a8:	f043 0310 	orr.w	r3, r3, #16
 80087ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80087b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80087b4:	f003 030c 	and.w	r3, r3, #12
 80087b8:	2b04      	cmp	r3, #4
 80087ba:	d105      	bne.n	80087c8 <create_name+0x35c>
 80087bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087c0:	f043 0308 	orr.w	r3, r3, #8
 80087c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80087ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80087d2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3728      	adds	r7, #40	; 0x28
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80087f0:	e002      	b.n	80087f8 <follow_path+0x1c>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	3301      	adds	r3, #1
 80087f6:	603b      	str	r3, [r7, #0]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b2f      	cmp	r3, #47	; 0x2f
 80087fe:	d0f8      	beq.n	80087f2 <follow_path+0x16>
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2b5c      	cmp	r3, #92	; 0x5c
 8008806:	d0f4      	beq.n	80087f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	2200      	movs	r2, #0
 800880c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b1f      	cmp	r3, #31
 8008814:	d80a      	bhi.n	800882c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2280      	movs	r2, #128	; 0x80
 800881a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800881e:	2100      	movs	r1, #0
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff f8fd 	bl	8007a20 <dir_sdi>
 8008826:	4603      	mov	r3, r0
 8008828:	75fb      	strb	r3, [r7, #23]
 800882a:	e048      	b.n	80088be <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800882c:	463b      	mov	r3, r7
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff fe1b 	bl	800846c <create_name>
 8008836:	4603      	mov	r3, r0
 8008838:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800883a:	7dfb      	ldrb	r3, [r7, #23]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d139      	bne.n	80088b4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff fc5a 	bl	80080fa <dir_find>
 8008846:	4603      	mov	r3, r0
 8008848:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008850:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00a      	beq.n	800886e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008858:	7dfb      	ldrb	r3, [r7, #23]
 800885a:	2b04      	cmp	r3, #4
 800885c:	d12c      	bne.n	80088b8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800885e:	7afb      	ldrb	r3, [r7, #11]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d127      	bne.n	80088b8 <follow_path+0xdc>
 8008868:	2305      	movs	r3, #5
 800886a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800886c:	e024      	b.n	80088b8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800886e:	7afb      	ldrb	r3, [r7, #11]
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	d121      	bne.n	80088bc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	799b      	ldrb	r3, [r3, #6]
 800887c:	f003 0310 	and.w	r3, r3, #16
 8008880:	2b00      	cmp	r3, #0
 8008882:	d102      	bne.n	800888a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008884:	2305      	movs	r3, #5
 8008886:	75fb      	strb	r3, [r7, #23]
 8008888:	e019      	b.n	80088be <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	8992      	ldrh	r2, [r2, #12]
 8008898:	fbb3 f0f2 	udiv	r0, r3, r2
 800889c:	fb00 f202 	mul.w	r2, r0, r2
 80088a0:	1a9b      	subs	r3, r3, r2
 80088a2:	440b      	add	r3, r1
 80088a4:	4619      	mov	r1, r3
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f7ff fa60 	bl	8007d6c <ld_clust>
 80088ac:	4602      	mov	r2, r0
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80088b2:	e7bb      	b.n	800882c <follow_path+0x50>
			if (res != FR_OK) break;
 80088b4:	bf00      	nop
 80088b6:	e002      	b.n	80088be <follow_path+0xe2>
				break;
 80088b8:	bf00      	nop
 80088ba:	e000      	b.n	80088be <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80088bc:	bf00      	nop
			}
		}
	}

	return res;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80088d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088d4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d031      	beq.n	8008942 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	e002      	b.n	80088ec <get_ldnumber+0x24>
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	3301      	adds	r3, #1
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b1f      	cmp	r3, #31
 80088f2:	d903      	bls.n	80088fc <get_ldnumber+0x34>
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2b3a      	cmp	r3, #58	; 0x3a
 80088fa:	d1f4      	bne.n	80088e6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b3a      	cmp	r3, #58	; 0x3a
 8008902:	d11c      	bne.n	800893e <get_ldnumber+0x76>
			tp = *path;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	60fa      	str	r2, [r7, #12]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	3b30      	subs	r3, #48	; 0x30
 8008914:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b09      	cmp	r3, #9
 800891a:	d80e      	bhi.n	800893a <get_ldnumber+0x72>
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	429a      	cmp	r2, r3
 8008922:	d10a      	bne.n	800893a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d107      	bne.n	800893a <get_ldnumber+0x72>
					vol = (int)i;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	3301      	adds	r3, #1
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	e002      	b.n	8008944 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800893e:	2300      	movs	r3, #0
 8008940:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008942:	693b      	ldr	r3, [r7, #16]
}
 8008944:	4618      	mov	r0, r3
 8008946:	371c      	adds	r7, #28
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	70da      	strb	r2, [r3, #3]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008966:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f7fe fc76 	bl	800725c <move_window>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <check_fs+0x2a>
 8008976:	2304      	movs	r3, #4
 8008978:	e038      	b.n	80089ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	333c      	adds	r3, #60	; 0x3c
 800897e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe f988 	bl	8006c98 <ld_word>
 8008988:	4603      	mov	r3, r0
 800898a:	461a      	mov	r2, r3
 800898c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008990:	429a      	cmp	r2, r3
 8008992:	d001      	beq.n	8008998 <check_fs+0x48>
 8008994:	2303      	movs	r3, #3
 8008996:	e029      	b.n	80089ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800899e:	2be9      	cmp	r3, #233	; 0xe9
 80089a0:	d009      	beq.n	80089b6 <check_fs+0x66>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089a8:	2beb      	cmp	r3, #235	; 0xeb
 80089aa:	d11e      	bne.n	80089ea <check_fs+0x9a>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089b2:	2b90      	cmp	r3, #144	; 0x90
 80089b4:	d119      	bne.n	80089ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	333c      	adds	r3, #60	; 0x3c
 80089ba:	3336      	adds	r3, #54	; 0x36
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fe f983 	bl	8006cc8 <ld_dword>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089c8:	4a0a      	ldr	r2, [pc, #40]	; (80089f4 <check_fs+0xa4>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d101      	bne.n	80089d2 <check_fs+0x82>
 80089ce:	2300      	movs	r3, #0
 80089d0:	e00c      	b.n	80089ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	333c      	adds	r3, #60	; 0x3c
 80089d6:	3352      	adds	r3, #82	; 0x52
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fe f975 	bl	8006cc8 <ld_dword>
 80089de:	4603      	mov	r3, r0
 80089e0:	4a05      	ldr	r2, [pc, #20]	; (80089f8 <check_fs+0xa8>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d101      	bne.n	80089ea <check_fs+0x9a>
 80089e6:	2300      	movs	r3, #0
 80089e8:	e000      	b.n	80089ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80089ea:	2302      	movs	r3, #2
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	00544146 	.word	0x00544146
 80089f8:	33544146 	.word	0x33544146

080089fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b096      	sub	sp, #88	; 0x58
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	4613      	mov	r3, r2
 8008a08:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f7ff ff59 	bl	80088c8 <get_ldnumber>
 8008a16:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	da01      	bge.n	8008a22 <find_volume+0x26>
 8008a1e:	230b      	movs	r3, #11
 8008a20:	e26a      	b.n	8008ef8 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008a22:	4aa3      	ldr	r2, [pc, #652]	; (8008cb0 <find_volume+0x2b4>)
 8008a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a2a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <find_volume+0x3a>
 8008a32:	230c      	movs	r3, #12
 8008a34:	e260      	b.n	8008ef8 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8008a36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a38:	f7fe fa2e 	bl	8006e98 <lock_fs>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <find_volume+0x4a>
 8008a42:	230f      	movs	r3, #15
 8008a44:	e258      	b.n	8008ef8 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008a4c:	79fb      	ldrb	r3, [r7, #7]
 8008a4e:	f023 0301 	bic.w	r3, r3, #1
 8008a52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d01a      	beq.n	8008a92 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5e:	785b      	ldrb	r3, [r3, #1]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fe f87b 	bl	8006b5c <disk_status>
 8008a66:	4603      	mov	r3, r0
 8008a68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008a6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10c      	bne.n	8008a92 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d007      	beq.n	8008a8e <find_volume+0x92>
 8008a7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a82:	f003 0304 	and.w	r3, r3, #4
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008a8a:	230a      	movs	r3, #10
 8008a8c:	e234      	b.n	8008ef8 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8008a8e:	2300      	movs	r3, #0
 8008a90:	e232      	b.n	8008ef8 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	2200      	movs	r2, #0
 8008a96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa2:	785b      	ldrb	r3, [r3, #1]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe f873 	bl	8006b90 <disk_initialize>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008ab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008abc:	2303      	movs	r3, #3
 8008abe:	e21b      	b.n	8008ef8 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008ac0:	79fb      	ldrb	r3, [r7, #7]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d007      	beq.n	8008ad6 <find_volume+0xda>
 8008ac6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008aca:	f003 0304 	and.w	r3, r3, #4
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008ad2:	230a      	movs	r3, #10
 8008ad4:	e210      	b.n	8008ef8 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	7858      	ldrb	r0, [r3, #1]
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	330c      	adds	r3, #12
 8008ade:	461a      	mov	r2, r3
 8008ae0:	2102      	movs	r1, #2
 8008ae2:	f7fe f8bb 	bl	8006c5c <disk_ioctl>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <find_volume+0xf4>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e203      	b.n	8008ef8 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	899b      	ldrh	r3, [r3, #12]
 8008af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af8:	d80d      	bhi.n	8008b16 <find_volume+0x11a>
 8008afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afc:	899b      	ldrh	r3, [r3, #12]
 8008afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b02:	d308      	bcc.n	8008b16 <find_volume+0x11a>
 8008b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b06:	899b      	ldrh	r3, [r3, #12]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0c:	899b      	ldrh	r3, [r3, #12]
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	4013      	ands	r3, r2
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <find_volume+0x11e>
 8008b16:	2301      	movs	r3, #1
 8008b18:	e1ee      	b.n	8008ef8 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008b1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b22:	f7ff ff15 	bl	8008950 <check_fs>
 8008b26:	4603      	mov	r3, r0
 8008b28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d149      	bne.n	8008bc8 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b34:	2300      	movs	r3, #0
 8008b36:	643b      	str	r3, [r7, #64]	; 0x40
 8008b38:	e01e      	b.n	8008b78 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008b48:	4413      	add	r3, r2
 8008b4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4e:	3304      	adds	r3, #4
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d006      	beq.n	8008b64 <find_volume+0x168>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	3308      	adds	r3, #8
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe f8b4 	bl	8006cc8 <ld_dword>
 8008b60:	4602      	mov	r2, r0
 8008b62:	e000      	b.n	8008b66 <find_volume+0x16a>
 8008b64:	2200      	movs	r2, #0
 8008b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	3358      	adds	r3, #88	; 0x58
 8008b6c:	443b      	add	r3, r7
 8008b6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b74:	3301      	adds	r3, #1
 8008b76:	643b      	str	r3, [r7, #64]	; 0x40
 8008b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d9dd      	bls.n	8008b3a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008b7e:	2300      	movs	r3, #0
 8008b80:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <find_volume+0x192>
 8008b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	3358      	adds	r3, #88	; 0x58
 8008b94:	443b      	add	r3, r7
 8008b96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008b9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <find_volume+0x1b2>
 8008ba2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ba4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ba6:	f7ff fed3 	bl	8008950 <check_fs>
 8008baa:	4603      	mov	r3, r0
 8008bac:	e000      	b.n	8008bb0 <find_volume+0x1b4>
 8008bae:	2303      	movs	r3, #3
 8008bb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008bb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d905      	bls.n	8008bc8 <find_volume+0x1cc>
 8008bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8008bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d9e2      	bls.n	8008b8e <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008bc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d101      	bne.n	8008bd4 <find_volume+0x1d8>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e191      	b.n	8008ef8 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008bd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d901      	bls.n	8008be0 <find_volume+0x1e4>
 8008bdc:	230d      	movs	r3, #13
 8008bde:	e18b      	b.n	8008ef8 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be2:	333c      	adds	r3, #60	; 0x3c
 8008be4:	330b      	adds	r3, #11
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe f856 	bl	8006c98 <ld_word>
 8008bec:	4603      	mov	r3, r0
 8008bee:	461a      	mov	r2, r3
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf2:	899b      	ldrh	r3, [r3, #12]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d001      	beq.n	8008bfc <find_volume+0x200>
 8008bf8:	230d      	movs	r3, #13
 8008bfa:	e17d      	b.n	8008ef8 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfe:	333c      	adds	r3, #60	; 0x3c
 8008c00:	3316      	adds	r3, #22
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe f848 	bl	8006c98 <ld_word>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d106      	bne.n	8008c20 <find_volume+0x224>
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	333c      	adds	r3, #60	; 0x3c
 8008c16:	3324      	adds	r3, #36	; 0x24
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fe f855 	bl	8006cc8 <ld_dword>
 8008c1e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c24:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c28:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	789b      	ldrb	r3, [r3, #2]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d005      	beq.n	8008c44 <find_volume+0x248>
 8008c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3a:	789b      	ldrb	r3, [r3, #2]
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d001      	beq.n	8008c44 <find_volume+0x248>
 8008c40:	230d      	movs	r3, #13
 8008c42:	e159      	b.n	8008ef8 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	789b      	ldrb	r3, [r3, #2]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c4c:	fb02 f303 	mul.w	r3, r2, r3
 8008c50:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c60:	895b      	ldrh	r3, [r3, #10]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d008      	beq.n	8008c78 <find_volume+0x27c>
 8008c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c68:	895b      	ldrh	r3, [r3, #10]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6e:	895b      	ldrh	r3, [r3, #10]
 8008c70:	3b01      	subs	r3, #1
 8008c72:	4013      	ands	r3, r2
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <find_volume+0x280>
 8008c78:	230d      	movs	r3, #13
 8008c7a:	e13d      	b.n	8008ef8 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7e:	333c      	adds	r3, #60	; 0x3c
 8008c80:	3311      	adds	r3, #17
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe f808 	bl	8006c98 <ld_word>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	891b      	ldrh	r3, [r3, #8]
 8008c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c96:	8992      	ldrh	r2, [r2, #12]
 8008c98:	0952      	lsrs	r2, r2, #5
 8008c9a:	b292      	uxth	r2, r2
 8008c9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ca0:	fb01 f202 	mul.w	r2, r1, r2
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <find_volume+0x2b8>
 8008cac:	230d      	movs	r3, #13
 8008cae:	e123      	b.n	8008ef8 <find_volume+0x4fc>
 8008cb0:	20005cf8 	.word	0x20005cf8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	333c      	adds	r3, #60	; 0x3c
 8008cb8:	3313      	adds	r3, #19
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fd ffec 	bl	8006c98 <ld_word>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d106      	bne.n	8008cd8 <find_volume+0x2dc>
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	333c      	adds	r3, #60	; 0x3c
 8008cce:	3320      	adds	r3, #32
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fd fff9 	bl	8006cc8 <ld_dword>
 8008cd6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cda:	333c      	adds	r3, #60	; 0x3c
 8008cdc:	330e      	adds	r3, #14
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fd ffda 	bl	8006c98 <ld_word>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008ce8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <find_volume+0x2f6>
 8008cee:	230d      	movs	r3, #13
 8008cf0:	e102      	b.n	8008ef8 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008cf2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf6:	4413      	add	r3, r2
 8008cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cfa:	8911      	ldrh	r1, [r2, #8]
 8008cfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cfe:	8992      	ldrh	r2, [r2, #12]
 8008d00:	0952      	lsrs	r2, r2, #5
 8008d02:	b292      	uxth	r2, r2
 8008d04:	fbb1 f2f2 	udiv	r2, r1, r2
 8008d08:	b292      	uxth	r2, r2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d201      	bcs.n	8008d1a <find_volume+0x31e>
 8008d16:	230d      	movs	r3, #13
 8008d18:	e0ee      	b.n	8008ef8 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d22:	8952      	ldrh	r2, [r2, #10]
 8008d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d28:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <find_volume+0x338>
 8008d30:	230d      	movs	r3, #13
 8008d32:	e0e1      	b.n	8008ef8 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8008d34:	2303      	movs	r3, #3
 8008d36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d802      	bhi.n	8008d4a <find_volume+0x34e>
 8008d44:	2302      	movs	r3, #2
 8008d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d802      	bhi.n	8008d5a <find_volume+0x35e>
 8008d54:	2301      	movs	r3, #1
 8008d56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	1c9a      	adds	r2, r3, #2
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d66:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008d68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d6c:	441a      	add	r2, r3
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8008d72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d76:	441a      	add	r2, r3
 8008d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7a:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8008d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d11e      	bne.n	8008dc2 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d86:	333c      	adds	r3, #60	; 0x3c
 8008d88:	332a      	adds	r3, #42	; 0x2a
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fd ff84 	bl	8006c98 <ld_word>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <find_volume+0x39e>
 8008d96:	230d      	movs	r3, #13
 8008d98:	e0ae      	b.n	8008ef8 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	891b      	ldrh	r3, [r3, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <find_volume+0x3aa>
 8008da2:	230d      	movs	r3, #13
 8008da4:	e0a8      	b.n	8008ef8 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da8:	333c      	adds	r3, #60	; 0x3c
 8008daa:	332c      	adds	r3, #44	; 0x2c
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fd ff8b 	bl	8006cc8 <ld_dword>
 8008db2:	4602      	mov	r2, r0
 8008db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db6:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8008dc0:	e01f      	b.n	8008e02 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	891b      	ldrh	r3, [r3, #8]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <find_volume+0x3d2>
 8008dca:	230d      	movs	r3, #13
 8008dcc:	e094      	b.n	8008ef8 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd4:	441a      	add	r2, r3
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008dda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d103      	bne.n	8008dea <find_volume+0x3ee>
 8008de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	005b      	lsls	r3, r3, #1
 8008de8:	e00a      	b.n	8008e00 <find_volume+0x404>
 8008dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dec:	6a1a      	ldr	r2, [r3, #32]
 8008dee:	4613      	mov	r3, r2
 8008df0:	005b      	lsls	r3, r3, #1
 8008df2:	4413      	add	r3, r2
 8008df4:	085a      	lsrs	r2, r3, #1
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008e00:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e08:	899b      	ldrh	r3, [r3, #12]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e0e:	440b      	add	r3, r1
 8008e10:	3b01      	subs	r3, #1
 8008e12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e14:	8989      	ldrh	r1, [r1, #12]
 8008e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d201      	bcs.n	8008e22 <find_volume+0x426>
 8008e1e:	230d      	movs	r3, #13
 8008e20:	e06a      	b.n	8008ef8 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e28:	61da      	str	r2, [r3, #28]
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2c:	69da      	ldr	r2, [r3, #28]
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8008e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e34:	2280      	movs	r2, #128	; 0x80
 8008e36:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008e38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	d149      	bne.n	8008ed4 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e42:	333c      	adds	r3, #60	; 0x3c
 8008e44:	3330      	adds	r3, #48	; 0x30
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fd ff26 	bl	8006c98 <ld_word>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d140      	bne.n	8008ed4 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e54:	3301      	adds	r3, #1
 8008e56:	4619      	mov	r1, r3
 8008e58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e5a:	f7fe f9ff 	bl	800725c <move_window>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d137      	bne.n	8008ed4 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	2200      	movs	r2, #0
 8008e68:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	333c      	adds	r3, #60	; 0x3c
 8008e6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fd ff10 	bl	8006c98 <ld_word>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d127      	bne.n	8008ed4 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	333c      	adds	r3, #60	; 0x3c
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fd ff1d 	bl	8006cc8 <ld_dword>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	4a1b      	ldr	r2, [pc, #108]	; (8008f00 <find_volume+0x504>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d11e      	bne.n	8008ed4 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e98:	333c      	adds	r3, #60	; 0x3c
 8008e9a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fd ff12 	bl	8006cc8 <ld_dword>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	4a17      	ldr	r2, [pc, #92]	; (8008f04 <find_volume+0x508>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d113      	bne.n	8008ed4 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	333c      	adds	r3, #60	; 0x3c
 8008eb0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd ff07 	bl	8006cc8 <ld_dword>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	333c      	adds	r3, #60	; 0x3c
 8008ec4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fd fefd 	bl	8006cc8 <ld_dword>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008eda:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008edc:	4b0a      	ldr	r3, [pc, #40]	; (8008f08 <find_volume+0x50c>)
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	4b08      	ldr	r3, [pc, #32]	; (8008f08 <find_volume+0x50c>)
 8008ee6:	801a      	strh	r2, [r3, #0]
 8008ee8:	4b07      	ldr	r3, [pc, #28]	; (8008f08 <find_volume+0x50c>)
 8008eea:	881a      	ldrh	r2, [r3, #0]
 8008eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eee:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008ef0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ef2:	f7fe f94b 	bl	800718c <clear_lock>
#endif
	return FR_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3758      	adds	r7, #88	; 0x58
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	41615252 	.word	0x41615252
 8008f04:	61417272 	.word	0x61417272
 8008f08:	20005cfc 	.word	0x20005cfc

08008f0c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008f16:	2309      	movs	r3, #9
 8008f18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d02e      	beq.n	8008f7e <validate+0x72>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d02a      	beq.n	8008f7e <validate+0x72>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d025      	beq.n	8008f7e <validate+0x72>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	889a      	ldrh	r2, [r3, #4]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	88db      	ldrh	r3, [r3, #6]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d11e      	bne.n	8008f7e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fd ffa7 	bl	8006e98 <lock_fs>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d014      	beq.n	8008f7a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	785b      	ldrb	r3, [r3, #1]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fd fe00 	bl	8006b5c <disk_status>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d102      	bne.n	8008f6c <validate+0x60>
				res = FR_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]
 8008f6a:	e008      	b.n	8008f7e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2100      	movs	r1, #0
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fd ffa6 	bl	8006ec4 <unlock_fs>
 8008f78:	e001      	b.n	8008f7e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008f7a:	230f      	movs	r3, #15
 8008f7c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d102      	bne.n	8008f8a <validate+0x7e>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	e000      	b.n	8008f8c <validate+0x80>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	6013      	str	r3, [r2, #0]
	return res;
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b088      	sub	sp, #32
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008fae:	f107 0310 	add.w	r3, r7, #16
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7ff fc88 	bl	80088c8 <get_ldnumber>
 8008fb8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	da01      	bge.n	8008fc4 <f_mount+0x28>
 8008fc0:	230b      	movs	r3, #11
 8008fc2:	e048      	b.n	8009056 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008fc4:	4a26      	ldr	r2, [pc, #152]	; (8009060 <f_mount+0xc4>)
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fcc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00f      	beq.n	8008ff4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008fd4:	69b8      	ldr	r0, [r7, #24]
 8008fd6:	f7fe f8d9 	bl	800718c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 fe9d 	bl	8009d1e <ff_del_syncobj>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <f_mount+0x52>
 8008fea:	2302      	movs	r3, #2
 8008fec:	e033      	b.n	8009056 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00f      	beq.n	800901a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	b2da      	uxtb	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	3314      	adds	r3, #20
 8009008:	4619      	mov	r1, r3
 800900a:	4610      	mov	r0, r2
 800900c:	f000 fe6c 	bl	8009ce8 <ff_cre_syncobj>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <f_mount+0x7e>
 8009016:	2302      	movs	r3, #2
 8009018:	e01d      	b.n	8009056 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	4910      	ldr	r1, [pc, #64]	; (8009060 <f_mount+0xc4>)
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <f_mount+0x94>
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d001      	beq.n	8009034 <f_mount+0x98>
 8009030:	2300      	movs	r3, #0
 8009032:	e010      	b.n	8009056 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009034:	f107 010c 	add.w	r1, r7, #12
 8009038:	f107 0308 	add.w	r3, r7, #8
 800903c:	2200      	movs	r2, #0
 800903e:	4618      	mov	r0, r3
 8009040:	f7ff fcdc 	bl	80089fc <find_volume>
 8009044:	4603      	mov	r3, r0
 8009046:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	7dfa      	ldrb	r2, [r7, #23]
 800904c:	4611      	mov	r1, r2
 800904e:	4618      	mov	r0, r3
 8009050:	f7fd ff38 	bl	8006ec4 <unlock_fs>
 8009054:	7dfb      	ldrb	r3, [r7, #23]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3720      	adds	r7, #32
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20005cf8 	.word	0x20005cf8

08009064 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b09a      	sub	sp, #104	; 0x68
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	4613      	mov	r3, r2
 8009070:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <f_open+0x18>
 8009078:	2309      	movs	r3, #9
 800907a:	e1d7      	b.n	800942c <f_open+0x3c8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009082:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009084:	79fa      	ldrb	r2, [r7, #7]
 8009086:	f107 0110 	add.w	r1, r7, #16
 800908a:	f107 0308 	add.w	r3, r7, #8
 800908e:	4618      	mov	r0, r3
 8009090:	f7ff fcb4 	bl	80089fc <find_volume>
 8009094:	4603      	mov	r3, r0
 8009096:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800909a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f040 81b4 	bne.w	800940c <f_open+0x3a8>
		dj.obj.fs = fs;
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 80090a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80090ac:	f000 fe63 	bl	8009d76 <ff_memalloc>
 80090b0:	65b8      	str	r0, [r7, #88]	; 0x58
 80090b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d106      	bne.n	80090c6 <f_open+0x62>
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	2111      	movs	r1, #17
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fd ff01 	bl	8006ec4 <unlock_fs>
 80090c2:	2311      	movs	r3, #17
 80090c4:	e1b2      	b.n	800942c <f_open+0x3c8>
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090ca:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	f107 0314 	add.w	r3, r7, #20
 80090d2:	4611      	mov	r1, r2
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff fb81 	bl	80087dc <follow_path>
 80090da:	4603      	mov	r3, r0
 80090dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80090e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d11a      	bne.n	800911e <f_open+0xba>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80090e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80090ec:	b25b      	sxtb	r3, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	da03      	bge.n	80090fa <f_open+0x96>
				res = FR_INVALID_NAME;
 80090f2:	2306      	movs	r3, #6
 80090f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80090f8:	e011      	b.n	800911e <f_open+0xba>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80090fa:	79fb      	ldrb	r3, [r7, #7]
 80090fc:	f023 0301 	bic.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	bf14      	ite	ne
 8009104:	2301      	movne	r3, #1
 8009106:	2300      	moveq	r3, #0
 8009108:	b2db      	uxtb	r3, r3
 800910a:	461a      	mov	r2, r3
 800910c:	f107 0314 	add.w	r3, r7, #20
 8009110:	4611      	mov	r1, r2
 8009112:	4618      	mov	r0, r3
 8009114:	f7fd fef2 	bl	8006efc <chk_lock>
 8009118:	4603      	mov	r3, r0
 800911a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800911e:	79fb      	ldrb	r3, [r7, #7]
 8009120:	f003 031c 	and.w	r3, r3, #28
 8009124:	2b00      	cmp	r3, #0
 8009126:	d07f      	beq.n	8009228 <f_open+0x1c4>
			if (res != FR_OK) {					/* No file, create new */
 8009128:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800912c:	2b00      	cmp	r3, #0
 800912e:	d017      	beq.n	8009160 <f_open+0xfc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009130:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009134:	2b04      	cmp	r3, #4
 8009136:	d10e      	bne.n	8009156 <f_open+0xf2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009138:	f7fd ff3c 	bl	8006fb4 <enq_lock>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d006      	beq.n	8009150 <f_open+0xec>
 8009142:	f107 0314 	add.w	r3, r7, #20
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff f898 	bl	800827c <dir_register>
 800914c:	4603      	mov	r3, r0
 800914e:	e000      	b.n	8009152 <f_open+0xee>
 8009150:	2312      	movs	r3, #18
 8009152:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009156:	79fb      	ldrb	r3, [r7, #7]
 8009158:	f043 0308 	orr.w	r3, r3, #8
 800915c:	71fb      	strb	r3, [r7, #7]
 800915e:	e010      	b.n	8009182 <f_open+0x11e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009160:	7ebb      	ldrb	r3, [r7, #26]
 8009162:	f003 0311 	and.w	r3, r3, #17
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <f_open+0x10e>
					res = FR_DENIED;
 800916a:	2307      	movs	r3, #7
 800916c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009170:	e007      	b.n	8009182 <f_open+0x11e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009172:	79fb      	ldrb	r3, [r7, #7]
 8009174:	f003 0304 	and.w	r3, r3, #4
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <f_open+0x11e>
 800917c:	2308      	movs	r3, #8
 800917e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009182:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009186:	2b00      	cmp	r3, #0
 8009188:	d168      	bne.n	800925c <f_open+0x1f8>
 800918a:	79fb      	ldrb	r3, [r7, #7]
 800918c:	f003 0308 	and.w	r3, r3, #8
 8009190:	2b00      	cmp	r3, #0
 8009192:	d063      	beq.n	800925c <f_open+0x1f8>
				dw = GET_FATTIME();
 8009194:	f7fd fc7c 	bl	8006a90 <get_fattime>
 8009198:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800919a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919c:	330e      	adds	r3, #14
 800919e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fd fdcf 	bl	8006d44 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80091a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a8:	3316      	adds	r3, #22
 80091aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fd fdc9 	bl	8006d44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80091b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b4:	330b      	adds	r3, #11
 80091b6:	2220      	movs	r2, #32
 80091b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091be:	4611      	mov	r1, r2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe fdd3 	bl	8007d6c <ld_clust>
 80091c6:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80091cc:	2200      	movs	r2, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe fdeb 	bl	8007daa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80091d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d6:	331c      	adds	r3, #28
 80091d8:	2100      	movs	r1, #0
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fd fdb2 	bl	8006d44 <st_dword>
					fs->wflag = 1;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	2201      	movs	r2, #1
 80091e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80091e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d037      	beq.n	800925c <f_open+0x1f8>
						dw = fs->winsect;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 80091f2:	f107 0314 	add.w	r3, r7, #20
 80091f6:	2200      	movs	r2, #0
 80091f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fadb 	bl	80077b6 <remove_chain>
 8009200:	4603      	mov	r3, r0
 8009202:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009206:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800920a:	2b00      	cmp	r3, #0
 800920c:	d126      	bne.n	800925c <f_open+0x1f8>
							res = move_window(fs, dw);
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009212:	4618      	mov	r0, r3
 8009214:	f7fe f822 	bl	800725c <move_window>
 8009218:	4603      	mov	r3, r0
 800921a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009222:	3a01      	subs	r2, #1
 8009224:	619a      	str	r2, [r3, #24]
 8009226:	e019      	b.n	800925c <f_open+0x1f8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009228:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800922c:	2b00      	cmp	r3, #0
 800922e:	d115      	bne.n	800925c <f_open+0x1f8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009230:	7ebb      	ldrb	r3, [r7, #26]
 8009232:	f003 0310 	and.w	r3, r3, #16
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <f_open+0x1de>
					res = FR_NO_FILE;
 800923a:	2304      	movs	r3, #4
 800923c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009240:	e00c      	b.n	800925c <f_open+0x1f8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009242:	79fb      	ldrb	r3, [r7, #7]
 8009244:	f003 0302 	and.w	r3, r3, #2
 8009248:	2b00      	cmp	r3, #0
 800924a:	d007      	beq.n	800925c <f_open+0x1f8>
 800924c:	7ebb      	ldrb	r3, [r7, #26]
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	d002      	beq.n	800925c <f_open+0x1f8>
						res = FR_DENIED;
 8009256:	2307      	movs	r3, #7
 8009258:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800925c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009260:	2b00      	cmp	r3, #0
 8009262:	d128      	bne.n	80092b6 <f_open+0x252>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009264:	79fb      	ldrb	r3, [r7, #7]
 8009266:	f003 0308 	and.w	r3, r3, #8
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <f_open+0x212>
				mode |= FA_MODIFIED;
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009274:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800927e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009284:	79fb      	ldrb	r3, [r7, #7]
 8009286:	f023 0301 	bic.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	bf14      	ite	ne
 800928e:	2301      	movne	r3, #1
 8009290:	2300      	moveq	r3, #0
 8009292:	b2db      	uxtb	r3, r3
 8009294:	461a      	mov	r2, r3
 8009296:	f107 0314 	add.w	r3, r7, #20
 800929a:	4611      	mov	r1, r2
 800929c:	4618      	mov	r0, r3
 800929e:	f7fd feab 	bl	8006ff8 <inc_lock>
 80092a2:	4602      	mov	r2, r0
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d102      	bne.n	80092b6 <f_open+0x252>
 80092b0:	2302      	movs	r3, #2
 80092b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80092b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f040 80a3 	bne.w	8009406 <f_open+0x3a2>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092c4:	4611      	mov	r1, r2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fe fd50 	bl	8007d6c <ld_clust>
 80092cc:	4602      	mov	r2, r0
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80092d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d4:	331c      	adds	r3, #28
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fd fcf6 	bl	8006cc8 <ld_dword>
 80092dc:	4602      	mov	r2, r0
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	88da      	ldrh	r2, [r3, #6]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	79fa      	ldrb	r2, [r7, #7]
 80092fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3330      	adds	r3, #48	; 0x30
 8009312:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009316:	2100      	movs	r1, #0
 8009318:	4618      	mov	r0, r3
 800931a:	f7fd fd60 	bl	8006dde <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800931e:	79fb      	ldrb	r3, [r7, #7]
 8009320:	f003 0320 	and.w	r3, r3, #32
 8009324:	2b00      	cmp	r3, #0
 8009326:	d06e      	beq.n	8009406 <f_open+0x3a2>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d06a      	beq.n	8009406 <f_open+0x3a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	68da      	ldr	r2, [r3, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	895b      	ldrh	r3, [r3, #10]
 800933c:	461a      	mov	r2, r3
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	899b      	ldrh	r3, [r3, #12]
 8009342:	fb02 f303 	mul.w	r3, r2, r3
 8009346:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009354:	e016      	b.n	8009384 <f_open+0x320>
					clst = get_fat(&fp->obj, clst);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800935a:	4618      	mov	r0, r3
 800935c:	f7fe f83b 	bl	80073d6 <get_fat>
 8009360:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009364:	2b01      	cmp	r3, #1
 8009366:	d802      	bhi.n	800936e <f_open+0x30a>
 8009368:	2302      	movs	r3, #2
 800936a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800936e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009374:	d102      	bne.n	800937c <f_open+0x318>
 8009376:	2301      	movs	r3, #1
 8009378:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800937c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800937e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009384:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009388:	2b00      	cmp	r3, #0
 800938a:	d103      	bne.n	8009394 <f_open+0x330>
 800938c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800938e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009390:	429a      	cmp	r2, r3
 8009392:	d8e0      	bhi.n	8009356 <f_open+0x2f2>
				}
				fp->clust = clst;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009398:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800939a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d131      	bne.n	8009406 <f_open+0x3a2>
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	899b      	ldrh	r3, [r3, #12]
 80093a6:	461a      	mov	r2, r3
 80093a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80093ae:	fb01 f202 	mul.w	r2, r1, r2
 80093b2:	1a9b      	subs	r3, r3, r2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d026      	beq.n	8009406 <f_open+0x3a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fd ffeb 	bl	8007398 <clust2sect>
 80093c2:	64b8      	str	r0, [r7, #72]	; 0x48
 80093c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d103      	bne.n	80093d2 <f_open+0x36e>
						res = FR_INT_ERR;
 80093ca:	2302      	movs	r3, #2
 80093cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80093d0:	e019      	b.n	8009406 <f_open+0x3a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	899b      	ldrh	r3, [r3, #12]
 80093d6:	461a      	mov	r2, r3
 80093d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093da:	fbb3 f2f2 	udiv	r2, r3, r2
 80093de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093e0:	441a      	add	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	7858      	ldrb	r0, [r3, #1]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6a1a      	ldr	r2, [r3, #32]
 80093f4:	2301      	movs	r3, #1
 80093f6:	f7fd fbf1 	bl	8006bdc <disk_read>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <f_open+0x3a2>
 8009400:	2301      	movs	r3, #1
 8009402:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8009406:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009408:	f000 fcc1 	bl	8009d8e <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800940c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <f_open+0x3b6>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8009420:	4611      	mov	r1, r2
 8009422:	4618      	mov	r0, r3
 8009424:	f7fd fd4e 	bl	8006ec4 <unlock_fs>
 8009428:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800942c:	4618      	mov	r0, r3
 800942e:	3768      	adds	r7, #104	; 0x68
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08c      	sub	sp, #48	; 0x30
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2200      	movs	r2, #0
 800944a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f107 0210 	add.w	r2, r7, #16
 8009452:	4611      	mov	r1, r2
 8009454:	4618      	mov	r0, r3
 8009456:	f7ff fd59 	bl	8008f0c <validate>
 800945a:	4603      	mov	r3, r0
 800945c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009464:	2b00      	cmp	r3, #0
 8009466:	d107      	bne.n	8009478 <f_write+0x44>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	7d5b      	ldrb	r3, [r3, #21]
 800946c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009470:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009474:	2b00      	cmp	r3, #0
 8009476:	d009      	beq.n	800948c <f_write+0x58>
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800947e:	4611      	mov	r1, r2
 8009480:	4618      	mov	r0, r3
 8009482:	f7fd fd1f 	bl	8006ec4 <unlock_fs>
 8009486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800948a:	e192      	b.n	80097b2 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	7d1b      	ldrb	r3, [r3, #20]
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <f_write+0x72>
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	2107      	movs	r1, #7
 800949c:	4618      	mov	r0, r3
 800949e:	f7fd fd11 	bl	8006ec4 <unlock_fs>
 80094a2:	2307      	movs	r3, #7
 80094a4:	e185      	b.n	80097b2 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	699a      	ldr	r2, [r3, #24]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	441a      	add	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	f080 816a 	bcs.w	800978c <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	43db      	mvns	r3, r3
 80094be:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80094c0:	e164      	b.n	800978c <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	8992      	ldrh	r2, [r2, #12]
 80094ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80094ce:	fb01 f202 	mul.w	r2, r1, r2
 80094d2:	1a9b      	subs	r3, r3, r2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f040 810f 	bne.w	80096f8 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	693a      	ldr	r2, [r7, #16]
 80094e0:	8992      	ldrh	r2, [r2, #12]
 80094e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	8952      	ldrh	r2, [r2, #10]
 80094ea:	3a01      	subs	r2, #1
 80094ec:	4013      	ands	r3, r2
 80094ee:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d14d      	bne.n	8009592 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10c      	bne.n	8009518 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	2b00      	cmp	r3, #0
 8009508:	d11a      	bne.n	8009540 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2100      	movs	r1, #0
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe f9b6 	bl	8007880 <create_chain>
 8009514:	62b8      	str	r0, [r7, #40]	; 0x28
 8009516:	e013      	b.n	8009540 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d007      	beq.n	8009530 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	4619      	mov	r1, r3
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7fe fa42 	bl	80079b0 <clmt_clust>
 800952c:	62b8      	str	r0, [r7, #40]	; 0x28
 800952e:	e007      	b.n	8009540 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	4619      	mov	r1, r3
 8009538:	4610      	mov	r0, r2
 800953a:	f7fe f9a1 	bl	8007880 <create_chain>
 800953e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 8127 	beq.w	8009796 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954a:	2b01      	cmp	r3, #1
 800954c:	d109      	bne.n	8009562 <f_write+0x12e>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2202      	movs	r2, #2
 8009552:	755a      	strb	r2, [r3, #21]
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	2102      	movs	r1, #2
 8009558:	4618      	mov	r0, r3
 800955a:	f7fd fcb3 	bl	8006ec4 <unlock_fs>
 800955e:	2302      	movs	r3, #2
 8009560:	e127      	b.n	80097b2 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009568:	d109      	bne.n	800957e <f_write+0x14a>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	755a      	strb	r2, [r3, #21]
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	2101      	movs	r1, #1
 8009574:	4618      	mov	r0, r3
 8009576:	f7fd fca5 	bl	8006ec4 <unlock_fs>
 800957a:	2301      	movs	r3, #1
 800957c:	e119      	b.n	80097b2 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009582:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d102      	bne.n	8009592 <f_write+0x15e>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009590:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	7d1b      	ldrb	r3, [r3, #20]
 8009596:	b25b      	sxtb	r3, r3
 8009598:	2b00      	cmp	r3, #0
 800959a:	da1d      	bge.n	80095d8 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	7858      	ldrb	r0, [r3, #1]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6a1a      	ldr	r2, [r3, #32]
 80095aa:	2301      	movs	r3, #1
 80095ac:	f7fd fb36 	bl	8006c1c <disk_write>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d009      	beq.n	80095ca <f_write+0x196>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	755a      	strb	r2, [r3, #21]
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	2101      	movs	r1, #1
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fd fc7f 	bl	8006ec4 <unlock_fs>
 80095c6:	2301      	movs	r3, #1
 80095c8:	e0f3      	b.n	80097b2 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	7d1b      	ldrb	r3, [r3, #20]
 80095ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	4619      	mov	r1, r3
 80095e0:	4610      	mov	r0, r2
 80095e2:	f7fd fed9 	bl	8007398 <clust2sect>
 80095e6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d109      	bne.n	8009602 <f_write+0x1ce>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2202      	movs	r2, #2
 80095f2:	755a      	strb	r2, [r3, #21]
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	2102      	movs	r1, #2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fd fc63 	bl	8006ec4 <unlock_fs>
 80095fe:	2302      	movs	r3, #2
 8009600:	e0d7      	b.n	80097b2 <f_write+0x37e>
			sect += csect;
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	4413      	add	r3, r2
 8009608:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	899b      	ldrh	r3, [r3, #12]
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	fbb3 f3f2 	udiv	r3, r3, r2
 8009616:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d048      	beq.n	80096b0 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800961e:	69ba      	ldr	r2, [r7, #24]
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	4413      	add	r3, r2
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	8952      	ldrh	r2, [r2, #10]
 8009628:	4293      	cmp	r3, r2
 800962a:	d905      	bls.n	8009638 <f_write+0x204>
					cc = fs->csize - csect;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	895b      	ldrh	r3, [r3, #10]
 8009630:	461a      	mov	r2, r3
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	7858      	ldrb	r0, [r3, #1]
 800963c:	6a3b      	ldr	r3, [r7, #32]
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	69f9      	ldr	r1, [r7, #28]
 8009642:	f7fd faeb 	bl	8006c1c <disk_write>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d009      	beq.n	8009660 <f_write+0x22c>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2201      	movs	r2, #1
 8009650:	755a      	strb	r2, [r3, #21]
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2101      	movs	r1, #1
 8009656:	4618      	mov	r0, r3
 8009658:	f7fd fc34 	bl	8006ec4 <unlock_fs>
 800965c:	2301      	movs	r3, #1
 800965e:	e0a8      	b.n	80097b2 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6a1a      	ldr	r2, [r3, #32]
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	6a3a      	ldr	r2, [r7, #32]
 800966a:	429a      	cmp	r2, r3
 800966c:	d918      	bls.n	80096a0 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6a1a      	ldr	r2, [r3, #32]
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	8992      	ldrh	r2, [r2, #12]
 8009680:	fb02 f303 	mul.w	r3, r2, r3
 8009684:	69fa      	ldr	r2, [r7, #28]
 8009686:	18d1      	adds	r1, r2, r3
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	899b      	ldrh	r3, [r3, #12]
 800968c:	461a      	mov	r2, r3
 800968e:	f7fd fb85 	bl	8006d9c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	7d1b      	ldrb	r3, [r3, #20]
 8009696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800969a:	b2da      	uxtb	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	899b      	ldrh	r3, [r3, #12]
 80096a4:	461a      	mov	r2, r3
 80096a6:	6a3b      	ldr	r3, [r7, #32]
 80096a8:	fb02 f303 	mul.w	r3, r2, r3
 80096ac:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80096ae:	e050      	b.n	8009752 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d01b      	beq.n	80096f2 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	699a      	ldr	r2, [r3, #24]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d215      	bcs.n	80096f2 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	7858      	ldrb	r0, [r3, #1]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096d0:	2301      	movs	r3, #1
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	f7fd fa82 	bl	8006bdc <disk_read>
 80096d8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d009      	beq.n	80096f2 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2201      	movs	r2, #1
 80096e2:	755a      	strb	r2, [r3, #21]
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	2101      	movs	r1, #1
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fd fbeb 	bl	8006ec4 <unlock_fs>
 80096ee:	2301      	movs	r3, #1
 80096f0:	e05f      	b.n	80097b2 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	899b      	ldrh	r3, [r3, #12]
 80096fc:	4618      	mov	r0, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	8992      	ldrh	r2, [r2, #12]
 8009706:	fbb3 f1f2 	udiv	r1, r3, r2
 800970a:	fb01 f202 	mul.w	r2, r1, r2
 800970e:	1a9b      	subs	r3, r3, r2
 8009710:	1ac3      	subs	r3, r0, r3
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	429a      	cmp	r2, r3
 800971a:	d901      	bls.n	8009720 <f_write+0x2ec>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	8992      	ldrh	r2, [r2, #12]
 800972e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009732:	fb00 f202 	mul.w	r2, r0, r2
 8009736:	1a9b      	subs	r3, r3, r2
 8009738:	440b      	add	r3, r1
 800973a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800973c:	69f9      	ldr	r1, [r7, #28]
 800973e:	4618      	mov	r0, r3
 8009740:	f7fd fb2c 	bl	8006d9c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	7d1b      	ldrb	r3, [r3, #20]
 8009748:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800974c:	b2da      	uxtb	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009752:	69fa      	ldr	r2, [r7, #28]
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	4413      	add	r3, r2
 8009758:	61fb      	str	r3, [r7, #28]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009760:	441a      	add	r2, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	619a      	str	r2, [r3, #24]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	429a      	cmp	r2, r3
 8009770:	bf38      	it	cc
 8009772:	461a      	movcc	r2, r3
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	60da      	str	r2, [r3, #12]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977e:	441a      	add	r2, r3
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	f47f ae97 	bne.w	80094c2 <f_write+0x8e>
 8009794:	e000      	b.n	8009798 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009796:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	7d1b      	ldrb	r3, [r3, #20]
 800979c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2100      	movs	r1, #0
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fd fb8a 	bl	8006ec4 <unlock_fs>
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3730      	adds	r7, #48	; 0x30
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b086      	sub	sp, #24
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f107 0208 	add.w	r2, r7, #8
 80097c8:	4611      	mov	r1, r2
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7ff fb9e 	bl	8008f0c <validate>
 80097d0:	4603      	mov	r3, r0
 80097d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d16d      	bne.n	80098b6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	7d1b      	ldrb	r3, [r3, #20]
 80097de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d067      	beq.n	80098b6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	7d1b      	ldrb	r3, [r3, #20]
 80097ea:	b25b      	sxtb	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	da1a      	bge.n	8009826 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	7858      	ldrb	r0, [r3, #1]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a1a      	ldr	r2, [r3, #32]
 80097fe:	2301      	movs	r3, #1
 8009800:	f7fd fa0c 	bl	8006c1c <disk_write>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d006      	beq.n	8009818 <f_sync+0x5e>
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2101      	movs	r1, #1
 800980e:	4618      	mov	r0, r3
 8009810:	f7fd fb58 	bl	8006ec4 <unlock_fs>
 8009814:	2301      	movs	r3, #1
 8009816:	e055      	b.n	80098c4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	7d1b      	ldrb	r3, [r3, #20]
 800981c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009820:	b2da      	uxtb	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009826:	f7fd f933 	bl	8006a90 <get_fattime>
 800982a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	4619      	mov	r1, r3
 8009834:	4610      	mov	r0, r2
 8009836:	f7fd fd11 	bl	800725c <move_window>
 800983a:	4603      	mov	r3, r0
 800983c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800983e:	7dfb      	ldrb	r3, [r7, #23]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d138      	bne.n	80098b6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009848:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	330b      	adds	r3, #11
 800984e:	781a      	ldrb	r2, [r3, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	330b      	adds	r3, #11
 8009854:	f042 0220 	orr.w	r2, r2, #32
 8009858:	b2d2      	uxtb	r2, r2
 800985a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6818      	ldr	r0, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	461a      	mov	r2, r3
 8009866:	68f9      	ldr	r1, [r7, #12]
 8009868:	f7fe fa9f 	bl	8007daa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f103 021c 	add.w	r2, r3, #28
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	f7fd fa63 	bl	8006d44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3316      	adds	r3, #22
 8009882:	6939      	ldr	r1, [r7, #16]
 8009884:	4618      	mov	r0, r3
 8009886:	f7fd fa5d 	bl	8006d44 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3312      	adds	r3, #18
 800988e:	2100      	movs	r1, #0
 8009890:	4618      	mov	r0, r3
 8009892:	f7fd fa3c 	bl	8006d0e <st_word>
					fs->wflag = 1;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	2201      	movs	r2, #1
 800989a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fd fd0a 	bl	80072b8 <sync_fs>
 80098a4:	4603      	mov	r3, r0
 80098a6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	7d1b      	ldrb	r3, [r3, #20]
 80098ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	7dfa      	ldrb	r2, [r7, #23]
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fd fb01 	bl	8006ec4 <unlock_fs>
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7ff ff70 	bl	80097ba <f_sync>
 80098da:	4603      	mov	r3, r0
 80098dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80098de:	7bfb      	ldrb	r3, [r7, #15]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d11d      	bne.n	8009920 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f107 0208 	add.w	r2, r7, #8
 80098ea:	4611      	mov	r1, r2
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7ff fb0d 	bl	8008f0c <validate>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80098f6:	7bfb      	ldrb	r3, [r7, #15]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d111      	bne.n	8009920 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	4618      	mov	r0, r3
 8009902:	f7fd fc07 	bl	8007114 <dec_lock>
 8009906:	4603      	mov	r3, r0
 8009908:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800990a:	7bfb      	ldrb	r3, [r7, #15]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d102      	bne.n	8009916 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	2100      	movs	r1, #0
 800991a:	4618      	mov	r0, r3
 800991c:	f7fd fad2 	bl	8006ec4 <unlock_fs>
#endif
		}
	}
	return res;
 8009920:	7bfb      	ldrb	r3, [r7, #15]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b092      	sub	sp, #72	; 0x48
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009936:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800993a:	f107 030c 	add.w	r3, r7, #12
 800993e:	2200      	movs	r2, #0
 8009940:	4618      	mov	r0, r3
 8009942:	f7ff f85b 	bl	80089fc <find_volume>
 8009946:	4603      	mov	r3, r0
 8009948:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800994c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009950:	2b00      	cmp	r3, #0
 8009952:	f040 8099 	bne.w	8009a88 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995e:	69da      	ldr	r2, [r3, #28]
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	3b02      	subs	r3, #2
 8009966:	429a      	cmp	r2, r3
 8009968:	d804      	bhi.n	8009974 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800996a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996c:	69da      	ldr	r2, [r3, #28]
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	601a      	str	r2, [r3, #0]
 8009972:	e089      	b.n	8009a88 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d128      	bne.n	80099d2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009980:	2302      	movs	r3, #2
 8009982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009988:	f107 0314 	add.w	r3, r7, #20
 800998c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800998e:	4618      	mov	r0, r3
 8009990:	f7fd fd21 	bl	80073d6 <get_fat>
 8009994:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800999c:	d103      	bne.n	80099a6 <f_getfree+0x7c>
 800999e:	2301      	movs	r3, #1
 80099a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80099a4:	e063      	b.n	8009a6e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80099a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d103      	bne.n	80099b4 <f_getfree+0x8a>
 80099ac:	2302      	movs	r3, #2
 80099ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80099b2:	e05c      	b.n	8009a6e <f_getfree+0x144>
					if (stat == 0) nfree++;
 80099b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d102      	bne.n	80099c0 <f_getfree+0x96>
 80099ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099bc:	3301      	adds	r3, #1
 80099be:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80099c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c2:	3301      	adds	r3, #1
 80099c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d3db      	bcc.n	8009988 <f_getfree+0x5e>
 80099d0:	e04d      	b.n	8009a6e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099dc:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80099de:	2300      	movs	r3, #0
 80099e0:	637b      	str	r3, [r7, #52]	; 0x34
 80099e2:	2300      	movs	r3, #0
 80099e4:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80099e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d113      	bne.n	8009a14 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80099ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80099f4:	4619      	mov	r1, r3
 80099f6:	f7fd fc31 	bl	800725c <move_window>
 80099fa:	4603      	mov	r3, r0
 80099fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009a00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d131      	bne.n	8009a6c <f_getfree+0x142>
							p = fs->win;
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	333c      	adds	r3, #60	; 0x3c
 8009a0c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a10:	899b      	ldrh	r3, [r3, #12]
 8009a12:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d10f      	bne.n	8009a3c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a1e:	f7fd f93b 	bl	8006c98 <ld_word>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d102      	bne.n	8009a2e <f_getfree+0x104>
 8009a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	3302      	adds	r3, #2
 8009a32:	633b      	str	r3, [r7, #48]	; 0x30
 8009a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a36:	3b02      	subs	r3, #2
 8009a38:	637b      	str	r3, [r7, #52]	; 0x34
 8009a3a:	e010      	b.n	8009a5e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a3e:	f7fd f943 	bl	8006cc8 <ld_dword>
 8009a42:	4603      	mov	r3, r0
 8009a44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d102      	bne.n	8009a52 <f_getfree+0x128>
 8009a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a4e:	3301      	adds	r3, #1
 8009a50:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	3304      	adds	r3, #4
 8009a56:	633b      	str	r3, [r7, #48]	; 0x30
 8009a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a5a:	3b04      	subs	r3, #4
 8009a5c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a60:	3b01      	subs	r3, #1
 8009a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1bd      	bne.n	80099e6 <f_getfree+0xbc>
 8009a6a:	e000      	b.n	8009a6e <f_getfree+0x144>
							if (res != FR_OK) break;
 8009a6c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a72:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a78:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	791a      	ldrb	r2, [r3, #4]
 8009a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a80:	f042 0201 	orr.w	r2, r2, #1
 8009a84:	b2d2      	uxtb	r2, r2
 8009a86:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8009a8e:	4611      	mov	r1, r2
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fd fa17 	bl	8006ec4 <unlock_fs>
 8009a96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3748      	adds	r7, #72	; 0x48
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
	...

08009aa4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b087      	sub	sp, #28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009aba:	4b1f      	ldr	r3, [pc, #124]	; (8009b38 <FATFS_LinkDriverEx+0x94>)
 8009abc:	7a5b      	ldrb	r3, [r3, #9]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d131      	bne.n	8009b28 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009ac4:	4b1c      	ldr	r3, [pc, #112]	; (8009b38 <FATFS_LinkDriverEx+0x94>)
 8009ac6:	7a5b      	ldrb	r3, [r3, #9]
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	461a      	mov	r2, r3
 8009acc:	4b1a      	ldr	r3, [pc, #104]	; (8009b38 <FATFS_LinkDriverEx+0x94>)
 8009ace:	2100      	movs	r1, #0
 8009ad0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009ad2:	4b19      	ldr	r3, [pc, #100]	; (8009b38 <FATFS_LinkDriverEx+0x94>)
 8009ad4:	7a5b      	ldrb	r3, [r3, #9]
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	4a17      	ldr	r2, [pc, #92]	; (8009b38 <FATFS_LinkDriverEx+0x94>)
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009ae2:	4b15      	ldr	r3, [pc, #84]	; (8009b38 <FATFS_LinkDriverEx+0x94>)
 8009ae4:	7a5b      	ldrb	r3, [r3, #9]
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	461a      	mov	r2, r3
 8009aea:	4b13      	ldr	r3, [pc, #76]	; (8009b38 <FATFS_LinkDriverEx+0x94>)
 8009aec:	4413      	add	r3, r2
 8009aee:	79fa      	ldrb	r2, [r7, #7]
 8009af0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009af2:	4b11      	ldr	r3, [pc, #68]	; (8009b38 <FATFS_LinkDriverEx+0x94>)
 8009af4:	7a5b      	ldrb	r3, [r3, #9]
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	1c5a      	adds	r2, r3, #1
 8009afa:	b2d1      	uxtb	r1, r2
 8009afc:	4a0e      	ldr	r2, [pc, #56]	; (8009b38 <FATFS_LinkDriverEx+0x94>)
 8009afe:	7251      	strb	r1, [r2, #9]
 8009b00:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009b02:	7dbb      	ldrb	r3, [r7, #22]
 8009b04:	3330      	adds	r3, #48	; 0x30
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	223a      	movs	r2, #58	; 0x3a
 8009b12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	3302      	adds	r3, #2
 8009b18:	222f      	movs	r2, #47	; 0x2f
 8009b1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	3303      	adds	r3, #3
 8009b20:	2200      	movs	r2, #0
 8009b22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	20005d20 	.word	0x20005d20

08009b3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b46:	2200      	movs	r2, #0
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff ffaa 	bl	8009aa4 <FATFS_LinkDriverEx>
 8009b50:	4603      	mov	r3, r0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	4603      	mov	r3, r0
 8009b64:	6039      	str	r1, [r7, #0]
 8009b66:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009b68:	88fb      	ldrh	r3, [r7, #6]
 8009b6a:	2b7f      	cmp	r3, #127	; 0x7f
 8009b6c:	d802      	bhi.n	8009b74 <ff_convert+0x18>
		c = chr;
 8009b6e:	88fb      	ldrh	r3, [r7, #6]
 8009b70:	81fb      	strh	r3, [r7, #14]
 8009b72:	e025      	b.n	8009bc0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00b      	beq.n	8009b92 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009b7a:	88fb      	ldrh	r3, [r7, #6]
 8009b7c:	2bff      	cmp	r3, #255	; 0xff
 8009b7e:	d805      	bhi.n	8009b8c <ff_convert+0x30>
 8009b80:	88fb      	ldrh	r3, [r7, #6]
 8009b82:	3b80      	subs	r3, #128	; 0x80
 8009b84:	4a12      	ldr	r2, [pc, #72]	; (8009bd0 <ff_convert+0x74>)
 8009b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b8a:	e000      	b.n	8009b8e <ff_convert+0x32>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	81fb      	strh	r3, [r7, #14]
 8009b90:	e016      	b.n	8009bc0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009b92:	2300      	movs	r3, #0
 8009b94:	81fb      	strh	r3, [r7, #14]
 8009b96:	e009      	b.n	8009bac <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009b98:	89fb      	ldrh	r3, [r7, #14]
 8009b9a:	4a0d      	ldr	r2, [pc, #52]	; (8009bd0 <ff_convert+0x74>)
 8009b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ba0:	88fa      	ldrh	r2, [r7, #6]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d006      	beq.n	8009bb4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009ba6:	89fb      	ldrh	r3, [r7, #14]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	81fb      	strh	r3, [r7, #14]
 8009bac:	89fb      	ldrh	r3, [r7, #14]
 8009bae:	2b7f      	cmp	r3, #127	; 0x7f
 8009bb0:	d9f2      	bls.n	8009b98 <ff_convert+0x3c>
 8009bb2:	e000      	b.n	8009bb6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009bb4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009bb6:	89fb      	ldrh	r3, [r7, #14]
 8009bb8:	3380      	adds	r3, #128	; 0x80
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009bc0:	89fb      	ldrh	r3, [r7, #14]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	0800f464 	.word	0x0800f464

08009bd4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009bde:	88fb      	ldrh	r3, [r7, #6]
 8009be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009be4:	d201      	bcs.n	8009bea <ff_wtoupper+0x16>
 8009be6:	4b3e      	ldr	r3, [pc, #248]	; (8009ce0 <ff_wtoupper+0x10c>)
 8009be8:	e000      	b.n	8009bec <ff_wtoupper+0x18>
 8009bea:	4b3e      	ldr	r3, [pc, #248]	; (8009ce4 <ff_wtoupper+0x110>)
 8009bec:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	1c9a      	adds	r2, r3, #2
 8009bf2:	617a      	str	r2, [r7, #20]
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009bf8:	8a7b      	ldrh	r3, [r7, #18]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d068      	beq.n	8009cd0 <ff_wtoupper+0xfc>
 8009bfe:	88fa      	ldrh	r2, [r7, #6]
 8009c00:	8a7b      	ldrh	r3, [r7, #18]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d364      	bcc.n	8009cd0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	1c9a      	adds	r2, r3, #2
 8009c0a:	617a      	str	r2, [r7, #20]
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	823b      	strh	r3, [r7, #16]
 8009c10:	8a3b      	ldrh	r3, [r7, #16]
 8009c12:	0a1b      	lsrs	r3, r3, #8
 8009c14:	81fb      	strh	r3, [r7, #14]
 8009c16:	8a3b      	ldrh	r3, [r7, #16]
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009c1c:	88fa      	ldrh	r2, [r7, #6]
 8009c1e:	8a79      	ldrh	r1, [r7, #18]
 8009c20:	8a3b      	ldrh	r3, [r7, #16]
 8009c22:	440b      	add	r3, r1
 8009c24:	429a      	cmp	r2, r3
 8009c26:	da49      	bge.n	8009cbc <ff_wtoupper+0xe8>
			switch (cmd) {
 8009c28:	89fb      	ldrh	r3, [r7, #14]
 8009c2a:	2b08      	cmp	r3, #8
 8009c2c:	d84f      	bhi.n	8009cce <ff_wtoupper+0xfa>
 8009c2e:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <ff_wtoupper+0x60>)
 8009c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c34:	08009c59 	.word	0x08009c59
 8009c38:	08009c6b 	.word	0x08009c6b
 8009c3c:	08009c81 	.word	0x08009c81
 8009c40:	08009c89 	.word	0x08009c89
 8009c44:	08009c91 	.word	0x08009c91
 8009c48:	08009c99 	.word	0x08009c99
 8009c4c:	08009ca1 	.word	0x08009ca1
 8009c50:	08009ca9 	.word	0x08009ca9
 8009c54:	08009cb1 	.word	0x08009cb1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009c58:	88fa      	ldrh	r2, [r7, #6]
 8009c5a:	8a7b      	ldrh	r3, [r7, #18]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	005b      	lsls	r3, r3, #1
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	4413      	add	r3, r2
 8009c64:	881b      	ldrh	r3, [r3, #0]
 8009c66:	80fb      	strh	r3, [r7, #6]
 8009c68:	e027      	b.n	8009cba <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009c6a:	88fa      	ldrh	r2, [r7, #6]
 8009c6c:	8a7b      	ldrh	r3, [r7, #18]
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	88fa      	ldrh	r2, [r7, #6]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	80fb      	strh	r3, [r7, #6]
 8009c7e:	e01c      	b.n	8009cba <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009c80:	88fb      	ldrh	r3, [r7, #6]
 8009c82:	3b10      	subs	r3, #16
 8009c84:	80fb      	strh	r3, [r7, #6]
 8009c86:	e018      	b.n	8009cba <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009c88:	88fb      	ldrh	r3, [r7, #6]
 8009c8a:	3b20      	subs	r3, #32
 8009c8c:	80fb      	strh	r3, [r7, #6]
 8009c8e:	e014      	b.n	8009cba <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009c90:	88fb      	ldrh	r3, [r7, #6]
 8009c92:	3b30      	subs	r3, #48	; 0x30
 8009c94:	80fb      	strh	r3, [r7, #6]
 8009c96:	e010      	b.n	8009cba <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009c98:	88fb      	ldrh	r3, [r7, #6]
 8009c9a:	3b1a      	subs	r3, #26
 8009c9c:	80fb      	strh	r3, [r7, #6]
 8009c9e:	e00c      	b.n	8009cba <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009ca0:	88fb      	ldrh	r3, [r7, #6]
 8009ca2:	3308      	adds	r3, #8
 8009ca4:	80fb      	strh	r3, [r7, #6]
 8009ca6:	e008      	b.n	8009cba <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009ca8:	88fb      	ldrh	r3, [r7, #6]
 8009caa:	3b50      	subs	r3, #80	; 0x50
 8009cac:	80fb      	strh	r3, [r7, #6]
 8009cae:	e004      	b.n	8009cba <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009cb0:	88fb      	ldrh	r3, [r7, #6]
 8009cb2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8009cb6:	80fb      	strh	r3, [r7, #6]
 8009cb8:	bf00      	nop
			}
			break;
 8009cba:	e008      	b.n	8009cce <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009cbc:	89fb      	ldrh	r3, [r7, #14]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d195      	bne.n	8009bee <ff_wtoupper+0x1a>
 8009cc2:	8a3b      	ldrh	r3, [r7, #16]
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	4413      	add	r3, r2
 8009cca:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009ccc:	e78f      	b.n	8009bee <ff_wtoupper+0x1a>
			break;
 8009cce:	bf00      	nop
	}

	return chr;
 8009cd0:	88fb      	ldrh	r3, [r7, #6]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	0800f564 	.word	0x0800f564
 8009ce4:	0800f758 	.word	0x0800f758

08009ce8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	6039      	str	r1, [r7, #0]
 8009cf2:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	2001      	movs	r0, #1
 8009cfa:	f000 f98e 	bl	800a01a <osSemaphoreNew>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	bf14      	ite	ne
 8009d0c:	2301      	movne	r3, #1
 8009d0e:	2300      	moveq	r3, #0
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	60fb      	str	r3, [r7, #12]

    return ret;
 8009d14:	68fb      	ldr	r3, [r7, #12]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fa96 	bl	800a258 <osSemaphoreDelete>
#endif
    return 1;
 8009d2c:	2301      	movs	r3, #1
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b084      	sub	sp, #16
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8009d42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f9f0 	bl	800a12c <osSemaphoreAcquire>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8009d52:	2301      	movs	r3, #1
 8009d54:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009d56:	68fb      	ldr	r3, [r7, #12]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fa31 	bl	800a1d0 <osSemaphoreRelease>
#endif
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b082      	sub	sp, #8
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f003 f94a 	bl	800d018 <pvPortMalloc>
 8009d84:	4603      	mov	r3, r0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f003 fa0a 	bl	800d1b0 <vPortFree>
}
 8009d9c:	bf00      	nop
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <__NVIC_SetPriority>:
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	4603      	mov	r3, r0
 8009dac:	6039      	str	r1, [r7, #0]
 8009dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	db0a      	blt.n	8009dce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	b2da      	uxtb	r2, r3
 8009dbc:	490c      	ldr	r1, [pc, #48]	; (8009df0 <__NVIC_SetPriority+0x4c>)
 8009dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dc2:	0112      	lsls	r2, r2, #4
 8009dc4:	b2d2      	uxtb	r2, r2
 8009dc6:	440b      	add	r3, r1
 8009dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009dcc:	e00a      	b.n	8009de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	4908      	ldr	r1, [pc, #32]	; (8009df4 <__NVIC_SetPriority+0x50>)
 8009dd4:	79fb      	ldrb	r3, [r7, #7]
 8009dd6:	f003 030f 	and.w	r3, r3, #15
 8009dda:	3b04      	subs	r3, #4
 8009ddc:	0112      	lsls	r2, r2, #4
 8009dde:	b2d2      	uxtb	r2, r2
 8009de0:	440b      	add	r3, r1
 8009de2:	761a      	strb	r2, [r3, #24]
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	e000e100 	.word	0xe000e100
 8009df4:	e000ed00 	.word	0xe000ed00

08009df8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009dfc:	4b05      	ldr	r3, [pc, #20]	; (8009e14 <SysTick_Handler+0x1c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009e00:	f002 f98c 	bl	800c11c <xTaskGetSchedulerState>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d001      	beq.n	8009e0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009e0a:	f003 f875 	bl	800cef8 <xPortSysTickHandler>
  }
}
 8009e0e:	bf00      	nop
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	e000e010 	.word	0xe000e010

08009e18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	f06f 0004 	mvn.w	r0, #4
 8009e22:	f7ff ffbf 	bl	8009da4 <__NVIC_SetPriority>
#endif
}
 8009e26:	bf00      	nop
 8009e28:	bd80      	pop	{r7, pc}
	...

08009e2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e32:	f3ef 8305 	mrs	r3, IPSR
 8009e36:	603b      	str	r3, [r7, #0]
  return(result);
 8009e38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009e3e:	f06f 0305 	mvn.w	r3, #5
 8009e42:	607b      	str	r3, [r7, #4]
 8009e44:	e00c      	b.n	8009e60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e46:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <osKernelInitialize+0x44>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d105      	bne.n	8009e5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009e4e:	4b08      	ldr	r3, [pc, #32]	; (8009e70 <osKernelInitialize+0x44>)
 8009e50:	2201      	movs	r2, #1
 8009e52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	607b      	str	r3, [r7, #4]
 8009e58:	e002      	b.n	8009e60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e60:	687b      	ldr	r3, [r7, #4]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	20005d2c 	.word	0x20005d2c

08009e74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e7a:	f3ef 8305 	mrs	r3, IPSR
 8009e7e:	603b      	str	r3, [r7, #0]
  return(result);
 8009e80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d003      	beq.n	8009e8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009e86:	f06f 0305 	mvn.w	r3, #5
 8009e8a:	607b      	str	r3, [r7, #4]
 8009e8c:	e010      	b.n	8009eb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e8e:	4b0b      	ldr	r3, [pc, #44]	; (8009ebc <osKernelStart+0x48>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d109      	bne.n	8009eaa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e96:	f7ff ffbf 	bl	8009e18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e9a:	4b08      	ldr	r3, [pc, #32]	; (8009ebc <osKernelStart+0x48>)
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ea0:	f001 fce0 	bl	800b864 <vTaskStartScheduler>
      stat = osOK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	607b      	str	r3, [r7, #4]
 8009ea8:	e002      	b.n	8009eb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009eae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009eb0:	687b      	ldr	r3, [r7, #4]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20005d2c 	.word	0x20005d2c

08009ec0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08e      	sub	sp, #56	; 0x38
 8009ec4:	af04      	add	r7, sp, #16
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ed0:	f3ef 8305 	mrs	r3, IPSR
 8009ed4:	617b      	str	r3, [r7, #20]
  return(result);
 8009ed6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d17e      	bne.n	8009fda <osThreadNew+0x11a>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d07b      	beq.n	8009fda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009ee2:	2380      	movs	r3, #128	; 0x80
 8009ee4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009ee6:	2318      	movs	r3, #24
 8009ee8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ef2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d045      	beq.n	8009f86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <osThreadNew+0x48>
        name = attr->name;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d008      	beq.n	8009f2e <osThreadNew+0x6e>
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	2b38      	cmp	r3, #56	; 0x38
 8009f20:	d805      	bhi.n	8009f2e <osThreadNew+0x6e>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <osThreadNew+0x72>
        return (NULL);
 8009f2e:	2300      	movs	r3, #0
 8009f30:	e054      	b.n	8009fdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d003      	beq.n	8009f42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	089b      	lsrs	r3, r3, #2
 8009f40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00e      	beq.n	8009f68 <osThreadNew+0xa8>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	2bbb      	cmp	r3, #187	; 0xbb
 8009f50:	d90a      	bls.n	8009f68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d006      	beq.n	8009f68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	695b      	ldr	r3, [r3, #20]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <osThreadNew+0xa8>
        mem = 1;
 8009f62:	2301      	movs	r3, #1
 8009f64:	61bb      	str	r3, [r7, #24]
 8009f66:	e010      	b.n	8009f8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d10c      	bne.n	8009f8a <osThreadNew+0xca>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d108      	bne.n	8009f8a <osThreadNew+0xca>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d104      	bne.n	8009f8a <osThreadNew+0xca>
          mem = 0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	61bb      	str	r3, [r7, #24]
 8009f84:	e001      	b.n	8009f8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009f86:	2300      	movs	r3, #0
 8009f88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d110      	bne.n	8009fb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f98:	9202      	str	r2, [sp, #8]
 8009f9a:	9301      	str	r3, [sp, #4]
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	6a3a      	ldr	r2, [r7, #32]
 8009fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f001 fa70 	bl	800b48c <xTaskCreateStatic>
 8009fac:	4603      	mov	r3, r0
 8009fae:	613b      	str	r3, [r7, #16]
 8009fb0:	e013      	b.n	8009fda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d110      	bne.n	8009fda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	f107 0310 	add.w	r3, r7, #16
 8009fc0:	9301      	str	r3, [sp, #4]
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f001 fabb 	bl	800b546 <xTaskCreate>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d001      	beq.n	8009fda <osThreadNew+0x11a>
            hTask = NULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009fda:	693b      	ldr	r3, [r7, #16]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3728      	adds	r7, #40	; 0x28
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fec:	f3ef 8305 	mrs	r3, IPSR
 8009ff0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ff2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d003      	beq.n	800a000 <osDelay+0x1c>
    stat = osErrorISR;
 8009ff8:	f06f 0305 	mvn.w	r3, #5
 8009ffc:	60fb      	str	r3, [r7, #12]
 8009ffe:	e007      	b.n	800a010 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a000:	2300      	movs	r3, #0
 800a002:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d002      	beq.n	800a010 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f001 fbf6 	bl	800b7fc <vTaskDelay>
    }
  }

  return (stat);
 800a010:	68fb      	ldr	r3, [r7, #12]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b08a      	sub	sp, #40	; 0x28
 800a01e:	af02      	add	r7, sp, #8
 800a020:	60f8      	str	r0, [r7, #12]
 800a022:	60b9      	str	r1, [r7, #8]
 800a024:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a02a:	f3ef 8305 	mrs	r3, IPSR
 800a02e:	613b      	str	r3, [r7, #16]
  return(result);
 800a030:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a032:	2b00      	cmp	r3, #0
 800a034:	d175      	bne.n	800a122 <osSemaphoreNew+0x108>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d072      	beq.n	800a122 <osSemaphoreNew+0x108>
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	429a      	cmp	r2, r3
 800a042:	d86e      	bhi.n	800a122 <osSemaphoreNew+0x108>
    mem = -1;
 800a044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a048:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d015      	beq.n	800a07c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d006      	beq.n	800a066 <osSemaphoreNew+0x4c>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	2b4f      	cmp	r3, #79	; 0x4f
 800a05e:	d902      	bls.n	800a066 <osSemaphoreNew+0x4c>
        mem = 1;
 800a060:	2301      	movs	r3, #1
 800a062:	61bb      	str	r3, [r7, #24]
 800a064:	e00c      	b.n	800a080 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d108      	bne.n	800a080 <osSemaphoreNew+0x66>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d104      	bne.n	800a080 <osSemaphoreNew+0x66>
          mem = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	61bb      	str	r3, [r7, #24]
 800a07a:	e001      	b.n	800a080 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a086:	d04c      	beq.n	800a122 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d128      	bne.n	800a0e0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d10a      	bne.n	800a0aa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	2203      	movs	r2, #3
 800a09a:	9200      	str	r2, [sp, #0]
 800a09c:	2200      	movs	r2, #0
 800a09e:	2100      	movs	r1, #0
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	f000 fa4d 	bl	800a540 <xQueueGenericCreateStatic>
 800a0a6:	61f8      	str	r0, [r7, #28]
 800a0a8:	e005      	b.n	800a0b6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a0aa:	2203      	movs	r2, #3
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	f000 fabe 	bl	800a630 <xQueueGenericCreate>
 800a0b4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d022      	beq.n	800a102 <osSemaphoreNew+0xe8>
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d01f      	beq.n	800a102 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	69f8      	ldr	r0, [r7, #28]
 800a0ca:	f000 fb79 	bl	800a7c0 <xQueueGenericSend>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d016      	beq.n	800a102 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a0d4:	69f8      	ldr	r0, [r7, #28]
 800a0d6:	f001 f805 	bl	800b0e4 <vQueueDelete>
            hSemaphore = NULL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	61fb      	str	r3, [r7, #28]
 800a0de:	e010      	b.n	800a102 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d108      	bne.n	800a0f8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 fafb 	bl	800a6ea <xQueueCreateCountingSemaphoreStatic>
 800a0f4:	61f8      	str	r0, [r7, #28]
 800a0f6:	e004      	b.n	800a102 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a0f8:	68b9      	ldr	r1, [r7, #8]
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 fb2c 	bl	800a758 <xQueueCreateCountingSemaphore>
 800a100:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00c      	beq.n	800a122 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d003      	beq.n	800a116 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	617b      	str	r3, [r7, #20]
 800a114:	e001      	b.n	800a11a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a116:	2300      	movs	r3, #0
 800a118:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a11a:	6979      	ldr	r1, [r7, #20]
 800a11c:	69f8      	ldr	r0, [r7, #28]
 800a11e:	f001 f92d 	bl	800b37c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a122:	69fb      	ldr	r3, [r7, #28]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3720      	adds	r7, #32
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b086      	sub	sp, #24
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d103      	bne.n	800a14c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a144:	f06f 0303 	mvn.w	r3, #3
 800a148:	617b      	str	r3, [r7, #20]
 800a14a:	e039      	b.n	800a1c0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a14c:	f3ef 8305 	mrs	r3, IPSR
 800a150:	60fb      	str	r3, [r7, #12]
  return(result);
 800a152:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a154:	2b00      	cmp	r3, #0
 800a156:	d022      	beq.n	800a19e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a15e:	f06f 0303 	mvn.w	r3, #3
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	e02c      	b.n	800a1c0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a166:	2300      	movs	r3, #0
 800a168:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a16a:	f107 0308 	add.w	r3, r7, #8
 800a16e:	461a      	mov	r2, r3
 800a170:	2100      	movs	r1, #0
 800a172:	6938      	ldr	r0, [r7, #16]
 800a174:	f000 ff36 	bl	800afe4 <xQueueReceiveFromISR>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d003      	beq.n	800a186 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a17e:	f06f 0302 	mvn.w	r3, #2
 800a182:	617b      	str	r3, [r7, #20]
 800a184:	e01c      	b.n	800a1c0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d019      	beq.n	800a1c0 <osSemaphoreAcquire+0x94>
 800a18c:	4b0f      	ldr	r3, [pc, #60]	; (800a1cc <osSemaphoreAcquire+0xa0>)
 800a18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	e010      	b.n	800a1c0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6938      	ldr	r0, [r7, #16]
 800a1a2:	f000 fe13 	bl	800adcc <xQueueSemaphoreTake>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d009      	beq.n	800a1c0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a1b2:	f06f 0301 	mvn.w	r3, #1
 800a1b6:	617b      	str	r3, [r7, #20]
 800a1b8:	e002      	b.n	800a1c0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a1ba:	f06f 0302 	mvn.w	r3, #2
 800a1be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a1c0:	697b      	ldr	r3, [r7, #20]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3718      	adds	r7, #24
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	e000ed04 	.word	0xe000ed04

0800a1d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d103      	bne.n	800a1ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a1e6:	f06f 0303 	mvn.w	r3, #3
 800a1ea:	617b      	str	r3, [r7, #20]
 800a1ec:	e02c      	b.n	800a248 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1ee:	f3ef 8305 	mrs	r3, IPSR
 800a1f2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d01a      	beq.n	800a230 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a1fe:	f107 0308 	add.w	r3, r7, #8
 800a202:	4619      	mov	r1, r3
 800a204:	6938      	ldr	r0, [r7, #16]
 800a206:	f000 fc74 	bl	800aaf2 <xQueueGiveFromISR>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d003      	beq.n	800a218 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a210:	f06f 0302 	mvn.w	r3, #2
 800a214:	617b      	str	r3, [r7, #20]
 800a216:	e017      	b.n	800a248 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d014      	beq.n	800a248 <osSemaphoreRelease+0x78>
 800a21e:	4b0d      	ldr	r3, [pc, #52]	; (800a254 <osSemaphoreRelease+0x84>)
 800a220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	e00b      	b.n	800a248 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a230:	2300      	movs	r3, #0
 800a232:	2200      	movs	r2, #0
 800a234:	2100      	movs	r1, #0
 800a236:	6938      	ldr	r0, [r7, #16]
 800a238:	f000 fac2 	bl	800a7c0 <xQueueGenericSend>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d002      	beq.n	800a248 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a242:	f06f 0302 	mvn.w	r3, #2
 800a246:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a248:	697b      	ldr	r3, [r7, #20]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	e000ed04 	.word	0xe000ed04

0800a258 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a264:	f3ef 8305 	mrs	r3, IPSR
 800a268:	60fb      	str	r3, [r7, #12]
  return(result);
 800a26a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800a270:	f06f 0305 	mvn.w	r3, #5
 800a274:	617b      	str	r3, [r7, #20]
 800a276:	e00e      	b.n	800a296 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d103      	bne.n	800a286 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800a27e:	f06f 0303 	mvn.w	r3, #3
 800a282:	617b      	str	r3, [r7, #20]
 800a284:	e007      	b.n	800a296 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800a286:	6938      	ldr	r0, [r7, #16]
 800a288:	f001 f8a2 	bl	800b3d0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800a290:	6938      	ldr	r0, [r7, #16]
 800a292:	f000 ff27 	bl	800b0e4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a296:	697b      	ldr	r3, [r7, #20]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4a07      	ldr	r2, [pc, #28]	; (800a2cc <vApplicationGetIdleTaskMemory+0x2c>)
 800a2b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	4a06      	ldr	r2, [pc, #24]	; (800a2d0 <vApplicationGetIdleTaskMemory+0x30>)
 800a2b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2280      	movs	r2, #128	; 0x80
 800a2bc:	601a      	str	r2, [r3, #0]
}
 800a2be:	bf00      	nop
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	20005d30 	.word	0x20005d30
 800a2d0:	20005dec 	.word	0x20005dec

0800a2d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4a07      	ldr	r2, [pc, #28]	; (800a300 <vApplicationGetTimerTaskMemory+0x2c>)
 800a2e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	4a06      	ldr	r2, [pc, #24]	; (800a304 <vApplicationGetTimerTaskMemory+0x30>)
 800a2ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2f2:	601a      	str	r2, [r3, #0]
}
 800a2f4:	bf00      	nop
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	20005fec 	.word	0x20005fec
 800a304:	200060a8 	.word	0x200060a8

0800a308 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f103 0208 	add.w	r2, r3, #8
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a320:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f103 0208 	add.w	r2, r3, #8
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f103 0208 	add.w	r2, r3, #8
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a356:	bf00      	nop
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a362:	b480      	push	{r7}
 800a364:	b085      	sub	sp, #20
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	689a      	ldr	r2, [r3, #8]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	683a      	ldr	r2, [r7, #0]
 800a386:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	601a      	str	r2, [r3, #0]
}
 800a39e:	bf00      	nop
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b085      	sub	sp, #20
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3c0:	d103      	bne.n	800a3ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	e00c      	b.n	800a3e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	3308      	adds	r3, #8
 800a3ce:	60fb      	str	r3, [r7, #12]
 800a3d0:	e002      	b.n	800a3d8 <vListInsert+0x2e>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	60fb      	str	r3, [r7, #12]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d2f6      	bcs.n	800a3d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	683a      	ldr	r2, [r7, #0]
 800a3fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	1c5a      	adds	r2, r3, #1
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	601a      	str	r2, [r3, #0]
}
 800a410:	bf00      	nop
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	6892      	ldr	r2, [r2, #8]
 800a432:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	6852      	ldr	r2, [r2, #4]
 800a43c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	429a      	cmp	r2, r3
 800a446:	d103      	bne.n	800a450 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	689a      	ldr	r2, [r3, #8]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	1e5a      	subs	r2, r3, #1
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10a      	bne.n	800a49a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a496:	bf00      	nop
 800a498:	e7fe      	b.n	800a498 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a49a:	f002 fc9b 	bl	800cdd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a6:	68f9      	ldr	r1, [r7, #12]
 800a4a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4aa:	fb01 f303 	mul.w	r3, r1, r3
 800a4ae:	441a      	add	r2, r3
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	68f9      	ldr	r1, [r7, #12]
 800a4ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4d0:	fb01 f303 	mul.w	r3, r1, r3
 800a4d4:	441a      	add	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	22ff      	movs	r2, #255	; 0xff
 800a4de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	22ff      	movs	r2, #255	; 0xff
 800a4e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d114      	bne.n	800a51a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d01a      	beq.n	800a52e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	3310      	adds	r3, #16
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f001 fc4b 	bl	800bd98 <xTaskRemoveFromEventList>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d012      	beq.n	800a52e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a508:	4b0c      	ldr	r3, [pc, #48]	; (800a53c <xQueueGenericReset+0xcc>)
 800a50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a50e:	601a      	str	r2, [r3, #0]
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	e009      	b.n	800a52e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3310      	adds	r3, #16
 800a51e:	4618      	mov	r0, r3
 800a520:	f7ff fef2 	bl	800a308 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	3324      	adds	r3, #36	; 0x24
 800a528:	4618      	mov	r0, r3
 800a52a:	f7ff feed 	bl	800a308 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a52e:	f002 fc81 	bl	800ce34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a532:	2301      	movs	r3, #1
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	e000ed04 	.word	0xe000ed04

0800a540 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08e      	sub	sp, #56	; 0x38
 800a544:	af02      	add	r7, sp, #8
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
 800a54c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10a      	bne.n	800a56a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a558:	f383 8811 	msr	BASEPRI, r3
 800a55c:	f3bf 8f6f 	isb	sy
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a566:	bf00      	nop
 800a568:	e7fe      	b.n	800a568 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10a      	bne.n	800a586 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a582:	bf00      	nop
 800a584:	e7fe      	b.n	800a584 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <xQueueGenericCreateStatic+0x52>
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <xQueueGenericCreateStatic+0x56>
 800a592:	2301      	movs	r3, #1
 800a594:	e000      	b.n	800a598 <xQueueGenericCreateStatic+0x58>
 800a596:	2300      	movs	r3, #0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10a      	bne.n	800a5b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	623b      	str	r3, [r7, #32]
}
 800a5ae:	bf00      	nop
 800a5b0:	e7fe      	b.n	800a5b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d102      	bne.n	800a5be <xQueueGenericCreateStatic+0x7e>
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d101      	bne.n	800a5c2 <xQueueGenericCreateStatic+0x82>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e000      	b.n	800a5c4 <xQueueGenericCreateStatic+0x84>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10a      	bne.n	800a5de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	61fb      	str	r3, [r7, #28]
}
 800a5da:	bf00      	nop
 800a5dc:	e7fe      	b.n	800a5dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5de:	2350      	movs	r3, #80	; 0x50
 800a5e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	2b50      	cmp	r3, #80	; 0x50
 800a5e6:	d00a      	beq.n	800a5fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	61bb      	str	r3, [r7, #24]
}
 800a5fa:	bf00      	nop
 800a5fc:	e7fe      	b.n	800a5fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a5fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00d      	beq.n	800a626 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a612:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	4613      	mov	r3, r2
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	68b9      	ldr	r1, [r7, #8]
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f000 f83f 	bl	800a6a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a628:	4618      	mov	r0, r3
 800a62a:	3730      	adds	r7, #48	; 0x30
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a630:	b580      	push	{r7, lr}
 800a632:	b08a      	sub	sp, #40	; 0x28
 800a634:	af02      	add	r7, sp, #8
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	4613      	mov	r3, r2
 800a63c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10a      	bne.n	800a65a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	613b      	str	r3, [r7, #16]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	fb02 f303 	mul.w	r3, r2, r3
 800a662:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	3350      	adds	r3, #80	; 0x50
 800a668:	4618      	mov	r0, r3
 800a66a:	f002 fcd5 	bl	800d018 <pvPortMalloc>
 800a66e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d011      	beq.n	800a69a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	3350      	adds	r3, #80	; 0x50
 800a67e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a688:	79fa      	ldrb	r2, [r7, #7]
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	4613      	mov	r3, r2
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	68b9      	ldr	r1, [r7, #8]
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 f805 	bl	800a6a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a69a:	69bb      	ldr	r3, [r7, #24]
	}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3720      	adds	r7, #32
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
 800a6b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d103      	bne.n	800a6c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	69ba      	ldr	r2, [r7, #24]
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	e002      	b.n	800a6c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	69b8      	ldr	r0, [r7, #24]
 800a6d6:	f7ff fecb 	bl	800a470 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	78fa      	ldrb	r2, [r7, #3]
 800a6de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6e2:	bf00      	nop
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b08a      	sub	sp, #40	; 0x28
 800a6ee:	af02      	add	r7, sp, #8
 800a6f0:	60f8      	str	r0, [r7, #12]
 800a6f2:	60b9      	str	r1, [r7, #8]
 800a6f4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10a      	bne.n	800a712 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a700:	f383 8811 	msr	BASEPRI, r3
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	61bb      	str	r3, [r7, #24]
}
 800a70e:	bf00      	nop
 800a710:	e7fe      	b.n	800a710 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	429a      	cmp	r2, r3
 800a718:	d90a      	bls.n	800a730 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	617b      	str	r3, [r7, #20]
}
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a730:	2302      	movs	r3, #2
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	2100      	movs	r1, #0
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f7ff ff00 	bl	800a540 <xQueueGenericCreateStatic>
 800a740:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a74e:	69fb      	ldr	r3, [r7, #28]
	}
 800a750:	4618      	mov	r0, r3
 800a752:	3720      	adds	r7, #32
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10a      	bne.n	800a77e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76c:	f383 8811 	msr	BASEPRI, r3
 800a770:	f3bf 8f6f 	isb	sy
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	613b      	str	r3, [r7, #16]
}
 800a77a:	bf00      	nop
 800a77c:	e7fe      	b.n	800a77c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	429a      	cmp	r2, r3
 800a784:	d90a      	bls.n	800a79c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	60fb      	str	r3, [r7, #12]
}
 800a798:	bf00      	nop
 800a79a:	e7fe      	b.n	800a79a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a79c:	2202      	movs	r2, #2
 800a79e:	2100      	movs	r1, #0
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff ff45 	bl	800a630 <xQueueGenericCreate>
 800a7a6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d002      	beq.n	800a7b4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a7b4:	697b      	ldr	r3, [r7, #20]
	}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
	...

0800a7c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b08e      	sub	sp, #56	; 0x38
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10a      	bne.n	800a7f2 <xQueueGenericSend+0x32>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7ee:	bf00      	nop
 800a7f0:	e7fe      	b.n	800a7f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d103      	bne.n	800a800 <xQueueGenericSend+0x40>
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <xQueueGenericSend+0x44>
 800a800:	2301      	movs	r3, #1
 800a802:	e000      	b.n	800a806 <xQueueGenericSend+0x46>
 800a804:	2300      	movs	r3, #0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10a      	bne.n	800a820 <xQueueGenericSend+0x60>
	__asm volatile
 800a80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a81c:	bf00      	nop
 800a81e:	e7fe      	b.n	800a81e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	2b02      	cmp	r3, #2
 800a824:	d103      	bne.n	800a82e <xQueueGenericSend+0x6e>
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d101      	bne.n	800a832 <xQueueGenericSend+0x72>
 800a82e:	2301      	movs	r3, #1
 800a830:	e000      	b.n	800a834 <xQueueGenericSend+0x74>
 800a832:	2300      	movs	r3, #0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10a      	bne.n	800a84e <xQueueGenericSend+0x8e>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	623b      	str	r3, [r7, #32]
}
 800a84a:	bf00      	nop
 800a84c:	e7fe      	b.n	800a84c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a84e:	f001 fc65 	bl	800c11c <xTaskGetSchedulerState>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d102      	bne.n	800a85e <xQueueGenericSend+0x9e>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d101      	bne.n	800a862 <xQueueGenericSend+0xa2>
 800a85e:	2301      	movs	r3, #1
 800a860:	e000      	b.n	800a864 <xQueueGenericSend+0xa4>
 800a862:	2300      	movs	r3, #0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10a      	bne.n	800a87e <xQueueGenericSend+0xbe>
	__asm volatile
 800a868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	61fb      	str	r3, [r7, #28]
}
 800a87a:	bf00      	nop
 800a87c:	e7fe      	b.n	800a87c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a87e:	f002 faa9 	bl	800cdd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d302      	bcc.n	800a894 <xQueueGenericSend+0xd4>
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d129      	bne.n	800a8e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	68b9      	ldr	r1, [r7, #8]
 800a898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a89a:	f000 fc5e 	bl	800b15a <prvCopyDataToQueue>
 800a89e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d010      	beq.n	800a8ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8aa:	3324      	adds	r3, #36	; 0x24
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f001 fa73 	bl	800bd98 <xTaskRemoveFromEventList>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d013      	beq.n	800a8e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a8b8:	4b3f      	ldr	r3, [pc, #252]	; (800a9b8 <xQueueGenericSend+0x1f8>)
 800a8ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8be:	601a      	str	r2, [r3, #0]
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	e00a      	b.n	800a8e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d007      	beq.n	800a8e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a8d0:	4b39      	ldr	r3, [pc, #228]	; (800a9b8 <xQueueGenericSend+0x1f8>)
 800a8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8d6:	601a      	str	r2, [r3, #0]
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a8e0:	f002 faa8 	bl	800ce34 <vPortExitCritical>
				return pdPASS;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e063      	b.n	800a9b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d103      	bne.n	800a8f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8ee:	f002 faa1 	bl	800ce34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	e05c      	b.n	800a9b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d106      	bne.n	800a90a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8fc:	f107 0314 	add.w	r3, r7, #20
 800a900:	4618      	mov	r0, r3
 800a902:	f001 faad 	bl	800be60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a906:	2301      	movs	r3, #1
 800a908:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a90a:	f002 fa93 	bl	800ce34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a90e:	f001 f819 	bl	800b944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a912:	f002 fa5f 	bl	800cdd4 <vPortEnterCritical>
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a91c:	b25b      	sxtb	r3, r3
 800a91e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a922:	d103      	bne.n	800a92c <xQueueGenericSend+0x16c>
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a932:	b25b      	sxtb	r3, r3
 800a934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a938:	d103      	bne.n	800a942 <xQueueGenericSend+0x182>
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	2200      	movs	r2, #0
 800a93e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a942:	f002 fa77 	bl	800ce34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a946:	1d3a      	adds	r2, r7, #4
 800a948:	f107 0314 	add.w	r3, r7, #20
 800a94c:	4611      	mov	r1, r2
 800a94e:	4618      	mov	r0, r3
 800a950:	f001 fa9c 	bl	800be8c <xTaskCheckForTimeOut>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d124      	bne.n	800a9a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a95a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a95c:	f000 fcf5 	bl	800b34a <prvIsQueueFull>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d018      	beq.n	800a998 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	3310      	adds	r3, #16
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	4611      	mov	r1, r2
 800a96e:	4618      	mov	r0, r3
 800a970:	f001 f9c2 	bl	800bcf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a976:	f000 fc80 	bl	800b27a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a97a:	f000 fff1 	bl	800b960 <xTaskResumeAll>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	f47f af7c 	bne.w	800a87e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a986:	4b0c      	ldr	r3, [pc, #48]	; (800a9b8 <xQueueGenericSend+0x1f8>)
 800a988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a98c:	601a      	str	r2, [r3, #0]
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	f3bf 8f6f 	isb	sy
 800a996:	e772      	b.n	800a87e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a99a:	f000 fc6e 	bl	800b27a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a99e:	f000 ffdf 	bl	800b960 <xTaskResumeAll>
 800a9a2:	e76c      	b.n	800a87e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9a6:	f000 fc68 	bl	800b27a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9aa:	f000 ffd9 	bl	800b960 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3738      	adds	r7, #56	; 0x38
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	e000ed04 	.word	0xe000ed04

0800a9bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b090      	sub	sp, #64	; 0x40
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
 800a9c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10a      	bne.n	800a9ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	f383 8811 	msr	BASEPRI, r3
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a9e6:	bf00      	nop
 800a9e8:	e7fe      	b.n	800a9e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d103      	bne.n	800a9f8 <xQueueGenericSendFromISR+0x3c>
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d101      	bne.n	800a9fc <xQueueGenericSendFromISR+0x40>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e000      	b.n	800a9fe <xQueueGenericSendFromISR+0x42>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10a      	bne.n	800aa18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	f3bf 8f6f 	isb	sy
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa14:	bf00      	nop
 800aa16:	e7fe      	b.n	800aa16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d103      	bne.n	800aa26 <xQueueGenericSendFromISR+0x6a>
 800aa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d101      	bne.n	800aa2a <xQueueGenericSendFromISR+0x6e>
 800aa26:	2301      	movs	r3, #1
 800aa28:	e000      	b.n	800aa2c <xQueueGenericSendFromISR+0x70>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10a      	bne.n	800aa46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	623b      	str	r3, [r7, #32]
}
 800aa42:	bf00      	nop
 800aa44:	e7fe      	b.n	800aa44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa46:	f002 faa7 	bl	800cf98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa4a:	f3ef 8211 	mrs	r2, BASEPRI
 800aa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	61fa      	str	r2, [r7, #28]
 800aa60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d302      	bcc.n	800aa78 <xQueueGenericSendFromISR+0xbc>
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d12f      	bne.n	800aad8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	68b9      	ldr	r1, [r7, #8]
 800aa8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa8e:	f000 fb64 	bl	800b15a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aa96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa9a:	d112      	bne.n	800aac2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d016      	beq.n	800aad2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa6:	3324      	adds	r3, #36	; 0x24
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f001 f975 	bl	800bd98 <xTaskRemoveFromEventList>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00e      	beq.n	800aad2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00b      	beq.n	800aad2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	601a      	str	r2, [r3, #0]
 800aac0:	e007      	b.n	800aad2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aac2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aac6:	3301      	adds	r3, #1
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	b25a      	sxtb	r2, r3
 800aacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aad2:	2301      	movs	r3, #1
 800aad4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aad6:	e001      	b.n	800aadc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aad8:	2300      	movs	r3, #0
 800aada:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aade:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aae6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3740      	adds	r7, #64	; 0x40
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b08e      	sub	sp, #56	; 0x38
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10a      	bne.n	800ab1c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ab06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0a:	f383 8811 	msr	BASEPRI, r3
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f3bf 8f4f 	dsb	sy
 800ab16:	623b      	str	r3, [r7, #32]
}
 800ab18:	bf00      	nop
 800ab1a:	e7fe      	b.n	800ab1a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00a      	beq.n	800ab3a <xQueueGiveFromISR+0x48>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	61fb      	str	r3, [r7, #28]
}
 800ab36:	bf00      	nop
 800ab38:	e7fe      	b.n	800ab38 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d103      	bne.n	800ab4a <xQueueGiveFromISR+0x58>
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <xQueueGiveFromISR+0x5c>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e000      	b.n	800ab50 <xQueueGiveFromISR+0x5e>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10a      	bne.n	800ab6a <xQueueGiveFromISR+0x78>
	__asm volatile
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	61bb      	str	r3, [r7, #24]
}
 800ab66:	bf00      	nop
 800ab68:	e7fe      	b.n	800ab68 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab6a:	f002 fa15 	bl	800cf98 <vPortValidateInterruptPriority>
	__asm volatile
 800ab6e:	f3ef 8211 	mrs	r2, BASEPRI
 800ab72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	617a      	str	r2, [r7, #20]
 800ab84:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ab86:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d22b      	bcs.n	800abf2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800abac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abb4:	d112      	bne.n	800abdc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d016      	beq.n	800abec <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc0:	3324      	adds	r3, #36	; 0x24
 800abc2:	4618      	mov	r0, r3
 800abc4:	f001 f8e8 	bl	800bd98 <xTaskRemoveFromEventList>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00e      	beq.n	800abec <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00b      	beq.n	800abec <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2201      	movs	r2, #1
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	e007      	b.n	800abec <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800abdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abe0:	3301      	adds	r3, #1
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	b25a      	sxtb	r2, r3
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800abec:	2301      	movs	r3, #1
 800abee:	637b      	str	r3, [r7, #52]	; 0x34
 800abf0:	e001      	b.n	800abf6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	637b      	str	r3, [r7, #52]	; 0x34
 800abf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f383 8811 	msr	BASEPRI, r3
}
 800ac00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3738      	adds	r7, #56	; 0x38
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b08c      	sub	sp, #48	; 0x30
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d10a      	bne.n	800ac3c <xQueueReceive+0x30>
	__asm volatile
 800ac26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2a:	f383 8811 	msr	BASEPRI, r3
 800ac2e:	f3bf 8f6f 	isb	sy
 800ac32:	f3bf 8f4f 	dsb	sy
 800ac36:	623b      	str	r3, [r7, #32]
}
 800ac38:	bf00      	nop
 800ac3a:	e7fe      	b.n	800ac3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d103      	bne.n	800ac4a <xQueueReceive+0x3e>
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <xQueueReceive+0x42>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e000      	b.n	800ac50 <xQueueReceive+0x44>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10a      	bne.n	800ac6a <xQueueReceive+0x5e>
	__asm volatile
 800ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	61fb      	str	r3, [r7, #28]
}
 800ac66:	bf00      	nop
 800ac68:	e7fe      	b.n	800ac68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac6a:	f001 fa57 	bl	800c11c <xTaskGetSchedulerState>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <xQueueReceive+0x6e>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <xQueueReceive+0x72>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e000      	b.n	800ac80 <xQueueReceive+0x74>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10a      	bne.n	800ac9a <xQueueReceive+0x8e>
	__asm volatile
 800ac84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	61bb      	str	r3, [r7, #24]
}
 800ac96:	bf00      	nop
 800ac98:	e7fe      	b.n	800ac98 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac9a:	f002 f89b 	bl	800cdd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d01f      	beq.n	800acea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acaa:	68b9      	ldr	r1, [r7, #8]
 800acac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acae:	f000 fabe 	bl	800b22e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800acb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb4:	1e5a      	subs	r2, r3, #1
 800acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00f      	beq.n	800ace2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc4:	3310      	adds	r3, #16
 800acc6:	4618      	mov	r0, r3
 800acc8:	f001 f866 	bl	800bd98 <xTaskRemoveFromEventList>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d007      	beq.n	800ace2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acd2:	4b3d      	ldr	r3, [pc, #244]	; (800adc8 <xQueueReceive+0x1bc>)
 800acd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ace2:	f002 f8a7 	bl	800ce34 <vPortExitCritical>
				return pdPASS;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e069      	b.n	800adbe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d103      	bne.n	800acf8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800acf0:	f002 f8a0 	bl	800ce34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800acf4:	2300      	movs	r3, #0
 800acf6:	e062      	b.n	800adbe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d106      	bne.n	800ad0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acfe:	f107 0310 	add.w	r3, r7, #16
 800ad02:	4618      	mov	r0, r3
 800ad04:	f001 f8ac 	bl	800be60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad0c:	f002 f892 	bl	800ce34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad10:	f000 fe18 	bl	800b944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad14:	f002 f85e 	bl	800cdd4 <vPortEnterCritical>
 800ad18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad1e:	b25b      	sxtb	r3, r3
 800ad20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad24:	d103      	bne.n	800ad2e <xQueueReceive+0x122>
 800ad26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad34:	b25b      	sxtb	r3, r3
 800ad36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad3a:	d103      	bne.n	800ad44 <xQueueReceive+0x138>
 800ad3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad44:	f002 f876 	bl	800ce34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad48:	1d3a      	adds	r2, r7, #4
 800ad4a:	f107 0310 	add.w	r3, r7, #16
 800ad4e:	4611      	mov	r1, r2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f001 f89b 	bl	800be8c <xTaskCheckForTimeOut>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d123      	bne.n	800ada4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad5e:	f000 fade 	bl	800b31e <prvIsQueueEmpty>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d017      	beq.n	800ad98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6a:	3324      	adds	r3, #36	; 0x24
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	4611      	mov	r1, r2
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 ffc1 	bl	800bcf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad78:	f000 fa7f 	bl	800b27a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad7c:	f000 fdf0 	bl	800b960 <xTaskResumeAll>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d189      	bne.n	800ac9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ad86:	4b10      	ldr	r3, [pc, #64]	; (800adc8 <xQueueReceive+0x1bc>)
 800ad88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad8c:	601a      	str	r2, [r3, #0]
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	f3bf 8f6f 	isb	sy
 800ad96:	e780      	b.n	800ac9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad9a:	f000 fa6e 	bl	800b27a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad9e:	f000 fddf 	bl	800b960 <xTaskResumeAll>
 800ada2:	e77a      	b.n	800ac9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ada4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ada6:	f000 fa68 	bl	800b27a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adaa:	f000 fdd9 	bl	800b960 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adb0:	f000 fab5 	bl	800b31e <prvIsQueueEmpty>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f43f af6f 	beq.w	800ac9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800adbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3730      	adds	r7, #48	; 0x30
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	e000ed04 	.word	0xe000ed04

0800adcc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b08e      	sub	sp, #56	; 0x38
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800add6:	2300      	movs	r3, #0
 800add8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800adde:	2300      	movs	r3, #0
 800ade0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ade2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10a      	bne.n	800adfe <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ade8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	623b      	str	r3, [r7, #32]
}
 800adfa:	bf00      	nop
 800adfc:	e7fe      	b.n	800adfc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800adfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00a      	beq.n	800ae1c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	61fb      	str	r3, [r7, #28]
}
 800ae18:	bf00      	nop
 800ae1a:	e7fe      	b.n	800ae1a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae1c:	f001 f97e 	bl	800c11c <xTaskGetSchedulerState>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d102      	bne.n	800ae2c <xQueueSemaphoreTake+0x60>
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <xQueueSemaphoreTake+0x64>
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e000      	b.n	800ae32 <xQueueSemaphoreTake+0x66>
 800ae30:	2300      	movs	r3, #0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10a      	bne.n	800ae4c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ae36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	61bb      	str	r3, [r7, #24]
}
 800ae48:	bf00      	nop
 800ae4a:	e7fe      	b.n	800ae4a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae4c:	f001 ffc2 	bl	800cdd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ae50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae54:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ae56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d024      	beq.n	800aea6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	1e5a      	subs	r2, r3, #1
 800ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae62:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d104      	bne.n	800ae76 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ae6c:	f001 facc 	bl	800c408 <pvTaskIncrementMutexHeldCount>
 800ae70:	4602      	mov	r2, r0
 800ae72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae74:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00f      	beq.n	800ae9e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae80:	3310      	adds	r3, #16
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 ff88 	bl	800bd98 <xTaskRemoveFromEventList>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d007      	beq.n	800ae9e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae8e:	4b54      	ldr	r3, [pc, #336]	; (800afe0 <xQueueSemaphoreTake+0x214>)
 800ae90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae9e:	f001 ffc9 	bl	800ce34 <vPortExitCritical>
				return pdPASS;
 800aea2:	2301      	movs	r3, #1
 800aea4:	e097      	b.n	800afd6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d111      	bne.n	800aed0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00a      	beq.n	800aec8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	617b      	str	r3, [r7, #20]
}
 800aec4:	bf00      	nop
 800aec6:	e7fe      	b.n	800aec6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aec8:	f001 ffb4 	bl	800ce34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aecc:	2300      	movs	r3, #0
 800aece:	e082      	b.n	800afd6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d106      	bne.n	800aee4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aed6:	f107 030c 	add.w	r3, r7, #12
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 ffc0 	bl	800be60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aee0:	2301      	movs	r3, #1
 800aee2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aee4:	f001 ffa6 	bl	800ce34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aee8:	f000 fd2c 	bl	800b944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aeec:	f001 ff72 	bl	800cdd4 <vPortEnterCritical>
 800aef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aef6:	b25b      	sxtb	r3, r3
 800aef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aefc:	d103      	bne.n	800af06 <xQueueSemaphoreTake+0x13a>
 800aefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af00:	2200      	movs	r2, #0
 800af02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af0c:	b25b      	sxtb	r3, r3
 800af0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af12:	d103      	bne.n	800af1c <xQueueSemaphoreTake+0x150>
 800af14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af1c:	f001 ff8a 	bl	800ce34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af20:	463a      	mov	r2, r7
 800af22:	f107 030c 	add.w	r3, r7, #12
 800af26:	4611      	mov	r1, r2
 800af28:	4618      	mov	r0, r3
 800af2a:	f000 ffaf 	bl	800be8c <xTaskCheckForTimeOut>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d132      	bne.n	800af9a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af36:	f000 f9f2 	bl	800b31e <prvIsQueueEmpty>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d026      	beq.n	800af8e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d109      	bne.n	800af5c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800af48:	f001 ff44 	bl	800cdd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	4618      	mov	r0, r3
 800af52:	f001 f901 	bl	800c158 <xTaskPriorityInherit>
 800af56:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800af58:	f001 ff6c 	bl	800ce34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af5e:	3324      	adds	r3, #36	; 0x24
 800af60:	683a      	ldr	r2, [r7, #0]
 800af62:	4611      	mov	r1, r2
 800af64:	4618      	mov	r0, r3
 800af66:	f000 fec7 	bl	800bcf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af6c:	f000 f985 	bl	800b27a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af70:	f000 fcf6 	bl	800b960 <xTaskResumeAll>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	f47f af68 	bne.w	800ae4c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800af7c:	4b18      	ldr	r3, [pc, #96]	; (800afe0 <xQueueSemaphoreTake+0x214>)
 800af7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af82:	601a      	str	r2, [r3, #0]
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	e75e      	b.n	800ae4c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800af8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af90:	f000 f973 	bl	800b27a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af94:	f000 fce4 	bl	800b960 <xTaskResumeAll>
 800af98:	e758      	b.n	800ae4c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af9c:	f000 f96d 	bl	800b27a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afa0:	f000 fcde 	bl	800b960 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afa6:	f000 f9ba 	bl	800b31e <prvIsQueueEmpty>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	f43f af4d 	beq.w	800ae4c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00d      	beq.n	800afd4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800afb8:	f001 ff0c 	bl	800cdd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800afbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afbe:	f000 f8b4 	bl	800b12a <prvGetDisinheritPriorityAfterTimeout>
 800afc2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800afc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afca:	4618      	mov	r0, r3
 800afcc:	f001 f99a 	bl	800c304 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800afd0:	f001 ff30 	bl	800ce34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800afd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3738      	adds	r7, #56	; 0x38
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	e000ed04 	.word	0xe000ed04

0800afe4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b08e      	sub	sp, #56	; 0x38
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10a      	bne.n	800b010 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800affa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	623b      	str	r3, [r7, #32]
}
 800b00c:	bf00      	nop
 800b00e:	e7fe      	b.n	800b00e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d103      	bne.n	800b01e <xQueueReceiveFromISR+0x3a>
 800b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d101      	bne.n	800b022 <xQueueReceiveFromISR+0x3e>
 800b01e:	2301      	movs	r3, #1
 800b020:	e000      	b.n	800b024 <xQueueReceiveFromISR+0x40>
 800b022:	2300      	movs	r3, #0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10a      	bne.n	800b03e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02c:	f383 8811 	msr	BASEPRI, r3
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	61fb      	str	r3, [r7, #28]
}
 800b03a:	bf00      	nop
 800b03c:	e7fe      	b.n	800b03c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b03e:	f001 ffab 	bl	800cf98 <vPortValidateInterruptPriority>
	__asm volatile
 800b042:	f3ef 8211 	mrs	r2, BASEPRI
 800b046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04a:	f383 8811 	msr	BASEPRI, r3
 800b04e:	f3bf 8f6f 	isb	sy
 800b052:	f3bf 8f4f 	dsb	sy
 800b056:	61ba      	str	r2, [r7, #24]
 800b058:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b05a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b05c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b062:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b066:	2b00      	cmp	r3, #0
 800b068:	d02f      	beq.n	800b0ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b074:	68b9      	ldr	r1, [r7, #8]
 800b076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b078:	f000 f8d9 	bl	800b22e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07e:	1e5a      	subs	r2, r3, #1
 800b080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b082:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b084:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b08c:	d112      	bne.n	800b0b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d016      	beq.n	800b0c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b098:	3310      	adds	r3, #16
 800b09a:	4618      	mov	r0, r3
 800b09c:	f000 fe7c 	bl	800bd98 <xTaskRemoveFromEventList>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00e      	beq.n	800b0c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00b      	beq.n	800b0c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	601a      	str	r2, [r3, #0]
 800b0b2:	e007      	b.n	800b0c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b0b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	b25a      	sxtb	r2, r3
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	637b      	str	r3, [r7, #52]	; 0x34
 800b0c8:	e001      	b.n	800b0ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	f383 8811 	msr	BASEPRI, r3
}
 800b0d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3738      	adds	r7, #56	; 0x38
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10a      	bne.n	800b10c <vQueueDelete+0x28>
	__asm volatile
 800b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	60bb      	str	r3, [r7, #8]
}
 800b108:	bf00      	nop
 800b10a:	e7fe      	b.n	800b10a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f000 f95f 	bl	800b3d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d102      	bne.n	800b122 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f002 f847 	bl	800d1b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b122:	bf00      	nop
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b12a:	b480      	push	{r7}
 800b12c:	b085      	sub	sp, #20
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b136:	2b00      	cmp	r3, #0
 800b138:	d006      	beq.n	800b148 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b144:	60fb      	str	r3, [r7, #12]
 800b146:	e001      	b.n	800b14c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b148:	2300      	movs	r3, #0
 800b14a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b14c:	68fb      	ldr	r3, [r7, #12]
	}
 800b14e:	4618      	mov	r0, r3
 800b150:	3714      	adds	r7, #20
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b086      	sub	sp, #24
 800b15e:	af00      	add	r7, sp, #0
 800b160:	60f8      	str	r0, [r7, #12]
 800b162:	60b9      	str	r1, [r7, #8]
 800b164:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b166:	2300      	movs	r3, #0
 800b168:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10d      	bne.n	800b194 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d14d      	bne.n	800b21c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	4618      	mov	r0, r3
 800b186:	f001 f84f 	bl	800c228 <xTaskPriorityDisinherit>
 800b18a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	609a      	str	r2, [r3, #8]
 800b192:	e043      	b.n	800b21c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d119      	bne.n	800b1ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6858      	ldr	r0, [r3, #4]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	68b9      	ldr	r1, [r7, #8]
 800b1a6:	f003 fb13 	bl	800e7d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	685a      	ldr	r2, [r3, #4]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b2:	441a      	add	r2, r3
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d32b      	bcc.n	800b21c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	605a      	str	r2, [r3, #4]
 800b1cc:	e026      	b.n	800b21c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	68d8      	ldr	r0, [r3, #12]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	68b9      	ldr	r1, [r7, #8]
 800b1da:	f003 faf9 	bl	800e7d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	68da      	ldr	r2, [r3, #12]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e6:	425b      	negs	r3, r3
 800b1e8:	441a      	add	r2, r3
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	68da      	ldr	r2, [r3, #12]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d207      	bcs.n	800b20a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	689a      	ldr	r2, [r3, #8]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b202:	425b      	negs	r3, r3
 800b204:	441a      	add	r2, r3
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d105      	bne.n	800b21c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d002      	beq.n	800b21c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	3b01      	subs	r3, #1
 800b21a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b224:	697b      	ldr	r3, [r7, #20]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b082      	sub	sp, #8
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d018      	beq.n	800b272 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	68da      	ldr	r2, [r3, #12]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b248:	441a      	add	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68da      	ldr	r2, [r3, #12]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	429a      	cmp	r2, r3
 800b258:	d303      	bcc.n	800b262 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68d9      	ldr	r1, [r3, #12]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26a:	461a      	mov	r2, r3
 800b26c:	6838      	ldr	r0, [r7, #0]
 800b26e:	f003 faaf 	bl	800e7d0 <memcpy>
	}
}
 800b272:	bf00      	nop
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b282:	f001 fda7 	bl	800cdd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b28c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b28e:	e011      	b.n	800b2b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b294:	2b00      	cmp	r3, #0
 800b296:	d012      	beq.n	800b2be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	3324      	adds	r3, #36	; 0x24
 800b29c:	4618      	mov	r0, r3
 800b29e:	f000 fd7b 	bl	800bd98 <xTaskRemoveFromEventList>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2a8:	f000 fe52 	bl	800bf50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	dce9      	bgt.n	800b290 <prvUnlockQueue+0x16>
 800b2bc:	e000      	b.n	800b2c0 <prvUnlockQueue+0x46>
					break;
 800b2be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	22ff      	movs	r2, #255	; 0xff
 800b2c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b2c8:	f001 fdb4 	bl	800ce34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2cc:	f001 fd82 	bl	800cdd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2d8:	e011      	b.n	800b2fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d012      	beq.n	800b308 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3310      	adds	r3, #16
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 fd56 	bl	800bd98 <xTaskRemoveFromEventList>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b2f2:	f000 fe2d 	bl	800bf50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b2f6:	7bbb      	ldrb	r3, [r7, #14]
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b302:	2b00      	cmp	r3, #0
 800b304:	dce9      	bgt.n	800b2da <prvUnlockQueue+0x60>
 800b306:	e000      	b.n	800b30a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b308:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	22ff      	movs	r2, #255	; 0xff
 800b30e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b312:	f001 fd8f 	bl	800ce34 <vPortExitCritical>
}
 800b316:	bf00      	nop
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b084      	sub	sp, #16
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b326:	f001 fd55 	bl	800cdd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d102      	bne.n	800b338 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b332:	2301      	movs	r3, #1
 800b334:	60fb      	str	r3, [r7, #12]
 800b336:	e001      	b.n	800b33c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b338:	2300      	movs	r3, #0
 800b33a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b33c:	f001 fd7a 	bl	800ce34 <vPortExitCritical>

	return xReturn;
 800b340:	68fb      	ldr	r3, [r7, #12]
}
 800b342:	4618      	mov	r0, r3
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b084      	sub	sp, #16
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b352:	f001 fd3f 	bl	800cdd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b35e:	429a      	cmp	r2, r3
 800b360:	d102      	bne.n	800b368 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b362:	2301      	movs	r3, #1
 800b364:	60fb      	str	r3, [r7, #12]
 800b366:	e001      	b.n	800b36c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b368:	2300      	movs	r3, #0
 800b36a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b36c:	f001 fd62 	bl	800ce34 <vPortExitCritical>

	return xReturn;
 800b370:	68fb      	ldr	r3, [r7, #12]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
	...

0800b37c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b386:	2300      	movs	r3, #0
 800b388:	60fb      	str	r3, [r7, #12]
 800b38a:	e014      	b.n	800b3b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b38c:	4a0f      	ldr	r2, [pc, #60]	; (800b3cc <vQueueAddToRegistry+0x50>)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10b      	bne.n	800b3b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b398:	490c      	ldr	r1, [pc, #48]	; (800b3cc <vQueueAddToRegistry+0x50>)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	683a      	ldr	r2, [r7, #0]
 800b39e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b3a2:	4a0a      	ldr	r2, [pc, #40]	; (800b3cc <vQueueAddToRegistry+0x50>)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	00db      	lsls	r3, r3, #3
 800b3a8:	4413      	add	r3, r2
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3ae:	e006      	b.n	800b3be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	60fb      	str	r3, [r7, #12]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b07      	cmp	r3, #7
 800b3ba:	d9e7      	bls.n	800b38c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3bc:	bf00      	nop
 800b3be:	bf00      	nop
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	200064a8 	.word	0x200064a8

0800b3d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3d8:	2300      	movs	r3, #0
 800b3da:	60fb      	str	r3, [r7, #12]
 800b3dc:	e016      	b.n	800b40c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b3de:	4a10      	ldr	r2, [pc, #64]	; (800b420 <vQueueUnregisterQueue+0x50>)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	00db      	lsls	r3, r3, #3
 800b3e4:	4413      	add	r3, r2
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d10b      	bne.n	800b406 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b3ee:	4a0c      	ldr	r2, [pc, #48]	; (800b420 <vQueueUnregisterQueue+0x50>)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b3f8:	4a09      	ldr	r2, [pc, #36]	; (800b420 <vQueueUnregisterQueue+0x50>)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	00db      	lsls	r3, r3, #3
 800b3fe:	4413      	add	r3, r2
 800b400:	2200      	movs	r2, #0
 800b402:	605a      	str	r2, [r3, #4]
				break;
 800b404:	e006      	b.n	800b414 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3301      	adds	r3, #1
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2b07      	cmp	r3, #7
 800b410:	d9e5      	bls.n	800b3de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b412:	bf00      	nop
 800b414:	bf00      	nop
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	200064a8 	.word	0x200064a8

0800b424 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b434:	f001 fcce 	bl	800cdd4 <vPortEnterCritical>
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b43e:	b25b      	sxtb	r3, r3
 800b440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b444:	d103      	bne.n	800b44e <vQueueWaitForMessageRestricted+0x2a>
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b454:	b25b      	sxtb	r3, r3
 800b456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b45a:	d103      	bne.n	800b464 <vQueueWaitForMessageRestricted+0x40>
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b464:	f001 fce6 	bl	800ce34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d106      	bne.n	800b47e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	3324      	adds	r3, #36	; 0x24
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	68b9      	ldr	r1, [r7, #8]
 800b478:	4618      	mov	r0, r3
 800b47a:	f000 fc61 	bl	800bd40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b47e:	6978      	ldr	r0, [r7, #20]
 800b480:	f7ff fefb 	bl	800b27a <prvUnlockQueue>
	}
 800b484:	bf00      	nop
 800b486:	3718      	adds	r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08e      	sub	sp, #56	; 0x38
 800b490:	af04      	add	r7, sp, #16
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
 800b498:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10a      	bne.n	800b4b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	623b      	str	r3, [r7, #32]
}
 800b4b2:	bf00      	nop
 800b4b4:	e7fe      	b.n	800b4b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10a      	bne.n	800b4d2 <xTaskCreateStatic+0x46>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	61fb      	str	r3, [r7, #28]
}
 800b4ce:	bf00      	nop
 800b4d0:	e7fe      	b.n	800b4d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b4d2:	23bc      	movs	r3, #188	; 0xbc
 800b4d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	2bbc      	cmp	r3, #188	; 0xbc
 800b4da:	d00a      	beq.n	800b4f2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e0:	f383 8811 	msr	BASEPRI, r3
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	61bb      	str	r3, [r7, #24]
}
 800b4ee:	bf00      	nop
 800b4f0:	e7fe      	b.n	800b4f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d01e      	beq.n	800b538 <xTaskCreateStatic+0xac>
 800b4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d01b      	beq.n	800b538 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b502:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b508:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50c:	2202      	movs	r2, #2
 800b50e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b512:	2300      	movs	r3, #0
 800b514:	9303      	str	r3, [sp, #12]
 800b516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b518:	9302      	str	r3, [sp, #8]
 800b51a:	f107 0314 	add.w	r3, r7, #20
 800b51e:	9301      	str	r3, [sp, #4]
 800b520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	68b9      	ldr	r1, [r7, #8]
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f000 f850 	bl	800b5d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b532:	f000 f8f3 	bl	800b71c <prvAddNewTaskToReadyList>
 800b536:	e001      	b.n	800b53c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b538:	2300      	movs	r3, #0
 800b53a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b53c:	697b      	ldr	r3, [r7, #20]
	}
 800b53e:	4618      	mov	r0, r3
 800b540:	3728      	adds	r7, #40	; 0x28
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b546:	b580      	push	{r7, lr}
 800b548:	b08c      	sub	sp, #48	; 0x30
 800b54a:	af04      	add	r7, sp, #16
 800b54c:	60f8      	str	r0, [r7, #12]
 800b54e:	60b9      	str	r1, [r7, #8]
 800b550:	603b      	str	r3, [r7, #0]
 800b552:	4613      	mov	r3, r2
 800b554:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b556:	88fb      	ldrh	r3, [r7, #6]
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	4618      	mov	r0, r3
 800b55c:	f001 fd5c 	bl	800d018 <pvPortMalloc>
 800b560:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00e      	beq.n	800b586 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b568:	20bc      	movs	r0, #188	; 0xbc
 800b56a:	f001 fd55 	bl	800d018 <pvPortMalloc>
 800b56e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d003      	beq.n	800b57e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	631a      	str	r2, [r3, #48]	; 0x30
 800b57c:	e005      	b.n	800b58a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b57e:	6978      	ldr	r0, [r7, #20]
 800b580:	f001 fe16 	bl	800d1b0 <vPortFree>
 800b584:	e001      	b.n	800b58a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b586:	2300      	movs	r3, #0
 800b588:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d017      	beq.n	800b5c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b598:	88fa      	ldrh	r2, [r7, #6]
 800b59a:	2300      	movs	r3, #0
 800b59c:	9303      	str	r3, [sp, #12]
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	9302      	str	r3, [sp, #8]
 800b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a4:	9301      	str	r3, [sp, #4]
 800b5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	68b9      	ldr	r1, [r7, #8]
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f000 f80e 	bl	800b5d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5b4:	69f8      	ldr	r0, [r7, #28]
 800b5b6:	f000 f8b1 	bl	800b71c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	61bb      	str	r3, [r7, #24]
 800b5be:	e002      	b.n	800b5c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b5c6:	69bb      	ldr	r3, [r7, #24]
	}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3720      	adds	r7, #32
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b088      	sub	sp, #32
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
 800b5dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	21a5      	movs	r1, #165	; 0xa5
 800b5ea:	f003 f8ff 	bl	800e7ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	f023 0307 	bic.w	r3, r3, #7
 800b606:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	f003 0307 	and.w	r3, r3, #7
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d00a      	beq.n	800b628 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	617b      	str	r3, [r7, #20]
}
 800b624:	bf00      	nop
 800b626:	e7fe      	b.n	800b626 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d01f      	beq.n	800b66e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b62e:	2300      	movs	r3, #0
 800b630:	61fb      	str	r3, [r7, #28]
 800b632:	e012      	b.n	800b65a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	4413      	add	r3, r2
 800b63a:	7819      	ldrb	r1, [r3, #0]
 800b63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	4413      	add	r3, r2
 800b642:	3334      	adds	r3, #52	; 0x34
 800b644:	460a      	mov	r2, r1
 800b646:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	4413      	add	r3, r2
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d006      	beq.n	800b662 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	3301      	adds	r3, #1
 800b658:	61fb      	str	r3, [r7, #28]
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	2b0f      	cmp	r3, #15
 800b65e:	d9e9      	bls.n	800b634 <prvInitialiseNewTask+0x64>
 800b660:	e000      	b.n	800b664 <prvInitialiseNewTask+0x94>
			{
				break;
 800b662:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b666:	2200      	movs	r2, #0
 800b668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b66c:	e003      	b.n	800b676 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b678:	2b37      	cmp	r3, #55	; 0x37
 800b67a:	d901      	bls.n	800b680 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b67c:	2337      	movs	r3, #55	; 0x37
 800b67e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b684:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b68a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68e:	2200      	movs	r2, #0
 800b690:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	3304      	adds	r3, #4
 800b696:	4618      	mov	r0, r3
 800b698:	f7fe fe56 	bl	800a348 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69e:	3318      	adds	r3, #24
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe fe51 	bl	800a348 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ce:	3354      	adds	r3, #84	; 0x54
 800b6d0:	2260      	movs	r2, #96	; 0x60
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f003 f889 	bl	800e7ec <memset>
 800b6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6dc:	4a0c      	ldr	r2, [pc, #48]	; (800b710 <prvInitialiseNewTask+0x140>)
 800b6de:	659a      	str	r2, [r3, #88]	; 0x58
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e2:	4a0c      	ldr	r2, [pc, #48]	; (800b714 <prvInitialiseNewTask+0x144>)
 800b6e4:	65da      	str	r2, [r3, #92]	; 0x5c
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e8:	4a0b      	ldr	r2, [pc, #44]	; (800b718 <prvInitialiseNewTask+0x148>)
 800b6ea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	68f9      	ldr	r1, [r7, #12]
 800b6f0:	69b8      	ldr	r0, [r7, #24]
 800b6f2:	f001 fa3f 	bl	800cb74 <pxPortInitialiseStack>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b706:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b708:	bf00      	nop
 800b70a:	3720      	adds	r7, #32
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	0802168c 	.word	0x0802168c
 800b714:	080216ac 	.word	0x080216ac
 800b718:	0802166c 	.word	0x0802166c

0800b71c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b724:	f001 fb56 	bl	800cdd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b728:	4b2d      	ldr	r3, [pc, #180]	; (800b7e0 <prvAddNewTaskToReadyList+0xc4>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3301      	adds	r3, #1
 800b72e:	4a2c      	ldr	r2, [pc, #176]	; (800b7e0 <prvAddNewTaskToReadyList+0xc4>)
 800b730:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b732:	4b2c      	ldr	r3, [pc, #176]	; (800b7e4 <prvAddNewTaskToReadyList+0xc8>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d109      	bne.n	800b74e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b73a:	4a2a      	ldr	r2, [pc, #168]	; (800b7e4 <prvAddNewTaskToReadyList+0xc8>)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b740:	4b27      	ldr	r3, [pc, #156]	; (800b7e0 <prvAddNewTaskToReadyList+0xc4>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d110      	bne.n	800b76a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b748:	f000 fc26 	bl	800bf98 <prvInitialiseTaskLists>
 800b74c:	e00d      	b.n	800b76a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b74e:	4b26      	ldr	r3, [pc, #152]	; (800b7e8 <prvAddNewTaskToReadyList+0xcc>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d109      	bne.n	800b76a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b756:	4b23      	ldr	r3, [pc, #140]	; (800b7e4 <prvAddNewTaskToReadyList+0xc8>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b760:	429a      	cmp	r2, r3
 800b762:	d802      	bhi.n	800b76a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b764:	4a1f      	ldr	r2, [pc, #124]	; (800b7e4 <prvAddNewTaskToReadyList+0xc8>)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b76a:	4b20      	ldr	r3, [pc, #128]	; (800b7ec <prvAddNewTaskToReadyList+0xd0>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3301      	adds	r3, #1
 800b770:	4a1e      	ldr	r2, [pc, #120]	; (800b7ec <prvAddNewTaskToReadyList+0xd0>)
 800b772:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b774:	4b1d      	ldr	r3, [pc, #116]	; (800b7ec <prvAddNewTaskToReadyList+0xd0>)
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b780:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <prvAddNewTaskToReadyList+0xd4>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d903      	bls.n	800b790 <prvAddNewTaskToReadyList+0x74>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78c:	4a18      	ldr	r2, [pc, #96]	; (800b7f0 <prvAddNewTaskToReadyList+0xd4>)
 800b78e:	6013      	str	r3, [r2, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b794:	4613      	mov	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	4413      	add	r3, r2
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	4a15      	ldr	r2, [pc, #84]	; (800b7f4 <prvAddNewTaskToReadyList+0xd8>)
 800b79e:	441a      	add	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	f7fe fddb 	bl	800a362 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7ac:	f001 fb42 	bl	800ce34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7b0:	4b0d      	ldr	r3, [pc, #52]	; (800b7e8 <prvAddNewTaskToReadyList+0xcc>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00e      	beq.n	800b7d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7b8:	4b0a      	ldr	r3, [pc, #40]	; (800b7e4 <prvAddNewTaskToReadyList+0xc8>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d207      	bcs.n	800b7d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7c6:	4b0c      	ldr	r3, [pc, #48]	; (800b7f8 <prvAddNewTaskToReadyList+0xdc>)
 800b7c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7cc:	601a      	str	r2, [r3, #0]
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7d6:	bf00      	nop
 800b7d8:	3708      	adds	r7, #8
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	200069bc 	.word	0x200069bc
 800b7e4:	200064e8 	.word	0x200064e8
 800b7e8:	200069c8 	.word	0x200069c8
 800b7ec:	200069d8 	.word	0x200069d8
 800b7f0:	200069c4 	.word	0x200069c4
 800b7f4:	200064ec 	.word	0x200064ec
 800b7f8:	e000ed04 	.word	0xe000ed04

0800b7fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b804:	2300      	movs	r3, #0
 800b806:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d017      	beq.n	800b83e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b80e:	4b13      	ldr	r3, [pc, #76]	; (800b85c <vTaskDelay+0x60>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00a      	beq.n	800b82c <vTaskDelay+0x30>
	__asm volatile
 800b816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	60bb      	str	r3, [r7, #8]
}
 800b828:	bf00      	nop
 800b82a:	e7fe      	b.n	800b82a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b82c:	f000 f88a 	bl	800b944 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b830:	2100      	movs	r1, #0
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fdfc 	bl	800c430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b838:	f000 f892 	bl	800b960 <xTaskResumeAll>
 800b83c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d107      	bne.n	800b854 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b844:	4b06      	ldr	r3, [pc, #24]	; (800b860 <vTaskDelay+0x64>)
 800b846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b84a:	601a      	str	r2, [r3, #0]
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b854:	bf00      	nop
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	200069e4 	.word	0x200069e4
 800b860:	e000ed04 	.word	0xe000ed04

0800b864 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b08a      	sub	sp, #40	; 0x28
 800b868:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b86a:	2300      	movs	r3, #0
 800b86c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b86e:	2300      	movs	r3, #0
 800b870:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b872:	463a      	mov	r2, r7
 800b874:	1d39      	adds	r1, r7, #4
 800b876:	f107 0308 	add.w	r3, r7, #8
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fe fd10 	bl	800a2a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	9202      	str	r2, [sp, #8]
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	2300      	movs	r3, #0
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	2300      	movs	r3, #0
 800b890:	460a      	mov	r2, r1
 800b892:	4924      	ldr	r1, [pc, #144]	; (800b924 <vTaskStartScheduler+0xc0>)
 800b894:	4824      	ldr	r0, [pc, #144]	; (800b928 <vTaskStartScheduler+0xc4>)
 800b896:	f7ff fdf9 	bl	800b48c <xTaskCreateStatic>
 800b89a:	4603      	mov	r3, r0
 800b89c:	4a23      	ldr	r2, [pc, #140]	; (800b92c <vTaskStartScheduler+0xc8>)
 800b89e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8a0:	4b22      	ldr	r3, [pc, #136]	; (800b92c <vTaskStartScheduler+0xc8>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	617b      	str	r3, [r7, #20]
 800b8ac:	e001      	b.n	800b8b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d102      	bne.n	800b8be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8b8:	f000 fe0e 	bl	800c4d8 <xTimerCreateTimerTask>
 800b8bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d11b      	bne.n	800b8fc <vTaskStartScheduler+0x98>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	613b      	str	r3, [r7, #16]
}
 800b8d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b8d8:	4b15      	ldr	r3, [pc, #84]	; (800b930 <vTaskStartScheduler+0xcc>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	3354      	adds	r3, #84	; 0x54
 800b8de:	4a15      	ldr	r2, [pc, #84]	; (800b934 <vTaskStartScheduler+0xd0>)
 800b8e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8e2:	4b15      	ldr	r3, [pc, #84]	; (800b938 <vTaskStartScheduler+0xd4>)
 800b8e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8ea:	4b14      	ldr	r3, [pc, #80]	; (800b93c <vTaskStartScheduler+0xd8>)
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8f0:	4b13      	ldr	r3, [pc, #76]	; (800b940 <vTaskStartScheduler+0xdc>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8f6:	f001 f9cb 	bl	800cc90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8fa:	e00e      	b.n	800b91a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b902:	d10a      	bne.n	800b91a <vTaskStartScheduler+0xb6>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	60fb      	str	r3, [r7, #12]
}
 800b916:	bf00      	nop
 800b918:	e7fe      	b.n	800b918 <vTaskStartScheduler+0xb4>
}
 800b91a:	bf00      	nop
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	0800f330 	.word	0x0800f330
 800b928:	0800bf69 	.word	0x0800bf69
 800b92c:	200069e0 	.word	0x200069e0
 800b930:	200064e8 	.word	0x200064e8
 800b934:	200000b0 	.word	0x200000b0
 800b938:	200069dc 	.word	0x200069dc
 800b93c:	200069c8 	.word	0x200069c8
 800b940:	200069c0 	.word	0x200069c0

0800b944 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b944:	b480      	push	{r7}
 800b946:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b948:	4b04      	ldr	r3, [pc, #16]	; (800b95c <vTaskSuspendAll+0x18>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3301      	adds	r3, #1
 800b94e:	4a03      	ldr	r2, [pc, #12]	; (800b95c <vTaskSuspendAll+0x18>)
 800b950:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b952:	bf00      	nop
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	200069e4 	.word	0x200069e4

0800b960 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b966:	2300      	movs	r3, #0
 800b968:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b96a:	2300      	movs	r3, #0
 800b96c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b96e:	4b42      	ldr	r3, [pc, #264]	; (800ba78 <xTaskResumeAll+0x118>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10a      	bne.n	800b98c <xTaskResumeAll+0x2c>
	__asm volatile
 800b976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	603b      	str	r3, [r7, #0]
}
 800b988:	bf00      	nop
 800b98a:	e7fe      	b.n	800b98a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b98c:	f001 fa22 	bl	800cdd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b990:	4b39      	ldr	r3, [pc, #228]	; (800ba78 <xTaskResumeAll+0x118>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	3b01      	subs	r3, #1
 800b996:	4a38      	ldr	r2, [pc, #224]	; (800ba78 <xTaskResumeAll+0x118>)
 800b998:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b99a:	4b37      	ldr	r3, [pc, #220]	; (800ba78 <xTaskResumeAll+0x118>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d162      	bne.n	800ba68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9a2:	4b36      	ldr	r3, [pc, #216]	; (800ba7c <xTaskResumeAll+0x11c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d05e      	beq.n	800ba68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9aa:	e02f      	b.n	800ba0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9ac:	4b34      	ldr	r3, [pc, #208]	; (800ba80 <xTaskResumeAll+0x120>)
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	3318      	adds	r3, #24
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fe fd2f 	bl	800a41c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fe fd2a 	bl	800a41c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9cc:	4b2d      	ldr	r3, [pc, #180]	; (800ba84 <xTaskResumeAll+0x124>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d903      	bls.n	800b9dc <xTaskResumeAll+0x7c>
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d8:	4a2a      	ldr	r2, [pc, #168]	; (800ba84 <xTaskResumeAll+0x124>)
 800b9da:	6013      	str	r3, [r2, #0]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	4413      	add	r3, r2
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	4a27      	ldr	r2, [pc, #156]	; (800ba88 <xTaskResumeAll+0x128>)
 800b9ea:	441a      	add	r2, r3
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	3304      	adds	r3, #4
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4610      	mov	r0, r2
 800b9f4:	f7fe fcb5 	bl	800a362 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fc:	4b23      	ldr	r3, [pc, #140]	; (800ba8c <xTaskResumeAll+0x12c>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d302      	bcc.n	800ba0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba06:	4b22      	ldr	r3, [pc, #136]	; (800ba90 <xTaskResumeAll+0x130>)
 800ba08:	2201      	movs	r2, #1
 800ba0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba0c:	4b1c      	ldr	r3, [pc, #112]	; (800ba80 <xTaskResumeAll+0x120>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1cb      	bne.n	800b9ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba1a:	f000 fb5f 	bl	800c0dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba1e:	4b1d      	ldr	r3, [pc, #116]	; (800ba94 <xTaskResumeAll+0x134>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d010      	beq.n	800ba4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba2a:	f000 f847 	bl	800babc <xTaskIncrementTick>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ba34:	4b16      	ldr	r3, [pc, #88]	; (800ba90 <xTaskResumeAll+0x130>)
 800ba36:	2201      	movs	r2, #1
 800ba38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1f1      	bne.n	800ba2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ba46:	4b13      	ldr	r3, [pc, #76]	; (800ba94 <xTaskResumeAll+0x134>)
 800ba48:	2200      	movs	r2, #0
 800ba4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba4c:	4b10      	ldr	r3, [pc, #64]	; (800ba90 <xTaskResumeAll+0x130>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d009      	beq.n	800ba68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba54:	2301      	movs	r3, #1
 800ba56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba58:	4b0f      	ldr	r3, [pc, #60]	; (800ba98 <xTaskResumeAll+0x138>)
 800ba5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba5e:	601a      	str	r2, [r3, #0]
 800ba60:	f3bf 8f4f 	dsb	sy
 800ba64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba68:	f001 f9e4 	bl	800ce34 <vPortExitCritical>

	return xAlreadyYielded;
 800ba6c:	68bb      	ldr	r3, [r7, #8]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	200069e4 	.word	0x200069e4
 800ba7c:	200069bc 	.word	0x200069bc
 800ba80:	2000697c 	.word	0x2000697c
 800ba84:	200069c4 	.word	0x200069c4
 800ba88:	200064ec 	.word	0x200064ec
 800ba8c:	200064e8 	.word	0x200064e8
 800ba90:	200069d0 	.word	0x200069d0
 800ba94:	200069cc 	.word	0x200069cc
 800ba98:	e000ed04 	.word	0xe000ed04

0800ba9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800baa2:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <xTaskGetTickCount+0x1c>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800baa8:	687b      	ldr	r3, [r7, #4]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	200069c0 	.word	0x200069c0

0800babc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bac2:	2300      	movs	r3, #0
 800bac4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bac6:	4b4f      	ldr	r3, [pc, #316]	; (800bc04 <xTaskIncrementTick+0x148>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f040 808f 	bne.w	800bbee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bad0:	4b4d      	ldr	r3, [pc, #308]	; (800bc08 <xTaskIncrementTick+0x14c>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	3301      	adds	r3, #1
 800bad6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bad8:	4a4b      	ldr	r2, [pc, #300]	; (800bc08 <xTaskIncrementTick+0x14c>)
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d120      	bne.n	800bb26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bae4:	4b49      	ldr	r3, [pc, #292]	; (800bc0c <xTaskIncrementTick+0x150>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d00a      	beq.n	800bb04 <xTaskIncrementTick+0x48>
	__asm volatile
 800baee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	603b      	str	r3, [r7, #0]
}
 800bb00:	bf00      	nop
 800bb02:	e7fe      	b.n	800bb02 <xTaskIncrementTick+0x46>
 800bb04:	4b41      	ldr	r3, [pc, #260]	; (800bc0c <xTaskIncrementTick+0x150>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	60fb      	str	r3, [r7, #12]
 800bb0a:	4b41      	ldr	r3, [pc, #260]	; (800bc10 <xTaskIncrementTick+0x154>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a3f      	ldr	r2, [pc, #252]	; (800bc0c <xTaskIncrementTick+0x150>)
 800bb10:	6013      	str	r3, [r2, #0]
 800bb12:	4a3f      	ldr	r2, [pc, #252]	; (800bc10 <xTaskIncrementTick+0x154>)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6013      	str	r3, [r2, #0]
 800bb18:	4b3e      	ldr	r3, [pc, #248]	; (800bc14 <xTaskIncrementTick+0x158>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	4a3d      	ldr	r2, [pc, #244]	; (800bc14 <xTaskIncrementTick+0x158>)
 800bb20:	6013      	str	r3, [r2, #0]
 800bb22:	f000 fadb 	bl	800c0dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb26:	4b3c      	ldr	r3, [pc, #240]	; (800bc18 <xTaskIncrementTick+0x15c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	693a      	ldr	r2, [r7, #16]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d349      	bcc.n	800bbc4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb30:	4b36      	ldr	r3, [pc, #216]	; (800bc0c <xTaskIncrementTick+0x150>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d104      	bne.n	800bb44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb3a:	4b37      	ldr	r3, [pc, #220]	; (800bc18 <xTaskIncrementTick+0x15c>)
 800bb3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb40:	601a      	str	r2, [r3, #0]
					break;
 800bb42:	e03f      	b.n	800bbc4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb44:	4b31      	ldr	r3, [pc, #196]	; (800bc0c <xTaskIncrementTick+0x150>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb54:	693a      	ldr	r2, [r7, #16]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d203      	bcs.n	800bb64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb5c:	4a2e      	ldr	r2, [pc, #184]	; (800bc18 <xTaskIncrementTick+0x15c>)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb62:	e02f      	b.n	800bbc4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	3304      	adds	r3, #4
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fe fc57 	bl	800a41c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d004      	beq.n	800bb80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	3318      	adds	r3, #24
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fe fc4e 	bl	800a41c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb84:	4b25      	ldr	r3, [pc, #148]	; (800bc1c <xTaskIncrementTick+0x160>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d903      	bls.n	800bb94 <xTaskIncrementTick+0xd8>
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb90:	4a22      	ldr	r2, [pc, #136]	; (800bc1c <xTaskIncrementTick+0x160>)
 800bb92:	6013      	str	r3, [r2, #0]
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb98:	4613      	mov	r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	4413      	add	r3, r2
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	4a1f      	ldr	r2, [pc, #124]	; (800bc20 <xTaskIncrementTick+0x164>)
 800bba2:	441a      	add	r2, r3
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	3304      	adds	r3, #4
 800bba8:	4619      	mov	r1, r3
 800bbaa:	4610      	mov	r0, r2
 800bbac:	f7fe fbd9 	bl	800a362 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb4:	4b1b      	ldr	r3, [pc, #108]	; (800bc24 <xTaskIncrementTick+0x168>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d3b8      	bcc.n	800bb30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbc2:	e7b5      	b.n	800bb30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bbc4:	4b17      	ldr	r3, [pc, #92]	; (800bc24 <xTaskIncrementTick+0x168>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbca:	4915      	ldr	r1, [pc, #84]	; (800bc20 <xTaskIncrementTick+0x164>)
 800bbcc:	4613      	mov	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	440b      	add	r3, r1
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d901      	bls.n	800bbe0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bbe0:	4b11      	ldr	r3, [pc, #68]	; (800bc28 <xTaskIncrementTick+0x16c>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d007      	beq.n	800bbf8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	617b      	str	r3, [r7, #20]
 800bbec:	e004      	b.n	800bbf8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bbee:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <xTaskIncrementTick+0x170>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	4a0d      	ldr	r2, [pc, #52]	; (800bc2c <xTaskIncrementTick+0x170>)
 800bbf6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bbf8:	697b      	ldr	r3, [r7, #20]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3718      	adds	r7, #24
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	200069e4 	.word	0x200069e4
 800bc08:	200069c0 	.word	0x200069c0
 800bc0c:	20006974 	.word	0x20006974
 800bc10:	20006978 	.word	0x20006978
 800bc14:	200069d4 	.word	0x200069d4
 800bc18:	200069dc 	.word	0x200069dc
 800bc1c:	200069c4 	.word	0x200069c4
 800bc20:	200064ec 	.word	0x200064ec
 800bc24:	200064e8 	.word	0x200064e8
 800bc28:	200069d0 	.word	0x200069d0
 800bc2c:	200069cc 	.word	0x200069cc

0800bc30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc36:	4b2a      	ldr	r3, [pc, #168]	; (800bce0 <vTaskSwitchContext+0xb0>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d003      	beq.n	800bc46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc3e:	4b29      	ldr	r3, [pc, #164]	; (800bce4 <vTaskSwitchContext+0xb4>)
 800bc40:	2201      	movs	r2, #1
 800bc42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc44:	e046      	b.n	800bcd4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bc46:	4b27      	ldr	r3, [pc, #156]	; (800bce4 <vTaskSwitchContext+0xb4>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc4c:	4b26      	ldr	r3, [pc, #152]	; (800bce8 <vTaskSwitchContext+0xb8>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	e010      	b.n	800bc76 <vTaskSwitchContext+0x46>
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10a      	bne.n	800bc70 <vTaskSwitchContext+0x40>
	__asm volatile
 800bc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5e:	f383 8811 	msr	BASEPRI, r3
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	607b      	str	r3, [r7, #4]
}
 800bc6c:	bf00      	nop
 800bc6e:	e7fe      	b.n	800bc6e <vTaskSwitchContext+0x3e>
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	3b01      	subs	r3, #1
 800bc74:	60fb      	str	r3, [r7, #12]
 800bc76:	491d      	ldr	r1, [pc, #116]	; (800bcec <vTaskSwitchContext+0xbc>)
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	440b      	add	r3, r1
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d0e4      	beq.n	800bc54 <vTaskSwitchContext+0x24>
 800bc8a:	68fa      	ldr	r2, [r7, #12]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	4413      	add	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4a15      	ldr	r2, [pc, #84]	; (800bcec <vTaskSwitchContext+0xbc>)
 800bc96:	4413      	add	r3, r2
 800bc98:	60bb      	str	r3, [r7, #8]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	685a      	ldr	r2, [r3, #4]
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	605a      	str	r2, [r3, #4]
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	685a      	ldr	r2, [r3, #4]
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	3308      	adds	r3, #8
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d104      	bne.n	800bcba <vTaskSwitchContext+0x8a>
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	685a      	ldr	r2, [r3, #4]
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	605a      	str	r2, [r3, #4]
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	4a0b      	ldr	r2, [pc, #44]	; (800bcf0 <vTaskSwitchContext+0xc0>)
 800bcc2:	6013      	str	r3, [r2, #0]
 800bcc4:	4a08      	ldr	r2, [pc, #32]	; (800bce8 <vTaskSwitchContext+0xb8>)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bcca:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <vTaskSwitchContext+0xc0>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3354      	adds	r3, #84	; 0x54
 800bcd0:	4a08      	ldr	r2, [pc, #32]	; (800bcf4 <vTaskSwitchContext+0xc4>)
 800bcd2:	6013      	str	r3, [r2, #0]
}
 800bcd4:	bf00      	nop
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	200069e4 	.word	0x200069e4
 800bce4:	200069d0 	.word	0x200069d0
 800bce8:	200069c4 	.word	0x200069c4
 800bcec:	200064ec 	.word	0x200064ec
 800bcf0:	200064e8 	.word	0x200064e8
 800bcf4:	200000b0 	.word	0x200000b0

0800bcf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d10a      	bne.n	800bd1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	60fb      	str	r3, [r7, #12]
}
 800bd1a:	bf00      	nop
 800bd1c:	e7fe      	b.n	800bd1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd1e:	4b07      	ldr	r3, [pc, #28]	; (800bd3c <vTaskPlaceOnEventList+0x44>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3318      	adds	r3, #24
 800bd24:	4619      	mov	r1, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7fe fb3f 	bl	800a3aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	6838      	ldr	r0, [r7, #0]
 800bd30:	f000 fb7e 	bl	800c430 <prvAddCurrentTaskToDelayedList>
}
 800bd34:	bf00      	nop
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	200064e8 	.word	0x200064e8

0800bd40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10a      	bne.n	800bd68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd56:	f383 8811 	msr	BASEPRI, r3
 800bd5a:	f3bf 8f6f 	isb	sy
 800bd5e:	f3bf 8f4f 	dsb	sy
 800bd62:	617b      	str	r3, [r7, #20]
}
 800bd64:	bf00      	nop
 800bd66:	e7fe      	b.n	800bd66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd68:	4b0a      	ldr	r3, [pc, #40]	; (800bd94 <vTaskPlaceOnEventListRestricted+0x54>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3318      	adds	r3, #24
 800bd6e:	4619      	mov	r1, r3
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f7fe faf6 	bl	800a362 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bd7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd82:	6879      	ldr	r1, [r7, #4]
 800bd84:	68b8      	ldr	r0, [r7, #8]
 800bd86:	f000 fb53 	bl	800c430 <prvAddCurrentTaskToDelayedList>
	}
 800bd8a:	bf00      	nop
 800bd8c:	3718      	adds	r7, #24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	200064e8 	.word	0x200064e8

0800bd98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10a      	bne.n	800bdc4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	60fb      	str	r3, [r7, #12]
}
 800bdc0:	bf00      	nop
 800bdc2:	e7fe      	b.n	800bdc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	3318      	adds	r3, #24
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fe fb27 	bl	800a41c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdce:	4b1e      	ldr	r3, [pc, #120]	; (800be48 <xTaskRemoveFromEventList+0xb0>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d11d      	bne.n	800be12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	3304      	adds	r3, #4
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7fe fb1e 	bl	800a41c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde4:	4b19      	ldr	r3, [pc, #100]	; (800be4c <xTaskRemoveFromEventList+0xb4>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d903      	bls.n	800bdf4 <xTaskRemoveFromEventList+0x5c>
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf0:	4a16      	ldr	r2, [pc, #88]	; (800be4c <xTaskRemoveFromEventList+0xb4>)
 800bdf2:	6013      	str	r3, [r2, #0]
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4a13      	ldr	r2, [pc, #76]	; (800be50 <xTaskRemoveFromEventList+0xb8>)
 800be02:	441a      	add	r2, r3
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	3304      	adds	r3, #4
 800be08:	4619      	mov	r1, r3
 800be0a:	4610      	mov	r0, r2
 800be0c:	f7fe faa9 	bl	800a362 <vListInsertEnd>
 800be10:	e005      	b.n	800be1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	3318      	adds	r3, #24
 800be16:	4619      	mov	r1, r3
 800be18:	480e      	ldr	r0, [pc, #56]	; (800be54 <xTaskRemoveFromEventList+0xbc>)
 800be1a:	f7fe faa2 	bl	800a362 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be22:	4b0d      	ldr	r3, [pc, #52]	; (800be58 <xTaskRemoveFromEventList+0xc0>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be28:	429a      	cmp	r2, r3
 800be2a:	d905      	bls.n	800be38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be2c:	2301      	movs	r3, #1
 800be2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be30:	4b0a      	ldr	r3, [pc, #40]	; (800be5c <xTaskRemoveFromEventList+0xc4>)
 800be32:	2201      	movs	r2, #1
 800be34:	601a      	str	r2, [r3, #0]
 800be36:	e001      	b.n	800be3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800be38:	2300      	movs	r3, #0
 800be3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be3c:	697b      	ldr	r3, [r7, #20]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	200069e4 	.word	0x200069e4
 800be4c:	200069c4 	.word	0x200069c4
 800be50:	200064ec 	.word	0x200064ec
 800be54:	2000697c 	.word	0x2000697c
 800be58:	200064e8 	.word	0x200064e8
 800be5c:	200069d0 	.word	0x200069d0

0800be60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be68:	4b06      	ldr	r3, [pc, #24]	; (800be84 <vTaskInternalSetTimeOutState+0x24>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be70:	4b05      	ldr	r3, [pc, #20]	; (800be88 <vTaskInternalSetTimeOutState+0x28>)
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	605a      	str	r2, [r3, #4]
}
 800be78:	bf00      	nop
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr
 800be84:	200069d4 	.word	0x200069d4
 800be88:	200069c0 	.word	0x200069c0

0800be8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10a      	bne.n	800beb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	613b      	str	r3, [r7, #16]
}
 800beae:	bf00      	nop
 800beb0:	e7fe      	b.n	800beb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10a      	bne.n	800bece <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800beb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebc:	f383 8811 	msr	BASEPRI, r3
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	60fb      	str	r3, [r7, #12]
}
 800beca:	bf00      	nop
 800becc:	e7fe      	b.n	800becc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bece:	f000 ff81 	bl	800cdd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bed2:	4b1d      	ldr	r3, [pc, #116]	; (800bf48 <xTaskCheckForTimeOut+0xbc>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	69ba      	ldr	r2, [r7, #24]
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beea:	d102      	bne.n	800bef2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800beec:	2300      	movs	r3, #0
 800beee:	61fb      	str	r3, [r7, #28]
 800bef0:	e023      	b.n	800bf3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	4b15      	ldr	r3, [pc, #84]	; (800bf4c <xTaskCheckForTimeOut+0xc0>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	429a      	cmp	r2, r3
 800befc:	d007      	beq.n	800bf0e <xTaskCheckForTimeOut+0x82>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	69ba      	ldr	r2, [r7, #24]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d302      	bcc.n	800bf0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	61fb      	str	r3, [r7, #28]
 800bf0c:	e015      	b.n	800bf3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	697a      	ldr	r2, [r7, #20]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d20b      	bcs.n	800bf30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	1ad2      	subs	r2, r2, r3
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f7ff ff9b 	bl	800be60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	61fb      	str	r3, [r7, #28]
 800bf2e:	e004      	b.n	800bf3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	2200      	movs	r2, #0
 800bf34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf36:	2301      	movs	r3, #1
 800bf38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf3a:	f000 ff7b 	bl	800ce34 <vPortExitCritical>

	return xReturn;
 800bf3e:	69fb      	ldr	r3, [r7, #28]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3720      	adds	r7, #32
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	200069c0 	.word	0x200069c0
 800bf4c:	200069d4 	.word	0x200069d4

0800bf50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf50:	b480      	push	{r7}
 800bf52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf54:	4b03      	ldr	r3, [pc, #12]	; (800bf64 <vTaskMissedYield+0x14>)
 800bf56:	2201      	movs	r2, #1
 800bf58:	601a      	str	r2, [r3, #0]
}
 800bf5a:	bf00      	nop
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr
 800bf64:	200069d0 	.word	0x200069d0

0800bf68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf70:	f000 f852 	bl	800c018 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf74:	4b06      	ldr	r3, [pc, #24]	; (800bf90 <prvIdleTask+0x28>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d9f9      	bls.n	800bf70 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf7c:	4b05      	ldr	r3, [pc, #20]	; (800bf94 <prvIdleTask+0x2c>)
 800bf7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf82:	601a      	str	r2, [r3, #0]
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf8c:	e7f0      	b.n	800bf70 <prvIdleTask+0x8>
 800bf8e:	bf00      	nop
 800bf90:	200064ec 	.word	0x200064ec
 800bf94:	e000ed04 	.word	0xe000ed04

0800bf98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	607b      	str	r3, [r7, #4]
 800bfa2:	e00c      	b.n	800bfbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	4413      	add	r3, r2
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4a12      	ldr	r2, [pc, #72]	; (800bff8 <prvInitialiseTaskLists+0x60>)
 800bfb0:	4413      	add	r3, r2
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fe f9a8 	bl	800a308 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	607b      	str	r3, [r7, #4]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2b37      	cmp	r3, #55	; 0x37
 800bfc2:	d9ef      	bls.n	800bfa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfc4:	480d      	ldr	r0, [pc, #52]	; (800bffc <prvInitialiseTaskLists+0x64>)
 800bfc6:	f7fe f99f 	bl	800a308 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfca:	480d      	ldr	r0, [pc, #52]	; (800c000 <prvInitialiseTaskLists+0x68>)
 800bfcc:	f7fe f99c 	bl	800a308 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bfd0:	480c      	ldr	r0, [pc, #48]	; (800c004 <prvInitialiseTaskLists+0x6c>)
 800bfd2:	f7fe f999 	bl	800a308 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bfd6:	480c      	ldr	r0, [pc, #48]	; (800c008 <prvInitialiseTaskLists+0x70>)
 800bfd8:	f7fe f996 	bl	800a308 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bfdc:	480b      	ldr	r0, [pc, #44]	; (800c00c <prvInitialiseTaskLists+0x74>)
 800bfde:	f7fe f993 	bl	800a308 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bfe2:	4b0b      	ldr	r3, [pc, #44]	; (800c010 <prvInitialiseTaskLists+0x78>)
 800bfe4:	4a05      	ldr	r2, [pc, #20]	; (800bffc <prvInitialiseTaskLists+0x64>)
 800bfe6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bfe8:	4b0a      	ldr	r3, [pc, #40]	; (800c014 <prvInitialiseTaskLists+0x7c>)
 800bfea:	4a05      	ldr	r2, [pc, #20]	; (800c000 <prvInitialiseTaskLists+0x68>)
 800bfec:	601a      	str	r2, [r3, #0]
}
 800bfee:	bf00      	nop
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	200064ec 	.word	0x200064ec
 800bffc:	2000694c 	.word	0x2000694c
 800c000:	20006960 	.word	0x20006960
 800c004:	2000697c 	.word	0x2000697c
 800c008:	20006990 	.word	0x20006990
 800c00c:	200069a8 	.word	0x200069a8
 800c010:	20006974 	.word	0x20006974
 800c014:	20006978 	.word	0x20006978

0800c018 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c01e:	e019      	b.n	800c054 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c020:	f000 fed8 	bl	800cdd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c024:	4b10      	ldr	r3, [pc, #64]	; (800c068 <prvCheckTasksWaitingTermination+0x50>)
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	3304      	adds	r3, #4
 800c030:	4618      	mov	r0, r3
 800c032:	f7fe f9f3 	bl	800a41c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c036:	4b0d      	ldr	r3, [pc, #52]	; (800c06c <prvCheckTasksWaitingTermination+0x54>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	3b01      	subs	r3, #1
 800c03c:	4a0b      	ldr	r2, [pc, #44]	; (800c06c <prvCheckTasksWaitingTermination+0x54>)
 800c03e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c040:	4b0b      	ldr	r3, [pc, #44]	; (800c070 <prvCheckTasksWaitingTermination+0x58>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	3b01      	subs	r3, #1
 800c046:	4a0a      	ldr	r2, [pc, #40]	; (800c070 <prvCheckTasksWaitingTermination+0x58>)
 800c048:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c04a:	f000 fef3 	bl	800ce34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 f810 	bl	800c074 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c054:	4b06      	ldr	r3, [pc, #24]	; (800c070 <prvCheckTasksWaitingTermination+0x58>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1e1      	bne.n	800c020 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c05c:	bf00      	nop
 800c05e:	bf00      	nop
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	20006990 	.word	0x20006990
 800c06c:	200069bc 	.word	0x200069bc
 800c070:	200069a4 	.word	0x200069a4

0800c074 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	3354      	adds	r3, #84	; 0x54
 800c080:	4618      	mov	r0, r3
 800c082:	f002 fc5d 	bl	800e940 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d108      	bne.n	800c0a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c094:	4618      	mov	r0, r3
 800c096:	f001 f88b 	bl	800d1b0 <vPortFree>
				vPortFree( pxTCB );
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f001 f888 	bl	800d1b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0a0:	e018      	b.n	800c0d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d103      	bne.n	800c0b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f001 f87f 	bl	800d1b0 <vPortFree>
	}
 800c0b2:	e00f      	b.n	800c0d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d00a      	beq.n	800c0d4 <prvDeleteTCB+0x60>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	60fb      	str	r3, [r7, #12]
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <prvDeleteTCB+0x5e>
	}
 800c0d4:	bf00      	nop
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0e2:	4b0c      	ldr	r3, [pc, #48]	; (800c114 <prvResetNextTaskUnblockTime+0x38>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d104      	bne.n	800c0f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0ec:	4b0a      	ldr	r3, [pc, #40]	; (800c118 <prvResetNextTaskUnblockTime+0x3c>)
 800c0ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c0f4:	e008      	b.n	800c108 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0f6:	4b07      	ldr	r3, [pc, #28]	; (800c114 <prvResetNextTaskUnblockTime+0x38>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	4a04      	ldr	r2, [pc, #16]	; (800c118 <prvResetNextTaskUnblockTime+0x3c>)
 800c106:	6013      	str	r3, [r2, #0]
}
 800c108:	bf00      	nop
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr
 800c114:	20006974 	.word	0x20006974
 800c118:	200069dc 	.word	0x200069dc

0800c11c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c122:	4b0b      	ldr	r3, [pc, #44]	; (800c150 <xTaskGetSchedulerState+0x34>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d102      	bne.n	800c130 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c12a:	2301      	movs	r3, #1
 800c12c:	607b      	str	r3, [r7, #4]
 800c12e:	e008      	b.n	800c142 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c130:	4b08      	ldr	r3, [pc, #32]	; (800c154 <xTaskGetSchedulerState+0x38>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d102      	bne.n	800c13e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c138:	2302      	movs	r3, #2
 800c13a:	607b      	str	r3, [r7, #4]
 800c13c:	e001      	b.n	800c142 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c13e:	2300      	movs	r3, #0
 800c140:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c142:	687b      	ldr	r3, [r7, #4]
	}
 800c144:	4618      	mov	r0, r3
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	200069c8 	.word	0x200069c8
 800c154:	200069e4 	.word	0x200069e4

0800c158 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c164:	2300      	movs	r3, #0
 800c166:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d051      	beq.n	800c212 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c172:	4b2a      	ldr	r3, [pc, #168]	; (800c21c <xTaskPriorityInherit+0xc4>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c178:	429a      	cmp	r2, r3
 800c17a:	d241      	bcs.n	800c200 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	2b00      	cmp	r3, #0
 800c182:	db06      	blt.n	800c192 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c184:	4b25      	ldr	r3, [pc, #148]	; (800c21c <xTaskPriorityInherit+0xc4>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	6959      	ldr	r1, [r3, #20]
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c19a:	4613      	mov	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	4a1f      	ldr	r2, [pc, #124]	; (800c220 <xTaskPriorityInherit+0xc8>)
 800c1a4:	4413      	add	r3, r2
 800c1a6:	4299      	cmp	r1, r3
 800c1a8:	d122      	bne.n	800c1f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fe f934 	bl	800a41c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1b4:	4b19      	ldr	r3, [pc, #100]	; (800c21c <xTaskPriorityInherit+0xc4>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c2:	4b18      	ldr	r3, [pc, #96]	; (800c224 <xTaskPriorityInherit+0xcc>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d903      	bls.n	800c1d2 <xTaskPriorityInherit+0x7a>
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ce:	4a15      	ldr	r2, [pc, #84]	; (800c224 <xTaskPriorityInherit+0xcc>)
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4a10      	ldr	r2, [pc, #64]	; (800c220 <xTaskPriorityInherit+0xc8>)
 800c1e0:	441a      	add	r2, r3
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	f7fe f8ba 	bl	800a362 <vListInsertEnd>
 800c1ee:	e004      	b.n	800c1fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1f0:	4b0a      	ldr	r3, [pc, #40]	; (800c21c <xTaskPriorityInherit+0xc4>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	e008      	b.n	800c212 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c204:	4b05      	ldr	r3, [pc, #20]	; (800c21c <xTaskPriorityInherit+0xc4>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d201      	bcs.n	800c212 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c20e:	2301      	movs	r3, #1
 800c210:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c212:	68fb      	ldr	r3, [r7, #12]
	}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	200064e8 	.word	0x200064e8
 800c220:	200064ec 	.word	0x200064ec
 800c224:	200069c4 	.word	0x200069c4

0800c228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b086      	sub	sp, #24
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c234:	2300      	movs	r3, #0
 800c236:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d056      	beq.n	800c2ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c23e:	4b2e      	ldr	r3, [pc, #184]	; (800c2f8 <xTaskPriorityDisinherit+0xd0>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	693a      	ldr	r2, [r7, #16]
 800c244:	429a      	cmp	r2, r3
 800c246:	d00a      	beq.n	800c25e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24c:	f383 8811 	msr	BASEPRI, r3
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	60fb      	str	r3, [r7, #12]
}
 800c25a:	bf00      	nop
 800c25c:	e7fe      	b.n	800c25c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c262:	2b00      	cmp	r3, #0
 800c264:	d10a      	bne.n	800c27c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	60bb      	str	r3, [r7, #8]
}
 800c278:	bf00      	nop
 800c27a:	e7fe      	b.n	800c27a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c280:	1e5a      	subs	r2, r3, #1
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c28e:	429a      	cmp	r2, r3
 800c290:	d02c      	beq.n	800c2ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c296:	2b00      	cmp	r3, #0
 800c298:	d128      	bne.n	800c2ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	3304      	adds	r3, #4
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fe f8bc 	bl	800a41c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2bc:	4b0f      	ldr	r3, [pc, #60]	; (800c2fc <xTaskPriorityDisinherit+0xd4>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d903      	bls.n	800c2cc <xTaskPriorityDisinherit+0xa4>
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c8:	4a0c      	ldr	r2, [pc, #48]	; (800c2fc <xTaskPriorityDisinherit+0xd4>)
 800c2ca:	6013      	str	r3, [r2, #0]
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	4413      	add	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4a09      	ldr	r2, [pc, #36]	; (800c300 <xTaskPriorityDisinherit+0xd8>)
 800c2da:	441a      	add	r2, r3
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	3304      	adds	r3, #4
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	4610      	mov	r0, r2
 800c2e4:	f7fe f83d 	bl	800a362 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c2ec:	697b      	ldr	r3, [r7, #20]
	}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	200064e8 	.word	0x200064e8
 800c2fc:	200069c4 	.word	0x200069c4
 800c300:	200064ec 	.word	0x200064ec

0800c304 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c304:	b580      	push	{r7, lr}
 800c306:	b088      	sub	sp, #32
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c312:	2301      	movs	r3, #1
 800c314:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d06a      	beq.n	800c3f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10a      	bne.n	800c33a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	60fb      	str	r3, [r7, #12]
}
 800c336:	bf00      	nop
 800c338:	e7fe      	b.n	800c338 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c33e:	683a      	ldr	r2, [r7, #0]
 800c340:	429a      	cmp	r2, r3
 800c342:	d902      	bls.n	800c34a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	61fb      	str	r3, [r7, #28]
 800c348:	e002      	b.n	800c350 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c34e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c354:	69fa      	ldr	r2, [r7, #28]
 800c356:	429a      	cmp	r2, r3
 800c358:	d04b      	beq.n	800c3f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c35e:	697a      	ldr	r2, [r7, #20]
 800c360:	429a      	cmp	r2, r3
 800c362:	d146      	bne.n	800c3f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c364:	4b25      	ldr	r3, [pc, #148]	; (800c3fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	69ba      	ldr	r2, [r7, #24]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d10a      	bne.n	800c384 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	60bb      	str	r3, [r7, #8]
}
 800c380:	bf00      	nop
 800c382:	e7fe      	b.n	800c382 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c388:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	69fa      	ldr	r2, [r7, #28]
 800c38e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	2b00      	cmp	r3, #0
 800c396:	db04      	blt.n	800c3a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	6959      	ldr	r1, [r3, #20]
 800c3a6:	693a      	ldr	r2, [r7, #16]
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4413      	add	r3, r2
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	4a13      	ldr	r2, [pc, #76]	; (800c400 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c3b2:	4413      	add	r3, r2
 800c3b4:	4299      	cmp	r1, r3
 800c3b6:	d11c      	bne.n	800c3f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	3304      	adds	r3, #4
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fe f82d 	bl	800a41c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c6:	4b0f      	ldr	r3, [pc, #60]	; (800c404 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d903      	bls.n	800c3d6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d2:	4a0c      	ldr	r2, [pc, #48]	; (800c404 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c3d4:	6013      	str	r3, [r2, #0]
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3da:	4613      	mov	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4a07      	ldr	r2, [pc, #28]	; (800c400 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c3e4:	441a      	add	r2, r3
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	3304      	adds	r3, #4
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	f7fd ffb8 	bl	800a362 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3f2:	bf00      	nop
 800c3f4:	3720      	adds	r7, #32
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	200064e8 	.word	0x200064e8
 800c400:	200064ec 	.word	0x200064ec
 800c404:	200069c4 	.word	0x200069c4

0800c408 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c408:	b480      	push	{r7}
 800c40a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c40c:	4b07      	ldr	r3, [pc, #28]	; (800c42c <pvTaskIncrementMutexHeldCount+0x24>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d004      	beq.n	800c41e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c414:	4b05      	ldr	r3, [pc, #20]	; (800c42c <pvTaskIncrementMutexHeldCount+0x24>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c41a:	3201      	adds	r2, #1
 800c41c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c41e:	4b03      	ldr	r3, [pc, #12]	; (800c42c <pvTaskIncrementMutexHeldCount+0x24>)
 800c420:	681b      	ldr	r3, [r3, #0]
	}
 800c422:	4618      	mov	r0, r3
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	200064e8 	.word	0x200064e8

0800c430 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c43a:	4b21      	ldr	r3, [pc, #132]	; (800c4c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c440:	4b20      	ldr	r3, [pc, #128]	; (800c4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3304      	adds	r3, #4
 800c446:	4618      	mov	r0, r3
 800c448:	f7fd ffe8 	bl	800a41c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c452:	d10a      	bne.n	800c46a <prvAddCurrentTaskToDelayedList+0x3a>
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d007      	beq.n	800c46a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c45a:	4b1a      	ldr	r3, [pc, #104]	; (800c4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	3304      	adds	r3, #4
 800c460:	4619      	mov	r1, r3
 800c462:	4819      	ldr	r0, [pc, #100]	; (800c4c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800c464:	f7fd ff7d 	bl	800a362 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c468:	e026      	b.n	800c4b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	4413      	add	r3, r2
 800c470:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c472:	4b14      	ldr	r3, [pc, #80]	; (800c4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	68ba      	ldr	r2, [r7, #8]
 800c478:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d209      	bcs.n	800c496 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c482:	4b12      	ldr	r3, [pc, #72]	; (800c4cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	4b0f      	ldr	r3, [pc, #60]	; (800c4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3304      	adds	r3, #4
 800c48c:	4619      	mov	r1, r3
 800c48e:	4610      	mov	r0, r2
 800c490:	f7fd ff8b 	bl	800a3aa <vListInsert>
}
 800c494:	e010      	b.n	800c4b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c496:	4b0e      	ldr	r3, [pc, #56]	; (800c4d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	4b0a      	ldr	r3, [pc, #40]	; (800c4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	3304      	adds	r3, #4
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	4610      	mov	r0, r2
 800c4a4:	f7fd ff81 	bl	800a3aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c4a8:	4b0a      	ldr	r3, [pc, #40]	; (800c4d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d202      	bcs.n	800c4b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c4b2:	4a08      	ldr	r2, [pc, #32]	; (800c4d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	6013      	str	r3, [r2, #0]
}
 800c4b8:	bf00      	nop
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	200069c0 	.word	0x200069c0
 800c4c4:	200064e8 	.word	0x200064e8
 800c4c8:	200069a8 	.word	0x200069a8
 800c4cc:	20006978 	.word	0x20006978
 800c4d0:	20006974 	.word	0x20006974
 800c4d4:	200069dc 	.word	0x200069dc

0800c4d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b08a      	sub	sp, #40	; 0x28
 800c4dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c4e2:	f000 fb07 	bl	800caf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c4e6:	4b1c      	ldr	r3, [pc, #112]	; (800c558 <xTimerCreateTimerTask+0x80>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d021      	beq.n	800c532 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c4f6:	1d3a      	adds	r2, r7, #4
 800c4f8:	f107 0108 	add.w	r1, r7, #8
 800c4fc:	f107 030c 	add.w	r3, r7, #12
 800c500:	4618      	mov	r0, r3
 800c502:	f7fd fee7 	bl	800a2d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c506:	6879      	ldr	r1, [r7, #4]
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	9202      	str	r2, [sp, #8]
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	2302      	movs	r3, #2
 800c512:	9300      	str	r3, [sp, #0]
 800c514:	2300      	movs	r3, #0
 800c516:	460a      	mov	r2, r1
 800c518:	4910      	ldr	r1, [pc, #64]	; (800c55c <xTimerCreateTimerTask+0x84>)
 800c51a:	4811      	ldr	r0, [pc, #68]	; (800c560 <xTimerCreateTimerTask+0x88>)
 800c51c:	f7fe ffb6 	bl	800b48c <xTaskCreateStatic>
 800c520:	4603      	mov	r3, r0
 800c522:	4a10      	ldr	r2, [pc, #64]	; (800c564 <xTimerCreateTimerTask+0x8c>)
 800c524:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c526:	4b0f      	ldr	r3, [pc, #60]	; (800c564 <xTimerCreateTimerTask+0x8c>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d001      	beq.n	800c532 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c52e:	2301      	movs	r3, #1
 800c530:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10a      	bne.n	800c54e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53c:	f383 8811 	msr	BASEPRI, r3
 800c540:	f3bf 8f6f 	isb	sy
 800c544:	f3bf 8f4f 	dsb	sy
 800c548:	613b      	str	r3, [r7, #16]
}
 800c54a:	bf00      	nop
 800c54c:	e7fe      	b.n	800c54c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c54e:	697b      	ldr	r3, [r7, #20]
}
 800c550:	4618      	mov	r0, r3
 800c552:	3718      	adds	r7, #24
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	20006a18 	.word	0x20006a18
 800c55c:	0800f338 	.word	0x0800f338
 800c560:	0800c69d 	.word	0x0800c69d
 800c564:	20006a1c 	.word	0x20006a1c

0800c568 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b08a      	sub	sp, #40	; 0x28
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
 800c574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c576:	2300      	movs	r3, #0
 800c578:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10a      	bne.n	800c596 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	623b      	str	r3, [r7, #32]
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c596:	4b1a      	ldr	r3, [pc, #104]	; (800c600 <xTimerGenericCommand+0x98>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d02a      	beq.n	800c5f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2b05      	cmp	r3, #5
 800c5ae:	dc18      	bgt.n	800c5e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c5b0:	f7ff fdb4 	bl	800c11c <xTaskGetSchedulerState>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d109      	bne.n	800c5ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c5ba:	4b11      	ldr	r3, [pc, #68]	; (800c600 <xTimerGenericCommand+0x98>)
 800c5bc:	6818      	ldr	r0, [r3, #0]
 800c5be:	f107 0110 	add.w	r1, r7, #16
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5c6:	f7fe f8fb 	bl	800a7c0 <xQueueGenericSend>
 800c5ca:	6278      	str	r0, [r7, #36]	; 0x24
 800c5cc:	e012      	b.n	800c5f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c5ce:	4b0c      	ldr	r3, [pc, #48]	; (800c600 <xTimerGenericCommand+0x98>)
 800c5d0:	6818      	ldr	r0, [r3, #0]
 800c5d2:	f107 0110 	add.w	r1, r7, #16
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f7fe f8f1 	bl	800a7c0 <xQueueGenericSend>
 800c5de:	6278      	str	r0, [r7, #36]	; 0x24
 800c5e0:	e008      	b.n	800c5f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c5e2:	4b07      	ldr	r3, [pc, #28]	; (800c600 <xTimerGenericCommand+0x98>)
 800c5e4:	6818      	ldr	r0, [r3, #0]
 800c5e6:	f107 0110 	add.w	r1, r7, #16
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	683a      	ldr	r2, [r7, #0]
 800c5ee:	f7fe f9e5 	bl	800a9bc <xQueueGenericSendFromISR>
 800c5f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3728      	adds	r7, #40	; 0x28
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	20006a18 	.word	0x20006a18

0800c604 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b088      	sub	sp, #32
 800c608:	af02      	add	r7, sp, #8
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c60e:	4b22      	ldr	r3, [pc, #136]	; (800c698 <prvProcessExpiredTimer+0x94>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	3304      	adds	r3, #4
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fd fefd 	bl	800a41c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c628:	f003 0304 	and.w	r3, r3, #4
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d022      	beq.n	800c676 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	699a      	ldr	r2, [r3, #24]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	18d1      	adds	r1, r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	683a      	ldr	r2, [r7, #0]
 800c63c:	6978      	ldr	r0, [r7, #20]
 800c63e:	f000 f8d1 	bl	800c7e4 <prvInsertTimerInActiveList>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d01f      	beq.n	800c688 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c648:	2300      	movs	r3, #0
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	2300      	movs	r3, #0
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	2100      	movs	r1, #0
 800c652:	6978      	ldr	r0, [r7, #20]
 800c654:	f7ff ff88 	bl	800c568 <xTimerGenericCommand>
 800c658:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d113      	bne.n	800c688 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	60fb      	str	r3, [r7, #12]
}
 800c672:	bf00      	nop
 800c674:	e7fe      	b.n	800c674 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c67c:	f023 0301 	bic.w	r3, r3, #1
 800c680:	b2da      	uxtb	r2, r3
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	6a1b      	ldr	r3, [r3, #32]
 800c68c:	6978      	ldr	r0, [r7, #20]
 800c68e:	4798      	blx	r3
}
 800c690:	bf00      	nop
 800c692:	3718      	adds	r7, #24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	20006a10 	.word	0x20006a10

0800c69c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6a4:	f107 0308 	add.w	r3, r7, #8
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f000 f857 	bl	800c75c <prvGetNextExpireTime>
 800c6ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f000 f803 	bl	800c6c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c6ba:	f000 f8d5 	bl	800c868 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6be:	e7f1      	b.n	800c6a4 <prvTimerTask+0x8>

0800c6c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c6ca:	f7ff f93b 	bl	800b944 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6ce:	f107 0308 	add.w	r3, r7, #8
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 f866 	bl	800c7a4 <prvSampleTimeNow>
 800c6d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d130      	bne.n	800c742 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10a      	bne.n	800c6fc <prvProcessTimerOrBlockTask+0x3c>
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d806      	bhi.n	800c6fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c6ee:	f7ff f937 	bl	800b960 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c6f2:	68f9      	ldr	r1, [r7, #12]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f7ff ff85 	bl	800c604 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c6fa:	e024      	b.n	800c746 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d008      	beq.n	800c714 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c702:	4b13      	ldr	r3, [pc, #76]	; (800c750 <prvProcessTimerOrBlockTask+0x90>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d101      	bne.n	800c710 <prvProcessTimerOrBlockTask+0x50>
 800c70c:	2301      	movs	r3, #1
 800c70e:	e000      	b.n	800c712 <prvProcessTimerOrBlockTask+0x52>
 800c710:	2300      	movs	r3, #0
 800c712:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c714:	4b0f      	ldr	r3, [pc, #60]	; (800c754 <prvProcessTimerOrBlockTask+0x94>)
 800c716:	6818      	ldr	r0, [r3, #0]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	1ad3      	subs	r3, r2, r3
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	4619      	mov	r1, r3
 800c722:	f7fe fe7f 	bl	800b424 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c726:	f7ff f91b 	bl	800b960 <xTaskResumeAll>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d10a      	bne.n	800c746 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c730:	4b09      	ldr	r3, [pc, #36]	; (800c758 <prvProcessTimerOrBlockTask+0x98>)
 800c732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c736:	601a      	str	r2, [r3, #0]
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	f3bf 8f6f 	isb	sy
}
 800c740:	e001      	b.n	800c746 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c742:	f7ff f90d 	bl	800b960 <xTaskResumeAll>
}
 800c746:	bf00      	nop
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	20006a14 	.word	0x20006a14
 800c754:	20006a18 	.word	0x20006a18
 800c758:	e000ed04 	.word	0xe000ed04

0800c75c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c764:	4b0e      	ldr	r3, [pc, #56]	; (800c7a0 <prvGetNextExpireTime+0x44>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d101      	bne.n	800c772 <prvGetNextExpireTime+0x16>
 800c76e:	2201      	movs	r2, #1
 800c770:	e000      	b.n	800c774 <prvGetNextExpireTime+0x18>
 800c772:	2200      	movs	r2, #0
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d105      	bne.n	800c78c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c780:	4b07      	ldr	r3, [pc, #28]	; (800c7a0 <prvGetNextExpireTime+0x44>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	60fb      	str	r3, [r7, #12]
 800c78a:	e001      	b.n	800c790 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c78c:	2300      	movs	r3, #0
 800c78e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c790:	68fb      	ldr	r3, [r7, #12]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3714      	adds	r7, #20
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	20006a10 	.word	0x20006a10

0800c7a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c7ac:	f7ff f976 	bl	800ba9c <xTaskGetTickCount>
 800c7b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c7b2:	4b0b      	ldr	r3, [pc, #44]	; (800c7e0 <prvSampleTimeNow+0x3c>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d205      	bcs.n	800c7c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c7bc:	f000 f936 	bl	800ca2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	601a      	str	r2, [r3, #0]
 800c7c6:	e002      	b.n	800c7ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c7ce:	4a04      	ldr	r2, [pc, #16]	; (800c7e0 <prvSampleTimeNow+0x3c>)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	20006a20 	.word	0x20006a20

0800c7e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
 800c7f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	429a      	cmp	r2, r3
 800c808:	d812      	bhi.n	800c830 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	1ad2      	subs	r2, r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	699b      	ldr	r3, [r3, #24]
 800c814:	429a      	cmp	r2, r3
 800c816:	d302      	bcc.n	800c81e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c818:	2301      	movs	r3, #1
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	e01b      	b.n	800c856 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c81e:	4b10      	ldr	r3, [pc, #64]	; (800c860 <prvInsertTimerInActiveList+0x7c>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3304      	adds	r3, #4
 800c826:	4619      	mov	r1, r3
 800c828:	4610      	mov	r0, r2
 800c82a:	f7fd fdbe 	bl	800a3aa <vListInsert>
 800c82e:	e012      	b.n	800c856 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	429a      	cmp	r2, r3
 800c836:	d206      	bcs.n	800c846 <prvInsertTimerInActiveList+0x62>
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d302      	bcc.n	800c846 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c840:	2301      	movs	r3, #1
 800c842:	617b      	str	r3, [r7, #20]
 800c844:	e007      	b.n	800c856 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c846:	4b07      	ldr	r3, [pc, #28]	; (800c864 <prvInsertTimerInActiveList+0x80>)
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3304      	adds	r3, #4
 800c84e:	4619      	mov	r1, r3
 800c850:	4610      	mov	r0, r2
 800c852:	f7fd fdaa 	bl	800a3aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c856:	697b      	ldr	r3, [r7, #20]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3718      	adds	r7, #24
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	20006a14 	.word	0x20006a14
 800c864:	20006a10 	.word	0x20006a10

0800c868 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b08e      	sub	sp, #56	; 0x38
 800c86c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c86e:	e0ca      	b.n	800ca06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	da18      	bge.n	800c8a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c876:	1d3b      	adds	r3, r7, #4
 800c878:	3304      	adds	r3, #4
 800c87a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10a      	bne.n	800c898 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c886:	f383 8811 	msr	BASEPRI, r3
 800c88a:	f3bf 8f6f 	isb	sy
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	61fb      	str	r3, [r7, #28]
}
 800c894:	bf00      	nop
 800c896:	e7fe      	b.n	800c896 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c89e:	6850      	ldr	r0, [r2, #4]
 800c8a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8a2:	6892      	ldr	r2, [r2, #8]
 800c8a4:	4611      	mov	r1, r2
 800c8a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f2c0 80aa 	blt.w	800ca04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b6:	695b      	ldr	r3, [r3, #20]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d004      	beq.n	800c8c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8be:	3304      	adds	r3, #4
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fd fdab 	bl	800a41c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8c6:	463b      	mov	r3, r7
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7ff ff6b 	bl	800c7a4 <prvSampleTimeNow>
 800c8ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b09      	cmp	r3, #9
 800c8d4:	f200 8097 	bhi.w	800ca06 <prvProcessReceivedCommands+0x19e>
 800c8d8:	a201      	add	r2, pc, #4	; (adr r2, 800c8e0 <prvProcessReceivedCommands+0x78>)
 800c8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8de:	bf00      	nop
 800c8e0:	0800c909 	.word	0x0800c909
 800c8e4:	0800c909 	.word	0x0800c909
 800c8e8:	0800c909 	.word	0x0800c909
 800c8ec:	0800c97d 	.word	0x0800c97d
 800c8f0:	0800c991 	.word	0x0800c991
 800c8f4:	0800c9db 	.word	0x0800c9db
 800c8f8:	0800c909 	.word	0x0800c909
 800c8fc:	0800c909 	.word	0x0800c909
 800c900:	0800c97d 	.word	0x0800c97d
 800c904:	0800c991 	.word	0x0800c991
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c90e:	f043 0301 	orr.w	r3, r3, #1
 800c912:	b2da      	uxtb	r2, r3
 800c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	18d1      	adds	r1, r2, r3
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c928:	f7ff ff5c 	bl	800c7e4 <prvInsertTimerInActiveList>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d069      	beq.n	800ca06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c934:	6a1b      	ldr	r3, [r3, #32]
 800c936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c938:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c940:	f003 0304 	and.w	r3, r3, #4
 800c944:	2b00      	cmp	r3, #0
 800c946:	d05e      	beq.n	800ca06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94c:	699b      	ldr	r3, [r3, #24]
 800c94e:	441a      	add	r2, r3
 800c950:	2300      	movs	r3, #0
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	2300      	movs	r3, #0
 800c956:	2100      	movs	r1, #0
 800c958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c95a:	f7ff fe05 	bl	800c568 <xTimerGenericCommand>
 800c95e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c960:	6a3b      	ldr	r3, [r7, #32]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d14f      	bne.n	800ca06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c96a:	f383 8811 	msr	BASEPRI, r3
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	61bb      	str	r3, [r7, #24]
}
 800c978:	bf00      	nop
 800c97a:	e7fe      	b.n	800c97a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c982:	f023 0301 	bic.w	r3, r3, #1
 800c986:	b2da      	uxtb	r2, r3
 800c988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c98e:	e03a      	b.n	800ca06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c996:	f043 0301 	orr.w	r3, r3, #1
 800c99a:	b2da      	uxtb	r2, r3
 800c99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d10a      	bne.n	800c9c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	617b      	str	r3, [r7, #20]
}
 800c9c2:	bf00      	nop
 800c9c4:	e7fe      	b.n	800c9c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c8:	699a      	ldr	r2, [r3, #24]
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	18d1      	adds	r1, r2, r3
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9d4:	f7ff ff06 	bl	800c7e4 <prvInsertTimerInActiveList>
					break;
 800c9d8:	e015      	b.n	800ca06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9e0:	f003 0302 	and.w	r3, r3, #2
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d103      	bne.n	800c9f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c9e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9ea:	f000 fbe1 	bl	800d1b0 <vPortFree>
 800c9ee:	e00a      	b.n	800ca06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9f6:	f023 0301 	bic.w	r3, r3, #1
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca02:	e000      	b.n	800ca06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ca04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca06:	4b08      	ldr	r3, [pc, #32]	; (800ca28 <prvProcessReceivedCommands+0x1c0>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	1d39      	adds	r1, r7, #4
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fe f8fc 	bl	800ac0c <xQueueReceive>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	f47f af2a 	bne.w	800c870 <prvProcessReceivedCommands+0x8>
	}
}
 800ca1c:	bf00      	nop
 800ca1e:	bf00      	nop
 800ca20:	3730      	adds	r7, #48	; 0x30
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	20006a18 	.word	0x20006a18

0800ca2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b088      	sub	sp, #32
 800ca30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca32:	e048      	b.n	800cac6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca34:	4b2d      	ldr	r3, [pc, #180]	; (800caec <prvSwitchTimerLists+0xc0>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca3e:	4b2b      	ldr	r3, [pc, #172]	; (800caec <prvSwitchTimerLists+0xc0>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7fd fce5 	bl	800a41c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6a1b      	ldr	r3, [r3, #32]
 800ca56:	68f8      	ldr	r0, [r7, #12]
 800ca58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca60:	f003 0304 	and.w	r3, r3, #4
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d02e      	beq.n	800cac6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	699b      	ldr	r3, [r3, #24]
 800ca6c:	693a      	ldr	r2, [r7, #16]
 800ca6e:	4413      	add	r3, r2
 800ca70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d90e      	bls.n	800ca98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	68fa      	ldr	r2, [r7, #12]
 800ca84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca86:	4b19      	ldr	r3, [pc, #100]	; (800caec <prvSwitchTimerLists+0xc0>)
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	4619      	mov	r1, r3
 800ca90:	4610      	mov	r0, r2
 800ca92:	f7fd fc8a 	bl	800a3aa <vListInsert>
 800ca96:	e016      	b.n	800cac6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca98:	2300      	movs	r3, #0
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	693a      	ldr	r2, [r7, #16]
 800caa0:	2100      	movs	r1, #0
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	f7ff fd60 	bl	800c568 <xTimerGenericCommand>
 800caa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d10a      	bne.n	800cac6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab4:	f383 8811 	msr	BASEPRI, r3
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	603b      	str	r3, [r7, #0]
}
 800cac2:	bf00      	nop
 800cac4:	e7fe      	b.n	800cac4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cac6:	4b09      	ldr	r3, [pc, #36]	; (800caec <prvSwitchTimerLists+0xc0>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1b1      	bne.n	800ca34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cad0:	4b06      	ldr	r3, [pc, #24]	; (800caec <prvSwitchTimerLists+0xc0>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cad6:	4b06      	ldr	r3, [pc, #24]	; (800caf0 <prvSwitchTimerLists+0xc4>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a04      	ldr	r2, [pc, #16]	; (800caec <prvSwitchTimerLists+0xc0>)
 800cadc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cade:	4a04      	ldr	r2, [pc, #16]	; (800caf0 <prvSwitchTimerLists+0xc4>)
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	6013      	str	r3, [r2, #0]
}
 800cae4:	bf00      	nop
 800cae6:	3718      	adds	r7, #24
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	20006a10 	.word	0x20006a10
 800caf0:	20006a14 	.word	0x20006a14

0800caf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cafa:	f000 f96b 	bl	800cdd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cafe:	4b15      	ldr	r3, [pc, #84]	; (800cb54 <prvCheckForValidListAndQueue+0x60>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d120      	bne.n	800cb48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb06:	4814      	ldr	r0, [pc, #80]	; (800cb58 <prvCheckForValidListAndQueue+0x64>)
 800cb08:	f7fd fbfe 	bl	800a308 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb0c:	4813      	ldr	r0, [pc, #76]	; (800cb5c <prvCheckForValidListAndQueue+0x68>)
 800cb0e:	f7fd fbfb 	bl	800a308 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb12:	4b13      	ldr	r3, [pc, #76]	; (800cb60 <prvCheckForValidListAndQueue+0x6c>)
 800cb14:	4a10      	ldr	r2, [pc, #64]	; (800cb58 <prvCheckForValidListAndQueue+0x64>)
 800cb16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cb18:	4b12      	ldr	r3, [pc, #72]	; (800cb64 <prvCheckForValidListAndQueue+0x70>)
 800cb1a:	4a10      	ldr	r2, [pc, #64]	; (800cb5c <prvCheckForValidListAndQueue+0x68>)
 800cb1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cb1e:	2300      	movs	r3, #0
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	4b11      	ldr	r3, [pc, #68]	; (800cb68 <prvCheckForValidListAndQueue+0x74>)
 800cb24:	4a11      	ldr	r2, [pc, #68]	; (800cb6c <prvCheckForValidListAndQueue+0x78>)
 800cb26:	2110      	movs	r1, #16
 800cb28:	200a      	movs	r0, #10
 800cb2a:	f7fd fd09 	bl	800a540 <xQueueGenericCreateStatic>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	4a08      	ldr	r2, [pc, #32]	; (800cb54 <prvCheckForValidListAndQueue+0x60>)
 800cb32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cb34:	4b07      	ldr	r3, [pc, #28]	; (800cb54 <prvCheckForValidListAndQueue+0x60>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d005      	beq.n	800cb48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb3c:	4b05      	ldr	r3, [pc, #20]	; (800cb54 <prvCheckForValidListAndQueue+0x60>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	490b      	ldr	r1, [pc, #44]	; (800cb70 <prvCheckForValidListAndQueue+0x7c>)
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fe fc1a 	bl	800b37c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb48:	f000 f974 	bl	800ce34 <vPortExitCritical>
}
 800cb4c:	bf00      	nop
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	20006a18 	.word	0x20006a18
 800cb58:	200069e8 	.word	0x200069e8
 800cb5c:	200069fc 	.word	0x200069fc
 800cb60:	20006a10 	.word	0x20006a10
 800cb64:	20006a14 	.word	0x20006a14
 800cb68:	20006ac4 	.word	0x20006ac4
 800cb6c:	20006a24 	.word	0x20006a24
 800cb70:	0800f340 	.word	0x0800f340

0800cb74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb74:	b480      	push	{r7}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	3b04      	subs	r3, #4
 800cb84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	3b04      	subs	r3, #4
 800cb92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	f023 0201 	bic.w	r2, r3, #1
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	3b04      	subs	r3, #4
 800cba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cba4:	4a0c      	ldr	r2, [pc, #48]	; (800cbd8 <pxPortInitialiseStack+0x64>)
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3b14      	subs	r3, #20
 800cbae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3b04      	subs	r3, #4
 800cbba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f06f 0202 	mvn.w	r2, #2
 800cbc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	3b20      	subs	r3, #32
 800cbc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cbca:	68fb      	ldr	r3, [r7, #12]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3714      	adds	r7, #20
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr
 800cbd8:	0800cbdd 	.word	0x0800cbdd

0800cbdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cbe6:	4b12      	ldr	r3, [pc, #72]	; (800cc30 <prvTaskExitError+0x54>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbee:	d00a      	beq.n	800cc06 <prvTaskExitError+0x2a>
	__asm volatile
 800cbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	60fb      	str	r3, [r7, #12]
}
 800cc02:	bf00      	nop
 800cc04:	e7fe      	b.n	800cc04 <prvTaskExitError+0x28>
	__asm volatile
 800cc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0a:	f383 8811 	msr	BASEPRI, r3
 800cc0e:	f3bf 8f6f 	isb	sy
 800cc12:	f3bf 8f4f 	dsb	sy
 800cc16:	60bb      	str	r3, [r7, #8]
}
 800cc18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc1a:	bf00      	nop
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d0fc      	beq.n	800cc1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc22:	bf00      	nop
 800cc24:	bf00      	nop
 800cc26:	3714      	adds	r7, #20
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr
 800cc30:	200000ac 	.word	0x200000ac
	...

0800cc40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc40:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <pxCurrentTCBConst2>)
 800cc42:	6819      	ldr	r1, [r3, #0]
 800cc44:	6808      	ldr	r0, [r1, #0]
 800cc46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4a:	f380 8809 	msr	PSP, r0
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f04f 0000 	mov.w	r0, #0
 800cc56:	f380 8811 	msr	BASEPRI, r0
 800cc5a:	4770      	bx	lr
 800cc5c:	f3af 8000 	nop.w

0800cc60 <pxCurrentTCBConst2>:
 800cc60:	200064e8 	.word	0x200064e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc64:	bf00      	nop
 800cc66:	bf00      	nop

0800cc68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc68:	4808      	ldr	r0, [pc, #32]	; (800cc8c <prvPortStartFirstTask+0x24>)
 800cc6a:	6800      	ldr	r0, [r0, #0]
 800cc6c:	6800      	ldr	r0, [r0, #0]
 800cc6e:	f380 8808 	msr	MSP, r0
 800cc72:	f04f 0000 	mov.w	r0, #0
 800cc76:	f380 8814 	msr	CONTROL, r0
 800cc7a:	b662      	cpsie	i
 800cc7c:	b661      	cpsie	f
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	df00      	svc	0
 800cc88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc8a:	bf00      	nop
 800cc8c:	e000ed08 	.word	0xe000ed08

0800cc90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc96:	4b46      	ldr	r3, [pc, #280]	; (800cdb0 <xPortStartScheduler+0x120>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a46      	ldr	r2, [pc, #280]	; (800cdb4 <xPortStartScheduler+0x124>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d10a      	bne.n	800ccb6 <xPortStartScheduler+0x26>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	613b      	str	r3, [r7, #16]
}
 800ccb2:	bf00      	nop
 800ccb4:	e7fe      	b.n	800ccb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ccb6:	4b3e      	ldr	r3, [pc, #248]	; (800cdb0 <xPortStartScheduler+0x120>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a3f      	ldr	r2, [pc, #252]	; (800cdb8 <xPortStartScheduler+0x128>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d10a      	bne.n	800ccd6 <xPortStartScheduler+0x46>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	60fb      	str	r3, [r7, #12]
}
 800ccd2:	bf00      	nop
 800ccd4:	e7fe      	b.n	800ccd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ccd6:	4b39      	ldr	r3, [pc, #228]	; (800cdbc <xPortStartScheduler+0x12c>)
 800ccd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	22ff      	movs	r2, #255	; 0xff
 800cce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ccf0:	78fb      	ldrb	r3, [r7, #3]
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	4b31      	ldr	r3, [pc, #196]	; (800cdc0 <xPortStartScheduler+0x130>)
 800ccfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ccfe:	4b31      	ldr	r3, [pc, #196]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd00:	2207      	movs	r2, #7
 800cd02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd04:	e009      	b.n	800cd1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cd06:	4b2f      	ldr	r3, [pc, #188]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	4a2d      	ldr	r2, [pc, #180]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd10:	78fb      	ldrb	r3, [r7, #3]
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	005b      	lsls	r3, r3, #1
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd1a:	78fb      	ldrb	r3, [r7, #3]
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd22:	2b80      	cmp	r3, #128	; 0x80
 800cd24:	d0ef      	beq.n	800cd06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd26:	4b27      	ldr	r3, [pc, #156]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f1c3 0307 	rsb	r3, r3, #7
 800cd2e:	2b04      	cmp	r3, #4
 800cd30:	d00a      	beq.n	800cd48 <xPortStartScheduler+0xb8>
	__asm volatile
 800cd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd36:	f383 8811 	msr	BASEPRI, r3
 800cd3a:	f3bf 8f6f 	isb	sy
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	60bb      	str	r3, [r7, #8]
}
 800cd44:	bf00      	nop
 800cd46:	e7fe      	b.n	800cd46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd48:	4b1e      	ldr	r3, [pc, #120]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	021b      	lsls	r3, r3, #8
 800cd4e:	4a1d      	ldr	r2, [pc, #116]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd52:	4b1c      	ldr	r3, [pc, #112]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd5a:	4a1a      	ldr	r2, [pc, #104]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd66:	4b18      	ldr	r3, [pc, #96]	; (800cdc8 <xPortStartScheduler+0x138>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a17      	ldr	r2, [pc, #92]	; (800cdc8 <xPortStartScheduler+0x138>)
 800cd6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd72:	4b15      	ldr	r3, [pc, #84]	; (800cdc8 <xPortStartScheduler+0x138>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a14      	ldr	r2, [pc, #80]	; (800cdc8 <xPortStartScheduler+0x138>)
 800cd78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cd7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd7e:	f000 f8dd 	bl	800cf3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd82:	4b12      	ldr	r3, [pc, #72]	; (800cdcc <xPortStartScheduler+0x13c>)
 800cd84:	2200      	movs	r2, #0
 800cd86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd88:	f000 f8fc 	bl	800cf84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd8c:	4b10      	ldr	r3, [pc, #64]	; (800cdd0 <xPortStartScheduler+0x140>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a0f      	ldr	r2, [pc, #60]	; (800cdd0 <xPortStartScheduler+0x140>)
 800cd92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd98:	f7ff ff66 	bl	800cc68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd9c:	f7fe ff48 	bl	800bc30 <vTaskSwitchContext>
	prvTaskExitError();
 800cda0:	f7ff ff1c 	bl	800cbdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3718      	adds	r7, #24
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	e000ed00 	.word	0xe000ed00
 800cdb4:	410fc271 	.word	0x410fc271
 800cdb8:	410fc270 	.word	0x410fc270
 800cdbc:	e000e400 	.word	0xe000e400
 800cdc0:	20006b14 	.word	0x20006b14
 800cdc4:	20006b18 	.word	0x20006b18
 800cdc8:	e000ed20 	.word	0xe000ed20
 800cdcc:	200000ac 	.word	0x200000ac
 800cdd0:	e000ef34 	.word	0xe000ef34

0800cdd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	f383 8811 	msr	BASEPRI, r3
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	f3bf 8f4f 	dsb	sy
 800cdea:	607b      	str	r3, [r7, #4]
}
 800cdec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cdee:	4b0f      	ldr	r3, [pc, #60]	; (800ce2c <vPortEnterCritical+0x58>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	4a0d      	ldr	r2, [pc, #52]	; (800ce2c <vPortEnterCritical+0x58>)
 800cdf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cdf8:	4b0c      	ldr	r3, [pc, #48]	; (800ce2c <vPortEnterCritical+0x58>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d10f      	bne.n	800ce20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce00:	4b0b      	ldr	r3, [pc, #44]	; (800ce30 <vPortEnterCritical+0x5c>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00a      	beq.n	800ce20 <vPortEnterCritical+0x4c>
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	603b      	str	r3, [r7, #0]
}
 800ce1c:	bf00      	nop
 800ce1e:	e7fe      	b.n	800ce1e <vPortEnterCritical+0x4a>
	}
}
 800ce20:	bf00      	nop
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr
 800ce2c:	200000ac 	.word	0x200000ac
 800ce30:	e000ed04 	.word	0xe000ed04

0800ce34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce3a:	4b12      	ldr	r3, [pc, #72]	; (800ce84 <vPortExitCritical+0x50>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10a      	bne.n	800ce58 <vPortExitCritical+0x24>
	__asm volatile
 800ce42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce46:	f383 8811 	msr	BASEPRI, r3
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	607b      	str	r3, [r7, #4]
}
 800ce54:	bf00      	nop
 800ce56:	e7fe      	b.n	800ce56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce58:	4b0a      	ldr	r3, [pc, #40]	; (800ce84 <vPortExitCritical+0x50>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	4a09      	ldr	r2, [pc, #36]	; (800ce84 <vPortExitCritical+0x50>)
 800ce60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce62:	4b08      	ldr	r3, [pc, #32]	; (800ce84 <vPortExitCritical+0x50>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d105      	bne.n	800ce76 <vPortExitCritical+0x42>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	f383 8811 	msr	BASEPRI, r3
}
 800ce74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce76:	bf00      	nop
 800ce78:	370c      	adds	r7, #12
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	200000ac 	.word	0x200000ac
	...

0800ce90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce90:	f3ef 8009 	mrs	r0, PSP
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	4b15      	ldr	r3, [pc, #84]	; (800cef0 <pxCurrentTCBConst>)
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	f01e 0f10 	tst.w	lr, #16
 800cea0:	bf08      	it	eq
 800cea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceaa:	6010      	str	r0, [r2, #0]
 800ceac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ceb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ceb4:	f380 8811 	msr	BASEPRI, r0
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f7fe feb6 	bl	800bc30 <vTaskSwitchContext>
 800cec4:	f04f 0000 	mov.w	r0, #0
 800cec8:	f380 8811 	msr	BASEPRI, r0
 800cecc:	bc09      	pop	{r0, r3}
 800cece:	6819      	ldr	r1, [r3, #0]
 800ced0:	6808      	ldr	r0, [r1, #0]
 800ced2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced6:	f01e 0f10 	tst.w	lr, #16
 800ceda:	bf08      	it	eq
 800cedc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cee0:	f380 8809 	msr	PSP, r0
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop
 800ceec:	f3af 8000 	nop.w

0800cef0 <pxCurrentTCBConst>:
 800cef0:	200064e8 	.word	0x200064e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cef4:	bf00      	nop
 800cef6:	bf00      	nop

0800cef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
	__asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	607b      	str	r3, [r7, #4]
}
 800cf10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf12:	f7fe fdd3 	bl	800babc <xTaskIncrementTick>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d003      	beq.n	800cf24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf1c:	4b06      	ldr	r3, [pc, #24]	; (800cf38 <xPortSysTickHandler+0x40>)
 800cf1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	2300      	movs	r3, #0
 800cf26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	f383 8811 	msr	BASEPRI, r3
}
 800cf2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf30:	bf00      	nop
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	e000ed04 	.word	0xe000ed04

0800cf3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf40:	4b0b      	ldr	r3, [pc, #44]	; (800cf70 <vPortSetupTimerInterrupt+0x34>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf46:	4b0b      	ldr	r3, [pc, #44]	; (800cf74 <vPortSetupTimerInterrupt+0x38>)
 800cf48:	2200      	movs	r2, #0
 800cf4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf4c:	4b0a      	ldr	r3, [pc, #40]	; (800cf78 <vPortSetupTimerInterrupt+0x3c>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a0a      	ldr	r2, [pc, #40]	; (800cf7c <vPortSetupTimerInterrupt+0x40>)
 800cf52:	fba2 2303 	umull	r2, r3, r2, r3
 800cf56:	099b      	lsrs	r3, r3, #6
 800cf58:	4a09      	ldr	r2, [pc, #36]	; (800cf80 <vPortSetupTimerInterrupt+0x44>)
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf5e:	4b04      	ldr	r3, [pc, #16]	; (800cf70 <vPortSetupTimerInterrupt+0x34>)
 800cf60:	2207      	movs	r2, #7
 800cf62:	601a      	str	r2, [r3, #0]
}
 800cf64:	bf00      	nop
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	e000e010 	.word	0xe000e010
 800cf74:	e000e018 	.word	0xe000e018
 800cf78:	2000008c 	.word	0x2000008c
 800cf7c:	10624dd3 	.word	0x10624dd3
 800cf80:	e000e014 	.word	0xe000e014

0800cf84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf94 <vPortEnableVFP+0x10>
 800cf88:	6801      	ldr	r1, [r0, #0]
 800cf8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf8e:	6001      	str	r1, [r0, #0]
 800cf90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf92:	bf00      	nop
 800cf94:	e000ed88 	.word	0xe000ed88

0800cf98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf98:	b480      	push	{r7}
 800cf9a:	b085      	sub	sp, #20
 800cf9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf9e:	f3ef 8305 	mrs	r3, IPSR
 800cfa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2b0f      	cmp	r3, #15
 800cfa8:	d914      	bls.n	800cfd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cfaa:	4a17      	ldr	r2, [pc, #92]	; (800d008 <vPortValidateInterruptPriority+0x70>)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	4413      	add	r3, r2
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cfb4:	4b15      	ldr	r3, [pc, #84]	; (800d00c <vPortValidateInterruptPriority+0x74>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	7afa      	ldrb	r2, [r7, #11]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d20a      	bcs.n	800cfd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	607b      	str	r3, [r7, #4]
}
 800cfd0:	bf00      	nop
 800cfd2:	e7fe      	b.n	800cfd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cfd4:	4b0e      	ldr	r3, [pc, #56]	; (800d010 <vPortValidateInterruptPriority+0x78>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cfdc:	4b0d      	ldr	r3, [pc, #52]	; (800d014 <vPortValidateInterruptPriority+0x7c>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d90a      	bls.n	800cffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe8:	f383 8811 	msr	BASEPRI, r3
 800cfec:	f3bf 8f6f 	isb	sy
 800cff0:	f3bf 8f4f 	dsb	sy
 800cff4:	603b      	str	r3, [r7, #0]
}
 800cff6:	bf00      	nop
 800cff8:	e7fe      	b.n	800cff8 <vPortValidateInterruptPriority+0x60>
	}
 800cffa:	bf00      	nop
 800cffc:	3714      	adds	r7, #20
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	e000e3f0 	.word	0xe000e3f0
 800d00c:	20006b14 	.word	0x20006b14
 800d010:	e000ed0c 	.word	0xe000ed0c
 800d014:	20006b18 	.word	0x20006b18

0800d018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b08a      	sub	sp, #40	; 0x28
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d020:	2300      	movs	r3, #0
 800d022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d024:	f7fe fc8e 	bl	800b944 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d028:	4b5b      	ldr	r3, [pc, #364]	; (800d198 <pvPortMalloc+0x180>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d101      	bne.n	800d034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d030:	f000 f920 	bl	800d274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d034:	4b59      	ldr	r3, [pc, #356]	; (800d19c <pvPortMalloc+0x184>)
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4013      	ands	r3, r2
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f040 8093 	bne.w	800d168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d01d      	beq.n	800d084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d048:	2208      	movs	r2, #8
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4413      	add	r3, r2
 800d04e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f003 0307 	and.w	r3, r3, #7
 800d056:	2b00      	cmp	r3, #0
 800d058:	d014      	beq.n	800d084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f023 0307 	bic.w	r3, r3, #7
 800d060:	3308      	adds	r3, #8
 800d062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f003 0307 	and.w	r3, r3, #7
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00a      	beq.n	800d084 <pvPortMalloc+0x6c>
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	617b      	str	r3, [r7, #20]
}
 800d080:	bf00      	nop
 800d082:	e7fe      	b.n	800d082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d06e      	beq.n	800d168 <pvPortMalloc+0x150>
 800d08a:	4b45      	ldr	r3, [pc, #276]	; (800d1a0 <pvPortMalloc+0x188>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	429a      	cmp	r2, r3
 800d092:	d869      	bhi.n	800d168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d094:	4b43      	ldr	r3, [pc, #268]	; (800d1a4 <pvPortMalloc+0x18c>)
 800d096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d098:	4b42      	ldr	r3, [pc, #264]	; (800d1a4 <pvPortMalloc+0x18c>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d09e:	e004      	b.n	800d0aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d903      	bls.n	800d0bc <pvPortMalloc+0xa4>
 800d0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1f1      	bne.n	800d0a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d0bc:	4b36      	ldr	r3, [pc, #216]	; (800d198 <pvPortMalloc+0x180>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d050      	beq.n	800d168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2208      	movs	r2, #8
 800d0cc:	4413      	add	r3, r2
 800d0ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	6a3b      	ldr	r3, [r7, #32]
 800d0d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0da:	685a      	ldr	r2, [r3, #4]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	1ad2      	subs	r2, r2, r3
 800d0e0:	2308      	movs	r3, #8
 800d0e2:	005b      	lsls	r3, r3, #1
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d91f      	bls.n	800d128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	f003 0307 	and.w	r3, r3, #7
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00a      	beq.n	800d110 <pvPortMalloc+0xf8>
	__asm volatile
 800d0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	613b      	str	r3, [r7, #16]
}
 800d10c:	bf00      	nop
 800d10e:	e7fe      	b.n	800d10e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d112:	685a      	ldr	r2, [r3, #4]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	1ad2      	subs	r2, r2, r3
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d122:	69b8      	ldr	r0, [r7, #24]
 800d124:	f000 f908 	bl	800d338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d128:	4b1d      	ldr	r3, [pc, #116]	; (800d1a0 <pvPortMalloc+0x188>)
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	1ad3      	subs	r3, r2, r3
 800d132:	4a1b      	ldr	r2, [pc, #108]	; (800d1a0 <pvPortMalloc+0x188>)
 800d134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d136:	4b1a      	ldr	r3, [pc, #104]	; (800d1a0 <pvPortMalloc+0x188>)
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	4b1b      	ldr	r3, [pc, #108]	; (800d1a8 <pvPortMalloc+0x190>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d203      	bcs.n	800d14a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d142:	4b17      	ldr	r3, [pc, #92]	; (800d1a0 <pvPortMalloc+0x188>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a18      	ldr	r2, [pc, #96]	; (800d1a8 <pvPortMalloc+0x190>)
 800d148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	4b13      	ldr	r3, [pc, #76]	; (800d19c <pvPortMalloc+0x184>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	431a      	orrs	r2, r3
 800d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15a:	2200      	movs	r2, #0
 800d15c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d15e:	4b13      	ldr	r3, [pc, #76]	; (800d1ac <pvPortMalloc+0x194>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	3301      	adds	r3, #1
 800d164:	4a11      	ldr	r2, [pc, #68]	; (800d1ac <pvPortMalloc+0x194>)
 800d166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d168:	f7fe fbfa 	bl	800b960 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	f003 0307 	and.w	r3, r3, #7
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00a      	beq.n	800d18c <pvPortMalloc+0x174>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	60fb      	str	r3, [r7, #12]
}
 800d188:	bf00      	nop
 800d18a:	e7fe      	b.n	800d18a <pvPortMalloc+0x172>
	return pvReturn;
 800d18c:	69fb      	ldr	r3, [r7, #28]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3728      	adds	r7, #40	; 0x28
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	2000a724 	.word	0x2000a724
 800d19c:	2000a738 	.word	0x2000a738
 800d1a0:	2000a728 	.word	0x2000a728
 800d1a4:	2000a71c 	.word	0x2000a71c
 800d1a8:	2000a72c 	.word	0x2000a72c
 800d1ac:	2000a730 	.word	0x2000a730

0800d1b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d04d      	beq.n	800d25e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d1c2:	2308      	movs	r3, #8
 800d1c4:	425b      	negs	r3, r3
 800d1c6:	697a      	ldr	r2, [r7, #20]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	4b24      	ldr	r3, [pc, #144]	; (800d268 <vPortFree+0xb8>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4013      	ands	r3, r2
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10a      	bne.n	800d1f4 <vPortFree+0x44>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	60fb      	str	r3, [r7, #12]
}
 800d1f0:	bf00      	nop
 800d1f2:	e7fe      	b.n	800d1f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00a      	beq.n	800d212 <vPortFree+0x62>
	__asm volatile
 800d1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d200:	f383 8811 	msr	BASEPRI, r3
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	60bb      	str	r3, [r7, #8]
}
 800d20e:	bf00      	nop
 800d210:	e7fe      	b.n	800d210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	4b14      	ldr	r3, [pc, #80]	; (800d268 <vPortFree+0xb8>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4013      	ands	r3, r2
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d01e      	beq.n	800d25e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d11a      	bne.n	800d25e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	685a      	ldr	r2, [r3, #4]
 800d22c:	4b0e      	ldr	r3, [pc, #56]	; (800d268 <vPortFree+0xb8>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	43db      	mvns	r3, r3
 800d232:	401a      	ands	r2, r3
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d238:	f7fe fb84 	bl	800b944 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	685a      	ldr	r2, [r3, #4]
 800d240:	4b0a      	ldr	r3, [pc, #40]	; (800d26c <vPortFree+0xbc>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4413      	add	r3, r2
 800d246:	4a09      	ldr	r2, [pc, #36]	; (800d26c <vPortFree+0xbc>)
 800d248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d24a:	6938      	ldr	r0, [r7, #16]
 800d24c:	f000 f874 	bl	800d338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d250:	4b07      	ldr	r3, [pc, #28]	; (800d270 <vPortFree+0xc0>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3301      	adds	r3, #1
 800d256:	4a06      	ldr	r2, [pc, #24]	; (800d270 <vPortFree+0xc0>)
 800d258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d25a:	f7fe fb81 	bl	800b960 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d25e:	bf00      	nop
 800d260:	3718      	adds	r7, #24
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	2000a738 	.word	0x2000a738
 800d26c:	2000a728 	.word	0x2000a728
 800d270:	2000a734 	.word	0x2000a734

0800d274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d27a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d27e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d280:	4b27      	ldr	r3, [pc, #156]	; (800d320 <prvHeapInit+0xac>)
 800d282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f003 0307 	and.w	r3, r3, #7
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00c      	beq.n	800d2a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	3307      	adds	r3, #7
 800d292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f023 0307 	bic.w	r3, r3, #7
 800d29a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d29c:	68ba      	ldr	r2, [r7, #8]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	4a1f      	ldr	r2, [pc, #124]	; (800d320 <prvHeapInit+0xac>)
 800d2a4:	4413      	add	r3, r2
 800d2a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2ac:	4a1d      	ldr	r2, [pc, #116]	; (800d324 <prvHeapInit+0xb0>)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d2b2:	4b1c      	ldr	r3, [pc, #112]	; (800d324 <prvHeapInit+0xb0>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	4413      	add	r3, r2
 800d2be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d2c0:	2208      	movs	r2, #8
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	1a9b      	subs	r3, r3, r2
 800d2c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f023 0307 	bic.w	r3, r3, #7
 800d2ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	4a15      	ldr	r2, [pc, #84]	; (800d328 <prvHeapInit+0xb4>)
 800d2d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d2d6:	4b14      	ldr	r3, [pc, #80]	; (800d328 <prvHeapInit+0xb4>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d2de:	4b12      	ldr	r3, [pc, #72]	; (800d328 <prvHeapInit+0xb4>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	1ad2      	subs	r2, r2, r3
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d2f4:	4b0c      	ldr	r3, [pc, #48]	; (800d328 <prvHeapInit+0xb4>)
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	4a0a      	ldr	r2, [pc, #40]	; (800d32c <prvHeapInit+0xb8>)
 800d302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	4a09      	ldr	r2, [pc, #36]	; (800d330 <prvHeapInit+0xbc>)
 800d30a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d30c:	4b09      	ldr	r3, [pc, #36]	; (800d334 <prvHeapInit+0xc0>)
 800d30e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d312:	601a      	str	r2, [r3, #0]
}
 800d314:	bf00      	nop
 800d316:	3714      	adds	r7, #20
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	20006b1c 	.word	0x20006b1c
 800d324:	2000a71c 	.word	0x2000a71c
 800d328:	2000a724 	.word	0x2000a724
 800d32c:	2000a72c 	.word	0x2000a72c
 800d330:	2000a728 	.word	0x2000a728
 800d334:	2000a738 	.word	0x2000a738

0800d338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d338:	b480      	push	{r7}
 800d33a:	b085      	sub	sp, #20
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d340:	4b28      	ldr	r3, [pc, #160]	; (800d3e4 <prvInsertBlockIntoFreeList+0xac>)
 800d342:	60fb      	str	r3, [r7, #12]
 800d344:	e002      	b.n	800d34c <prvInsertBlockIntoFreeList+0x14>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	60fb      	str	r3, [r7, #12]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	429a      	cmp	r2, r3
 800d354:	d8f7      	bhi.n	800d346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	68ba      	ldr	r2, [r7, #8]
 800d360:	4413      	add	r3, r2
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	429a      	cmp	r2, r3
 800d366:	d108      	bne.n	800d37a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	685a      	ldr	r2, [r3, #4]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	441a      	add	r2, r3
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	68ba      	ldr	r2, [r7, #8]
 800d384:	441a      	add	r2, r3
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d118      	bne.n	800d3c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	4b15      	ldr	r3, [pc, #84]	; (800d3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	429a      	cmp	r2, r3
 800d398:	d00d      	beq.n	800d3b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	685a      	ldr	r2, [r3, #4]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	441a      	add	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	601a      	str	r2, [r3, #0]
 800d3b4:	e008      	b.n	800d3c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d3b6:	4b0c      	ldr	r3, [pc, #48]	; (800d3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	601a      	str	r2, [r3, #0]
 800d3be:	e003      	b.n	800d3c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d002      	beq.n	800d3d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3d6:	bf00      	nop
 800d3d8:	3714      	adds	r7, #20
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	2000a71c 	.word	0x2000a71c
 800d3e8:	2000a724 	.word	0x2000a724

0800d3ec <arm_float_to_q15>:
 800d3ec:	b4f0      	push	{r4, r5, r6, r7}
 800d3ee:	0897      	lsrs	r7, r2, #2
 800d3f0:	d06e      	beq.n	800d4d0 <arm_float_to_q15+0xe4>
 800d3f2:	eddf 5a49 	vldr	s11, [pc, #292]	; 800d518 <arm_float_to_q15+0x12c>
 800d3f6:	f100 0510 	add.w	r5, r0, #16
 800d3fa:	f101 0408 	add.w	r4, r1, #8
 800d3fe:	463e      	mov	r6, r7
 800d400:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d404:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800d408:	ed55 7a04 	vldr	s15, [r5, #-16]
 800d40c:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800d410:	3510      	adds	r5, #16
 800d412:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d41a:	bfd4      	ite	le
 800d41c:	eef0 7a66 	vmovle.f32	s15, s13
 800d420:	eef0 7a46 	vmovgt.f32	s15, s12
 800d424:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d428:	3408      	adds	r4, #8
 800d42a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d42e:	ee17 3a90 	vmov	r3, s15
 800d432:	f303 030f 	ssat	r3, #16, r3
 800d436:	f824 3c10 	strh.w	r3, [r4, #-16]
 800d43a:	ed55 7a07 	vldr	s15, [r5, #-28]	; 0xffffffe4
 800d43e:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800d442:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d44a:	bfd4      	ite	le
 800d44c:	eef0 7a66 	vmovle.f32	s15, s13
 800d450:	eef0 7a46 	vmovgt.f32	s15, s12
 800d454:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d45c:	ee17 3a90 	vmov	r3, s15
 800d460:	f303 030f 	ssat	r3, #16, r3
 800d464:	f824 3c0e 	strh.w	r3, [r4, #-14]
 800d468:	ed55 7a06 	vldr	s15, [r5, #-24]	; 0xffffffe8
 800d46c:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800d470:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d478:	bfd4      	ite	le
 800d47a:	eef0 7a66 	vmovle.f32	s15, s13
 800d47e:	eef0 7a46 	vmovgt.f32	s15, s12
 800d482:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d48a:	ee17 3a90 	vmov	r3, s15
 800d48e:	f303 030f 	ssat	r3, #16, r3
 800d492:	f824 3c0c 	strh.w	r3, [r4, #-12]
 800d496:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800d49a:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800d49e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a6:	bfd4      	ite	le
 800d4a8:	eef0 7a66 	vmovle.f32	s15, s13
 800d4ac:	eef0 7a46 	vmovgt.f32	s15, s12
 800d4b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4b4:	3e01      	subs	r6, #1
 800d4b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d4ba:	ee17 3a90 	vmov	r3, s15
 800d4be:	f303 030f 	ssat	r3, #16, r3
 800d4c2:	f824 3c0a 	strh.w	r3, [r4, #-10]
 800d4c6:	d19f      	bne.n	800d408 <arm_float_to_q15+0x1c>
 800d4c8:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800d4cc:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800d4d0:	f012 0203 	ands.w	r2, r2, #3
 800d4d4:	d01e      	beq.n	800d514 <arm_float_to_q15+0x128>
 800d4d6:	eddf 5a10 	vldr	s11, [pc, #64]	; 800d518 <arm_float_to_q15+0x12c>
 800d4da:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d4de:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800d4e2:	ecf0 7a01 	vldmia	r0!, {s15}
 800d4e6:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800d4ea:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f2:	bfd4      	ite	le
 800d4f4:	eef0 7a66 	vmovle.f32	s15, s13
 800d4f8:	eef0 7a46 	vmovgt.f32	s15, s12
 800d4fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d500:	3a01      	subs	r2, #1
 800d502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d506:	ee17 3a90 	vmov	r3, s15
 800d50a:	f303 030f 	ssat	r3, #16, r3
 800d50e:	f821 3b02 	strh.w	r3, [r1], #2
 800d512:	d1e6      	bne.n	800d4e2 <arm_float_to_q15+0xf6>
 800d514:	bcf0      	pop	{r4, r5, r6, r7}
 800d516:	4770      	bx	lr
 800d518:	47000000 	.word	0x47000000

0800d51c <arm_max_q15>:
 800d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d520:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800d524:	b083      	sub	sp, #12
 800d526:	ea5f 0b98 	movs.w	fp, r8, lsr #2
 800d52a:	9301      	str	r3, [sp, #4]
 800d52c:	f100 0a02 	add.w	sl, r0, #2
 800d530:	8807      	ldrh	r7, [r0, #0]
 800d532:	d054      	beq.n	800d5de <arm_max_q15+0xc2>
 800d534:	300a      	adds	r0, #10
 800d536:	46d9      	mov	r9, fp
 800d538:	f04f 0c04 	mov.w	ip, #4
 800d53c:	2300      	movs	r3, #0
 800d53e:	463c      	mov	r4, r7
 800d540:	f930 7c08 	ldrsh.w	r7, [r0, #-8]
 800d544:	f930 ec06 	ldrsh.w	lr, [r0, #-6]
 800d548:	f930 6c02 	ldrsh.w	r6, [r0, #-2]
 800d54c:	b224      	sxth	r4, r4
 800d54e:	f1ac 0503 	sub.w	r5, ip, #3
 800d552:	42a7      	cmp	r7, r4
 800d554:	bfd8      	it	le
 800d556:	461d      	movle	r5, r3
 800d558:	42a7      	cmp	r7, r4
 800d55a:	bfb8      	it	lt
 800d55c:	4627      	movlt	r7, r4
 800d55e:	f1ac 0402 	sub.w	r4, ip, #2
 800d562:	4577      	cmp	r7, lr
 800d564:	bfa8      	it	ge
 800d566:	462c      	movge	r4, r5
 800d568:	f930 3c04 	ldrsh.w	r3, [r0, #-4]
 800d56c:	4577      	cmp	r7, lr
 800d56e:	bfb8      	it	lt
 800d570:	4677      	movlt	r7, lr
 800d572:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800d576:	429f      	cmp	r7, r3
 800d578:	bfa8      	it	ge
 800d57a:	4625      	movge	r5, r4
 800d57c:	429f      	cmp	r7, r3
 800d57e:	bfb8      	it	lt
 800d580:	461f      	movlt	r7, r3
 800d582:	42b7      	cmp	r7, r6
 800d584:	463c      	mov	r4, r7
 800d586:	bfb8      	it	lt
 800d588:	4634      	movlt	r4, r6
 800d58a:	42b7      	cmp	r7, r6
 800d58c:	bfac      	ite	ge
 800d58e:	462b      	movge	r3, r5
 800d590:	4663      	movlt	r3, ip
 800d592:	f1b9 0901 	subs.w	r9, r9, #1
 800d596:	b2a4      	uxth	r4, r4
 800d598:	f10c 0c04 	add.w	ip, ip, #4
 800d59c:	f100 0008 	add.w	r0, r0, #8
 800d5a0:	d1ce      	bne.n	800d540 <arm_max_q15+0x24>
 800d5a2:	4627      	mov	r7, r4
 800d5a4:	eb0a 0acb 	add.w	sl, sl, fp, lsl #3
 800d5a8:	f018 0803 	ands.w	r8, r8, #3
 800d5ac:	d019      	beq.n	800d5e2 <arm_max_q15+0xc6>
 800d5ae:	ebc8 0801 	rsb	r8, r8, r1
 800d5b2:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 800d5b6:	b23f      	sxth	r7, r7
 800d5b8:	42a7      	cmp	r7, r4
 800d5ba:	4638      	mov	r0, r7
 800d5bc:	bfb8      	it	lt
 800d5be:	4620      	movlt	r0, r4
 800d5c0:	42bc      	cmp	r4, r7
 800d5c2:	bfc8      	it	gt
 800d5c4:	4643      	movgt	r3, r8
 800d5c6:	f108 0801 	add.w	r8, r8, #1
 800d5ca:	b280      	uxth	r0, r0
 800d5cc:	4588      	cmp	r8, r1
 800d5ce:	b287      	uxth	r7, r0
 800d5d0:	d1ef      	bne.n	800d5b2 <arm_max_q15+0x96>
 800d5d2:	8010      	strh	r0, [r2, #0]
 800d5d4:	9a01      	ldr	r2, [sp, #4]
 800d5d6:	6013      	str	r3, [r2, #0]
 800d5d8:	b003      	add	sp, #12
 800d5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5de:	465b      	mov	r3, fp
 800d5e0:	e7e2      	b.n	800d5a8 <arm_max_q15+0x8c>
 800d5e2:	4638      	mov	r0, r7
 800d5e4:	e7f5      	b.n	800d5d2 <arm_max_q15+0xb6>
 800d5e6:	bf00      	nop

0800d5e8 <arm_split_rfft_q15>:
 800d5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ec:	b083      	sub	sp, #12
 800d5ee:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
 800d5f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d5f4:	9001      	str	r0, [sp, #4]
 800d5f6:	3c01      	subs	r4, #1
 800d5f8:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800d5fc:	00a0      	lsls	r0, r4, #2
 800d5fe:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 800d602:	3901      	subs	r1, #1
 800d604:	9000      	str	r0, [sp, #0]
 800d606:	4452      	add	r2, sl
 800d608:	4453      	add	r3, sl
 800d60a:	d02f      	beq.n	800d66c <arm_split_rfft_q15+0x84>
 800d60c:	f100 0904 	add.w	r9, r0, #4
 800d610:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d612:	9c01      	ldr	r4, [sp, #4]
 800d614:	f1ae 0e08 	sub.w	lr, lr, #8
 800d618:	4486      	add	lr, r0
 800d61a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d61c:	44a1      	add	r9, r4
 800d61e:	f100 0808 	add.w	r8, r0, #8
 800d622:	46a3      	mov	fp, r4
 800d624:	f04f 0c00 	mov.w	ip, #0
 800d628:	f85b 4f04 	ldr.w	r4, [fp, #4]!
 800d62c:	f852 000c 	ldr.w	r0, [r2, ip]
 800d630:	fb44 f500 	smusd	r5, r4, r0
 800d634:	f859 6d04 	ldr.w	r6, [r9, #-4]!
 800d638:	f853 700c 	ldr.w	r7, [r3, ip]
 800d63c:	fb26 5507 	smlad	r5, r6, r7, r5
 800d640:	fb46 f617 	smusdx	r6, r6, r7
 800d644:	fb24 6010 	smladx	r0, r4, r0, r6
 800d648:	1400      	asrs	r0, r0, #16
 800d64a:	0c2c      	lsrs	r4, r5, #16
 800d64c:	4246      	negs	r6, r0
 800d64e:	3901      	subs	r1, #1
 800d650:	f828 0c02 	strh.w	r0, [r8, #-2]
 800d654:	f828 4c04 	strh.w	r4, [r8, #-4]
 800d658:	44d4      	add	ip, sl
 800d65a:	f8ae 6006 	strh.w	r6, [lr, #6]
 800d65e:	f8ae 4004 	strh.w	r4, [lr, #4]
 800d662:	f108 0804 	add.w	r8, r8, #4
 800d666:	f1ae 0e04 	sub.w	lr, lr, #4
 800d66a:	d1dd      	bne.n	800d628 <arm_split_rfft_q15+0x40>
 800d66c:	9801      	ldr	r0, [sp, #4]
 800d66e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d670:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d674:	f9b0 3000 	ldrsh.w	r3, [r0]
 800d678:	9900      	ldr	r1, [sp, #0]
 800d67a:	1a9b      	subs	r3, r3, r2
 800d67c:	4421      	add	r1, r4
 800d67e:	2200      	movs	r2, #0
 800d680:	105b      	asrs	r3, r3, #1
 800d682:	808b      	strh	r3, [r1, #4]
 800d684:	80ca      	strh	r2, [r1, #6]
 800d686:	f9b0 1000 	ldrsh.w	r1, [r0]
 800d68a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800d68e:	8062      	strh	r2, [r4, #2]
 800d690:	440b      	add	r3, r1
 800d692:	105b      	asrs	r3, r3, #1
 800d694:	8023      	strh	r3, [r4, #0]
 800d696:	b003      	add	sp, #12
 800d698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d69c <arm_rfft_q15>:
 800d69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a0:	4617      	mov	r7, r2
 800d6a2:	7902      	ldrb	r2, [r0, #4]
 800d6a4:	6805      	ldr	r5, [r0, #0]
 800d6a6:	6943      	ldr	r3, [r0, #20]
 800d6a8:	b085      	sub	sp, #20
 800d6aa:	2a01      	cmp	r2, #1
 800d6ac:	4606      	mov	r6, r0
 800d6ae:	9303      	str	r3, [sp, #12]
 800d6b0:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800d6b4:	4688      	mov	r8, r1
 800d6b6:	d00f      	beq.n	800d6d8 <arm_rfft_q15+0x3c>
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	7973      	ldrb	r3, [r6, #5]
 800d6bc:	f000 fda2 	bl	800e204 <arm_cfft_q15>
 800d6c0:	68b4      	ldr	r4, [r6, #8]
 800d6c2:	68f2      	ldr	r2, [r6, #12]
 800d6c4:	6933      	ldr	r3, [r6, #16]
 800d6c6:	9700      	str	r7, [sp, #0]
 800d6c8:	4640      	mov	r0, r8
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	9401      	str	r4, [sp, #4]
 800d6ce:	f7ff ff8b 	bl	800d5e8 <arm_split_rfft_q15>
 800d6d2:	b005      	add	sp, #20
 800d6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d8:	f100 0308 	add.w	r3, r0, #8
 800d6dc:	e893 5008 	ldmia.w	r3, {r3, ip, lr}
 800d6e0:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800d6e4:	b31d      	cbz	r5, 800d72e <arm_rfft_q15+0x92>
 800d6e6:	f109 0904 	add.w	r9, r9, #4
 800d6ea:	4489      	add	r9, r1
 800d6ec:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800d6f0:	46bb      	mov	fp, r7
 800d6f2:	f859 1d04 	ldr.w	r1, [r9, #-4]!
 800d6f6:	f8de 4000 	ldr.w	r4, [lr]
 800d6fa:	fb41 f304 	smusd	r3, r1, r4
 800d6fe:	f858 0b04 	ldr.w	r0, [r8], #4
 800d702:	f8dc 2000 	ldr.w	r2, [ip]
 800d706:	fb20 3302 	smlad	r3, r0, r2, r3
 800d70a:	fb21 f114 	smuadx	r1, r1, r4
 800d70e:	4249      	negs	r1, r1
 800d710:	fb42 1210 	smlsdx	r2, r2, r0, r1
 800d714:	3d01      	subs	r5, #1
 800d716:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d71a:	ea4f 4222 	mov.w	r2, r2, asr #16
 800d71e:	44d6      	add	lr, sl
 800d720:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 800d724:	44d4      	add	ip, sl
 800d726:	f84b 2b04 	str.w	r2, [fp], #4
 800d72a:	d1e2      	bne.n	800d6f2 <arm_rfft_q15+0x56>
 800d72c:	7932      	ldrb	r2, [r6, #4]
 800d72e:	7973      	ldrb	r3, [r6, #5]
 800d730:	9803      	ldr	r0, [sp, #12]
 800d732:	4639      	mov	r1, r7
 800d734:	f000 fd66 	bl	800e204 <arm_cfft_q15>
 800d738:	6833      	ldr	r3, [r6, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d0c9      	beq.n	800d6d2 <arm_rfft_q15+0x36>
 800d73e:	3f02      	subs	r7, #2
 800d740:	2200      	movs	r2, #0
 800d742:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 800d746:	005b      	lsls	r3, r3, #1
 800d748:	803b      	strh	r3, [r7, #0]
 800d74a:	6833      	ldr	r3, [r6, #0]
 800d74c:	3201      	adds	r2, #1
 800d74e:	4293      	cmp	r3, r2
 800d750:	d8f7      	bhi.n	800d742 <arm_rfft_q15+0xa6>
 800d752:	b005      	add	sp, #20
 800d754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d758 <arm_rfft_init_q15>:
 800d758:	b289      	uxth	r1, r1
 800d75a:	b430      	push	{r4, r5}
 800d75c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d760:	4d36      	ldr	r5, [pc, #216]	; (800d83c <arm_rfft_init_q15+0xe4>)
 800d762:	4c37      	ldr	r4, [pc, #220]	; (800d840 <arm_rfft_init_q15+0xe8>)
 800d764:	7102      	strb	r2, [r0, #4]
 800d766:	7143      	strb	r3, [r0, #5]
 800d768:	6001      	str	r1, [r0, #0]
 800d76a:	60c5      	str	r5, [r0, #12]
 800d76c:	6104      	str	r4, [r0, #16]
 800d76e:	d050      	beq.n	800d812 <arm_rfft_init_q15+0xba>
 800d770:	d911      	bls.n	800d796 <arm_rfft_init_q15+0x3e>
 800d772:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800d776:	d054      	beq.n	800d822 <arm_rfft_init_q15+0xca>
 800d778:	d938      	bls.n	800d7ec <arm_rfft_init_q15+0x94>
 800d77a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800d77e:	d022      	beq.n	800d7c6 <arm_rfft_init_q15+0x6e>
 800d780:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800d784:	d155      	bne.n	800d832 <arm_rfft_init_q15+0xda>
 800d786:	2201      	movs	r2, #1
 800d788:	4b2e      	ldr	r3, [pc, #184]	; (800d844 <arm_rfft_init_q15+0xec>)
 800d78a:	6082      	str	r2, [r0, #8]
 800d78c:	6143      	str	r3, [r0, #20]
 800d78e:	2000      	movs	r0, #0
 800d790:	b240      	sxtb	r0, r0
 800d792:	bc30      	pop	{r4, r5}
 800d794:	4770      	bx	lr
 800d796:	2940      	cmp	r1, #64	; 0x40
 800d798:	d033      	beq.n	800d802 <arm_rfft_init_q15+0xaa>
 800d79a:	d91c      	bls.n	800d7d6 <arm_rfft_init_q15+0x7e>
 800d79c:	2980      	cmp	r1, #128	; 0x80
 800d79e:	d00a      	beq.n	800d7b6 <arm_rfft_init_q15+0x5e>
 800d7a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d7a4:	d145      	bne.n	800d832 <arm_rfft_init_q15+0xda>
 800d7a6:	2220      	movs	r2, #32
 800d7a8:	4b27      	ldr	r3, [pc, #156]	; (800d848 <arm_rfft_init_q15+0xf0>)
 800d7aa:	6082      	str	r2, [r0, #8]
 800d7ac:	6143      	str	r3, [r0, #20]
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	b240      	sxtb	r0, r0
 800d7b2:	bc30      	pop	{r4, r5}
 800d7b4:	4770      	bx	lr
 800d7b6:	2240      	movs	r2, #64	; 0x40
 800d7b8:	4b24      	ldr	r3, [pc, #144]	; (800d84c <arm_rfft_init_q15+0xf4>)
 800d7ba:	6082      	str	r2, [r0, #8]
 800d7bc:	6143      	str	r3, [r0, #20]
 800d7be:	2000      	movs	r0, #0
 800d7c0:	b240      	sxtb	r0, r0
 800d7c2:	bc30      	pop	{r4, r5}
 800d7c4:	4770      	bx	lr
 800d7c6:	2202      	movs	r2, #2
 800d7c8:	4b21      	ldr	r3, [pc, #132]	; (800d850 <arm_rfft_init_q15+0xf8>)
 800d7ca:	6082      	str	r2, [r0, #8]
 800d7cc:	6143      	str	r3, [r0, #20]
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	b240      	sxtb	r0, r0
 800d7d2:	bc30      	pop	{r4, r5}
 800d7d4:	4770      	bx	lr
 800d7d6:	2920      	cmp	r1, #32
 800d7d8:	d12b      	bne.n	800d832 <arm_rfft_init_q15+0xda>
 800d7da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7de:	4b1d      	ldr	r3, [pc, #116]	; (800d854 <arm_rfft_init_q15+0xfc>)
 800d7e0:	6082      	str	r2, [r0, #8]
 800d7e2:	6143      	str	r3, [r0, #20]
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	b240      	sxtb	r0, r0
 800d7e8:	bc30      	pop	{r4, r5}
 800d7ea:	4770      	bx	lr
 800d7ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d7f0:	d11f      	bne.n	800d832 <arm_rfft_init_q15+0xda>
 800d7f2:	2208      	movs	r2, #8
 800d7f4:	4b18      	ldr	r3, [pc, #96]	; (800d858 <arm_rfft_init_q15+0x100>)
 800d7f6:	6082      	str	r2, [r0, #8]
 800d7f8:	6143      	str	r3, [r0, #20]
 800d7fa:	2000      	movs	r0, #0
 800d7fc:	b240      	sxtb	r0, r0
 800d7fe:	bc30      	pop	{r4, r5}
 800d800:	4770      	bx	lr
 800d802:	2280      	movs	r2, #128	; 0x80
 800d804:	4b15      	ldr	r3, [pc, #84]	; (800d85c <arm_rfft_init_q15+0x104>)
 800d806:	6082      	str	r2, [r0, #8]
 800d808:	6143      	str	r3, [r0, #20]
 800d80a:	2000      	movs	r0, #0
 800d80c:	b240      	sxtb	r0, r0
 800d80e:	bc30      	pop	{r4, r5}
 800d810:	4770      	bx	lr
 800d812:	2210      	movs	r2, #16
 800d814:	4b12      	ldr	r3, [pc, #72]	; (800d860 <arm_rfft_init_q15+0x108>)
 800d816:	6082      	str	r2, [r0, #8]
 800d818:	6143      	str	r3, [r0, #20]
 800d81a:	2000      	movs	r0, #0
 800d81c:	b240      	sxtb	r0, r0
 800d81e:	bc30      	pop	{r4, r5}
 800d820:	4770      	bx	lr
 800d822:	2204      	movs	r2, #4
 800d824:	4b0f      	ldr	r3, [pc, #60]	; (800d864 <arm_rfft_init_q15+0x10c>)
 800d826:	6082      	str	r2, [r0, #8]
 800d828:	6143      	str	r3, [r0, #20]
 800d82a:	2000      	movs	r0, #0
 800d82c:	b240      	sxtb	r0, r0
 800d82e:	bc30      	pop	{r4, r5}
 800d830:	4770      	bx	lr
 800d832:	20ff      	movs	r0, #255	; 0xff
 800d834:	b240      	sxtb	r0, r0
 800d836:	bc30      	pop	{r4, r5}
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	0800f814 	.word	0x0800f814
 800d840:	08013814 	.word	0x08013814
 800d844:	08017844 	.word	0x08017844
 800d848:	08017884 	.word	0x08017884
 800d84c:	08017864 	.word	0x08017864
 800d850:	08017894 	.word	0x08017894
 800d854:	08017824 	.word	0x08017824
 800d858:	08017854 	.word	0x08017854
 800d85c:	08017834 	.word	0x08017834
 800d860:	08017874 	.word	0x08017874
 800d864:	08017814 	.word	0x08017814

0800d868 <arm_fir_q15>:
 800d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86c:	4605      	mov	r5, r0
 800d86e:	b095      	sub	sp, #84	; 0x54
 800d870:	686c      	ldr	r4, [r5, #4]
 800d872:	9012      	str	r0, [sp, #72]	; 0x48
 800d874:	8800      	ldrh	r0, [r0, #0]
 800d876:	940c      	str	r4, [sp, #48]	; 0x30
 800d878:	4626      	mov	r6, r4
 800d87a:	f100 4c00 	add.w	ip, r0, #2147483648	; 0x80000000
 800d87e:	68ac      	ldr	r4, [r5, #8]
 800d880:	9313      	str	r3, [sp, #76]	; 0x4c
 800d882:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800d886:	461f      	mov	r7, r3
 800d888:	9408      	str	r4, [sp, #32]
 800d88a:	4623      	mov	r3, r4
 800d88c:	eb06 044c 	add.w	r4, r6, ip, lsl #1
 800d890:	4625      	mov	r5, r4
 800d892:	940d      	str	r4, [sp, #52]	; 0x34
 800d894:	08bc      	lsrs	r4, r7, #2
 800d896:	9010      	str	r0, [sp, #64]	; 0x40
 800d898:	910e      	str	r1, [sp, #56]	; 0x38
 800d89a:	920f      	str	r2, [sp, #60]	; 0x3c
 800d89c:	4627      	mov	r7, r4
 800d89e:	9411      	str	r4, [sp, #68]	; 0x44
 800d8a0:	f000 80c0 	beq.w	800da24 <arm_fir_q15+0x1bc>
 800d8a4:	4604      	mov	r4, r0
 800d8a6:	0880      	lsrs	r0, r0, #2
 800d8a8:	9007      	str	r0, [sp, #28]
 800d8aa:	00c0      	lsls	r0, r0, #3
 800d8ac:	4403      	add	r3, r0
 800d8ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d8b0:	f004 0303 	and.w	r3, r4, #3
 800d8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d8b6:	f105 0308 	add.w	r3, r5, #8
 800d8ba:	9301      	str	r3, [sp, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	3308      	adds	r3, #8
 800d8c0:	9302      	str	r3, [sp, #8]
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	9305      	str	r3, [sp, #20]
 800d8c8:	f106 0308 	add.w	r3, r6, #8
 800d8cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800d8ce:	9303      	str	r3, [sp, #12]
 800d8d0:	9704      	str	r7, [sp, #16]
 800d8d2:	9a02      	ldr	r2, [sp, #8]
 800d8d4:	9c01      	ldr	r4, [sp, #4]
 800d8d6:	f832 3c08 	ldrh.w	r3, [r2, #-8]
 800d8da:	f824 3c08 	strh.w	r3, [r4, #-8]
 800d8de:	f832 3c06 	ldrh.w	r3, [r2, #-6]
 800d8e2:	f824 3c06 	strh.w	r3, [r4, #-6]
 800d8e6:	4611      	mov	r1, r2
 800d8e8:	9d07      	ldr	r5, [sp, #28]
 800d8ea:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 800d8ee:	f824 3c04 	strh.w	r3, [r4, #-4]
 800d8f2:	9a03      	ldr	r2, [sp, #12]
 800d8f4:	f831 3c02 	ldrh.w	r3, [r1, #-2]
 800d8f8:	f824 3c02 	strh.w	r3, [r4, #-2]
 800d8fc:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800d900:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d904:	4613      	mov	r3, r2
 800d906:	4611      	mov	r1, r2
 800d908:	2d00      	cmp	r5, #0
 800d90a:	f000 810e 	beq.w	800db2a <arm_fir_q15+0x2c2>
 800d90e:	3308      	adds	r3, #8
 800d910:	461a      	mov	r2, r3
 800d912:	9306      	str	r3, [sp, #24]
 800d914:	9908      	ldr	r1, [sp, #32]
 800d916:	9500      	str	r5, [sp, #0]
 800d918:	2300      	movs	r3, #0
 800d91a:	469c      	mov	ip, r3
 800d91c:	4693      	mov	fp, r2
 800d91e:	461e      	mov	r6, r3
 800d920:	469e      	mov	lr, r3
 800d922:	461a      	mov	r2, r3
 800d924:	461f      	mov	r7, r3
 800d926:	4698      	mov	r8, r3
 800d928:	f101 0a08 	add.w	sl, r1, #8
 800d92c:	4665      	mov	r5, ip
 800d92e:	f85a 1c08 	ldr.w	r1, [sl, #-8]
 800d932:	fbc0 85c1 	smlald	r8, r5, r0, r1
 800d936:	fbc4 cec1 	smlald	ip, lr, r4, r1
 800d93a:	eac4 0900 	pkhbt	r9, r4, r0
 800d93e:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 800d942:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 800d946:	eac0 0904 	pkhbt	r9, r0, r4
 800d94a:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 800d94e:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 800d952:	fbc4 85c1 	smlald	r8, r5, r4, r1
 800d956:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 800d95a:	fbc0 cec1 	smlald	ip, lr, r0, r1
 800d95e:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 800d962:	eac4 0900 	pkhbt	r9, r4, r0
 800d966:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 800d96a:	9900      	ldr	r1, [sp, #0]
 800d96c:	3901      	subs	r1, #1
 800d96e:	f10a 0a08 	add.w	sl, sl, #8
 800d972:	f10b 0b08 	add.w	fp, fp, #8
 800d976:	9100      	str	r1, [sp, #0]
 800d978:	d1d9      	bne.n	800d92e <arm_fir_q15+0xc6>
 800d97a:	46c1      	mov	r9, r8
 800d97c:	9903      	ldr	r1, [sp, #12]
 800d97e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d982:	46a8      	mov	r8, r5
 800d984:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d986:	4429      	add	r1, r5
 800d988:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d98a:	b175      	cbz	r5, 800d9aa <arm_fir_q15+0x142>
 800d98c:	f8da 5000 	ldr.w	r5, [sl]
 800d990:	fbc0 98c5 	smlald	r9, r8, r0, r5
 800d994:	fbc4 cec5 	smlald	ip, lr, r4, r5
 800d998:	eac4 0000 	pkhbt	r0, r4, r0
 800d99c:	6809      	ldr	r1, [r1, #0]
 800d99e:	fbc0 27d5 	smlaldx	r2, r7, r0, r5
 800d9a2:	eac1 0404 	pkhbt	r4, r1, r4
 800d9a6:	fbc4 36d5 	smlaldx	r3, r6, r4, r5
 800d9aa:	9805      	ldr	r0, [sp, #20]
 800d9ac:	ea4f 39d9 	mov.w	r9, r9, lsr #15
 800d9b0:	0bd2      	lsrs	r2, r2, #15
 800d9b2:	ea49 4948 	orr.w	r9, r9, r8, lsl #17
 800d9b6:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
 800d9ba:	f309 090f 	ssat	r9, #16, r9
 800d9be:	f302 020f 	ssat	r2, #16, r2
 800d9c2:	eac9 4202 	pkhbt	r2, r9, r2, lsl #16
 800d9c6:	f840 2c08 	str.w	r2, [r0, #-8]
 800d9ca:	9a01      	ldr	r2, [sp, #4]
 800d9cc:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
 800d9d0:	3208      	adds	r2, #8
 800d9d2:	0bdb      	lsrs	r3, r3, #15
 800d9d4:	ea4c 4c4e 	orr.w	ip, ip, lr, lsl #17
 800d9d8:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800d9dc:	f30c 0c0f 	ssat	ip, #16, ip
 800d9e0:	9201      	str	r2, [sp, #4]
 800d9e2:	f303 030f 	ssat	r3, #16, r3
 800d9e6:	9a02      	ldr	r2, [sp, #8]
 800d9e8:	eacc 4303 	pkhbt	r3, ip, r3, lsl #16
 800d9ec:	f840 3c04 	str.w	r3, [r0, #-4]
 800d9f0:	f100 0308 	add.w	r3, r0, #8
 800d9f4:	9305      	str	r3, [sp, #20]
 800d9f6:	9b04      	ldr	r3, [sp, #16]
 800d9f8:	3208      	adds	r2, #8
 800d9fa:	9202      	str	r2, [sp, #8]
 800d9fc:	3b01      	subs	r3, #1
 800d9fe:	9a06      	ldr	r2, [sp, #24]
 800da00:	9203      	str	r2, [sp, #12]
 800da02:	9304      	str	r3, [sp, #16]
 800da04:	f47f af65 	bne.w	800d8d2 <arm_fir_q15+0x6a>
 800da08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da0c:	00db      	lsls	r3, r3, #3
 800da0e:	441a      	add	r2, r3
 800da10:	920d      	str	r2, [sp, #52]	; 0x34
 800da12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da14:	441a      	add	r2, r3
 800da16:	920e      	str	r2, [sp, #56]	; 0x38
 800da18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da1a:	441a      	add	r2, r3
 800da1c:	920f      	str	r2, [sp, #60]	; 0x3c
 800da1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da20:	441a      	add	r2, r3
 800da22:	920c      	str	r2, [sp, #48]	; 0x30
 800da24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da26:	f013 0303 	ands.w	r3, r3, #3
 800da2a:	9302      	str	r3, [sp, #8]
 800da2c:	d03f      	beq.n	800daae <arm_fir_q15+0x246>
 800da2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da30:	f1a2 0c02 	sub.w	ip, r2, #2
 800da34:	9a08      	ldr	r2, [sp, #32]
 800da36:	f102 0904 	add.w	r9, r2, #4
 800da3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800da3c:	f8cd 9004 	str.w	r9, [sp, #4]
 800da40:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800da44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da46:	f8cd 8000 	str.w	r8, [sp]
 800da4a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800da4e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800da52:	f102 0e04 	add.w	lr, r2, #4
 800da56:	461f      	mov	r7, r3
 800da58:	f838 3b02 	ldrh.w	r3, [r8], #2
 800da5c:	9a01      	ldr	r2, [sp, #4]
 800da5e:	9900      	ldr	r1, [sp, #0]
 800da60:	f82c 3f02 	strh.w	r3, [ip, #2]!
 800da64:	2400      	movs	r4, #0
 800da66:	4673      	mov	r3, lr
 800da68:	2500      	movs	r5, #0
 800da6a:	f833 bc04 	ldrh.w	fp, [r3, #-4]
 800da6e:	f832 ac04 	ldrh.w	sl, [r2, #-4]
 800da72:	f833 6c02 	ldrh.w	r6, [r3, #-2]
 800da76:	f832 0c02 	ldrh.w	r0, [r2, #-2]
 800da7a:	fbcb 458a 	smlalbb	r4, r5, fp, sl
 800da7e:	3901      	subs	r1, #1
 800da80:	f103 0304 	add.w	r3, r3, #4
 800da84:	fbc6 4580 	smlalbb	r4, r5, r6, r0
 800da88:	f102 0204 	add.w	r2, r2, #4
 800da8c:	d1ed      	bne.n	800da6a <arm_fir_q15+0x202>
 800da8e:	0be3      	lsrs	r3, r4, #15
 800da90:	3f01      	subs	r7, #1
 800da92:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
 800da96:	f10e 0e02 	add.w	lr, lr, #2
 800da9a:	f303 030f 	ssat	r3, #16, r3
 800da9e:	f829 3b02 	strh.w	r3, [r9], #2
 800daa2:	d1d9      	bne.n	800da58 <arm_fir_q15+0x1f0>
 800daa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800daa6:	9a02      	ldr	r2, [sp, #8]
 800daa8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800daac:	930c      	str	r3, [sp, #48]	; 0x30
 800daae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dab0:	1e5f      	subs	r7, r3, #1
 800dab2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dab4:	08bd      	lsrs	r5, r7, #2
 800dab6:	685e      	ldr	r6, [r3, #4]
 800dab8:	d029      	beq.n	800db0e <arm_fir_q15+0x2a6>
 800daba:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dabc:	4603      	mov	r3, r0
 800dabe:	3310      	adds	r3, #16
 800dac0:	f106 0210 	add.w	r2, r6, #16
 800dac4:	4290      	cmp	r0, r2
 800dac6:	bf38      	it	cc
 800dac8:	429e      	cmpcc	r6, r3
 800daca:	bf2c      	ite	cs
 800dacc:	2301      	movcs	r3, #1
 800dace:	2300      	movcc	r3, #0
 800dad0:	2d06      	cmp	r5, #6
 800dad2:	bf94      	ite	ls
 800dad4:	2300      	movls	r3, #0
 800dad6:	f003 0301 	andhi.w	r3, r3, #1
 800dada:	b3a3      	cbz	r3, 800db46 <arm_fir_q15+0x2de>
 800dadc:	4603      	mov	r3, r0
 800dade:	4333      	orrs	r3, r6
 800dae0:	079b      	lsls	r3, r3, #30
 800dae2:	d130      	bne.n	800db46 <arm_fir_q15+0x2de>
 800dae4:	f100 0208 	add.w	r2, r0, #8
 800dae8:	f106 0308 	add.w	r3, r6, #8
 800daec:	2100      	movs	r1, #0
 800daee:	e912 0011 	ldmdb	r2, {r0, r4}
 800daf2:	3101      	adds	r1, #1
 800daf4:	42a9      	cmp	r1, r5
 800daf6:	e903 0011 	stmdb	r3, {r0, r4}
 800dafa:	f102 0208 	add.w	r2, r2, #8
 800dafe:	f103 0308 	add.w	r3, r3, #8
 800db02:	d1f4      	bne.n	800daee <arm_fir_q15+0x286>
 800db04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db06:	00ed      	lsls	r5, r5, #3
 800db08:	442b      	add	r3, r5
 800db0a:	442e      	add	r6, r5
 800db0c:	930c      	str	r3, [sp, #48]	; 0x30
 800db0e:	f017 0303 	ands.w	r3, r7, #3
 800db12:	d007      	beq.n	800db24 <arm_fir_q15+0x2bc>
 800db14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db16:	3e02      	subs	r6, #2
 800db18:	f832 1b02 	ldrh.w	r1, [r2], #2
 800db1c:	f826 1f02 	strh.w	r1, [r6, #2]!
 800db20:	3b01      	subs	r3, #1
 800db22:	d1f9      	bne.n	800db18 <arm_fir_q15+0x2b0>
 800db24:	b015      	add	sp, #84	; 0x54
 800db26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db2a:	46a8      	mov	r8, r5
 800db2c:	462b      	mov	r3, r5
 800db2e:	462e      	mov	r6, r5
 800db30:	46ac      	mov	ip, r5
 800db32:	46ae      	mov	lr, r5
 800db34:	462a      	mov	r2, r5
 800db36:	462f      	mov	r7, r5
 800db38:	46a9      	mov	r9, r5
 800db3a:	f101 0508 	add.w	r5, r1, #8
 800db3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800db42:	9506      	str	r5, [sp, #24]
 800db44:	e720      	b.n	800d988 <arm_fir_q15+0x120>
 800db46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db48:	f106 0208 	add.w	r2, r6, #8
 800db4c:	3308      	adds	r3, #8
 800db4e:	4629      	mov	r1, r5
 800db50:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800db54:	f822 0c08 	strh.w	r0, [r2, #-8]
 800db58:	f833 0c06 	ldrh.w	r0, [r3, #-6]
 800db5c:	f822 0c06 	strh.w	r0, [r2, #-6]
 800db60:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800db64:	f822 0c04 	strh.w	r0, [r2, #-4]
 800db68:	f833 0c02 	ldrh.w	r0, [r3, #-2]
 800db6c:	f822 0c02 	strh.w	r0, [r2, #-2]
 800db70:	3901      	subs	r1, #1
 800db72:	f103 0308 	add.w	r3, r3, #8
 800db76:	f102 0208 	add.w	r2, r2, #8
 800db7a:	d1e9      	bne.n	800db50 <arm_fir_q15+0x2e8>
 800db7c:	e7c2      	b.n	800db04 <arm_fir_q15+0x29c>
 800db7e:	bf00      	nop

0800db80 <arm_fir_init_q15>:
 800db80:	b570      	push	{r4, r5, r6, lr}
 800db82:	f011 0401 	ands.w	r4, r1, #1
 800db86:	d10f      	bne.n	800dba8 <arm_fir_init_q15+0x28>
 800db88:	461e      	mov	r6, r3
 800db8a:	9b04      	ldr	r3, [sp, #16]
 800db8c:	4605      	mov	r5, r0
 800db8e:	4610      	mov	r0, r2
 800db90:	18ca      	adds	r2, r1, r3
 800db92:	8029      	strh	r1, [r5, #0]
 800db94:	60a8      	str	r0, [r5, #8]
 800db96:	0052      	lsls	r2, r2, #1
 800db98:	4630      	mov	r0, r6
 800db9a:	4621      	mov	r1, r4
 800db9c:	f000 fe26 	bl	800e7ec <memset>
 800dba0:	606e      	str	r6, [r5, #4]
 800dba2:	4620      	mov	r0, r4
 800dba4:	b240      	sxtb	r0, r0
 800dba6:	bd70      	pop	{r4, r5, r6, pc}
 800dba8:	20ff      	movs	r0, #255	; 0xff
 800dbaa:	e7fb      	b.n	800dba4 <arm_fir_init_q15+0x24>

0800dbac <arm_fir_fast_q15>:
 800dbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb0:	4605      	mov	r5, r0
 800dbb2:	b091      	sub	sp, #68	; 0x44
 800dbb4:	686c      	ldr	r4, [r5, #4]
 800dbb6:	900e      	str	r0, [sp, #56]	; 0x38
 800dbb8:	8800      	ldrh	r0, [r0, #0]
 800dbba:	9408      	str	r4, [sp, #32]
 800dbbc:	4626      	mov	r6, r4
 800dbbe:	f100 4800 	add.w	r8, r0, #2147483648	; 0x80000000
 800dbc2:	68ac      	ldr	r4, [r5, #8]
 800dbc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbc6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800dbca:	461f      	mov	r7, r3
 800dbcc:	9404      	str	r4, [sp, #16]
 800dbce:	4623      	mov	r3, r4
 800dbd0:	eb06 0448 	add.w	r4, r6, r8, lsl #1
 800dbd4:	4625      	mov	r5, r4
 800dbd6:	9409      	str	r4, [sp, #36]	; 0x24
 800dbd8:	08bc      	lsrs	r4, r7, #2
 800dbda:	900c      	str	r0, [sp, #48]	; 0x30
 800dbdc:	910a      	str	r1, [sp, #40]	; 0x28
 800dbde:	920b      	str	r2, [sp, #44]	; 0x2c
 800dbe0:	4627      	mov	r7, r4
 800dbe2:	940d      	str	r4, [sp, #52]	; 0x34
 800dbe4:	f000 80a3 	beq.w	800dd2e <arm_fir_fast_q15+0x182>
 800dbe8:	4604      	mov	r4, r0
 800dbea:	0880      	lsrs	r0, r0, #2
 800dbec:	9003      	str	r0, [sp, #12]
 800dbee:	00c0      	lsls	r0, r0, #3
 800dbf0:	4403      	add	r3, r0
 800dbf2:	9306      	str	r3, [sp, #24]
 800dbf4:	f004 0303 	and.w	r3, r4, #3
 800dbf8:	9305      	str	r3, [sp, #20]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	3308      	adds	r3, #8
 800dbfe:	9007      	str	r0, [sp, #28]
 800dc00:	f105 0908 	add.w	r9, r5, #8
 800dc04:	f101 0b08 	add.w	fp, r1, #8
 800dc08:	9301      	str	r3, [sp, #4]
 800dc0a:	f106 0a08 	add.w	sl, r6, #8
 800dc0e:	9700      	str	r7, [sp, #0]
 800dc10:	f83b 3c08 	ldrh.w	r3, [fp, #-8]
 800dc14:	f829 3c08 	strh.w	r3, [r9, #-8]
 800dc18:	f83b 3c06 	ldrh.w	r3, [fp, #-6]
 800dc1c:	f829 3c06 	strh.w	r3, [r9, #-6]
 800dc20:	f83b 3c04 	ldrh.w	r3, [fp, #-4]
 800dc24:	f829 3c04 	strh.w	r3, [r9, #-4]
 800dc28:	f83b 3c02 	ldrh.w	r3, [fp, #-2]
 800dc2c:	9803      	ldr	r0, [sp, #12]
 800dc2e:	f829 3c02 	strh.w	r3, [r9, #-2]
 800dc32:	e91a 0030 	ldmdb	sl, {r4, r5}
 800dc36:	4652      	mov	r2, sl
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	f000 80f8 	beq.w	800de2e <arm_fir_fast_q15+0x282>
 800dc3e:	f10a 0308 	add.w	r3, sl, #8
 800dc42:	461a      	mov	r2, r3
 800dc44:	4694      	mov	ip, r2
 800dc46:	9a04      	ldr	r2, [sp, #16]
 800dc48:	9302      	str	r3, [sp, #8]
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	461e      	mov	r6, r3
 800dc4e:	4619      	mov	r1, r3
 800dc50:	461f      	mov	r7, r3
 800dc52:	f102 0e08 	add.w	lr, r2, #8
 800dc56:	4680      	mov	r8, r0
 800dc58:	f85e 2c08 	ldr.w	r2, [lr, #-8]
 800dc5c:	fb24 7702 	smlad	r7, r4, r2, r7
 800dc60:	fb25 6602 	smlad	r6, r5, r2, r6
 800dc64:	eac5 0004 	pkhbt	r0, r5, r4
 800dc68:	f85c 4c08 	ldr.w	r4, [ip, #-8]
 800dc6c:	fb20 1112 	smladx	r1, r0, r2, r1
 800dc70:	eac4 0005 	pkhbt	r0, r4, r5
 800dc74:	fb20 3212 	smladx	r2, r0, r2, r3
 800dc78:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 800dc7c:	fb25 7703 	smlad	r7, r5, r3, r7
 800dc80:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 800dc84:	fb24 6603 	smlad	r6, r4, r3, r6
 800dc88:	fb20 1113 	smladx	r1, r0, r3, r1
 800dc8c:	eac5 0004 	pkhbt	r0, r5, r4
 800dc90:	fb20 2313 	smladx	r3, r0, r3, r2
 800dc94:	f1b8 0801 	subs.w	r8, r8, #1
 800dc98:	f10e 0e08 	add.w	lr, lr, #8
 800dc9c:	f10c 0c08 	add.w	ip, ip, #8
 800dca0:	d1da      	bne.n	800dc58 <arm_fir_fast_q15+0xac>
 800dca2:	9a07      	ldr	r2, [sp, #28]
 800dca4:	f8dd e018 	ldr.w	lr, [sp, #24]
 800dca8:	4452      	add	r2, sl
 800dcaa:	9805      	ldr	r0, [sp, #20]
 800dcac:	b170      	cbz	r0, 800dccc <arm_fir_fast_q15+0x120>
 800dcae:	f8de 0000 	ldr.w	r0, [lr]
 800dcb2:	fb24 7700 	smlad	r7, r4, r0, r7
 800dcb6:	fb25 6600 	smlad	r6, r5, r0, r6
 800dcba:	eac5 0404 	pkhbt	r4, r5, r4
 800dcbe:	fb24 1110 	smladx	r1, r4, r0, r1
 800dcc2:	6812      	ldr	r2, [r2, #0]
 800dcc4:	eac2 0505 	pkhbt	r5, r2, r5
 800dcc8:	fb25 3310 	smladx	r3, r5, r0, r3
 800dccc:	13ff      	asrs	r7, r7, #15
 800dcce:	13c9      	asrs	r1, r1, #15
 800dcd0:	f307 070f 	ssat	r7, #16, r7
 800dcd4:	f301 010f 	ssat	r1, #16, r1
 800dcd8:	eac7 4701 	pkhbt	r7, r7, r1, lsl #16
 800dcdc:	9901      	ldr	r1, [sp, #4]
 800dcde:	f8dd a008 	ldr.w	sl, [sp, #8]
 800dce2:	f841 7c08 	str.w	r7, [r1, #-8]
 800dce6:	13f6      	asrs	r6, r6, #15
 800dce8:	13db      	asrs	r3, r3, #15
 800dcea:	f306 060f 	ssat	r6, #16, r6
 800dcee:	f303 030f 	ssat	r3, #16, r3
 800dcf2:	eac6 4303 	pkhbt	r3, r6, r3, lsl #16
 800dcf6:	f841 3c04 	str.w	r3, [r1, #-4]
 800dcfa:	f101 0308 	add.w	r3, r1, #8
 800dcfe:	9301      	str	r3, [sp, #4]
 800dd00:	9b00      	ldr	r3, [sp, #0]
 800dd02:	3b01      	subs	r3, #1
 800dd04:	f109 0908 	add.w	r9, r9, #8
 800dd08:	f10b 0b08 	add.w	fp, fp, #8
 800dd0c:	9300      	str	r3, [sp, #0]
 800dd0e:	f47f af7f 	bne.w	800dc10 <arm_fir_fast_q15+0x64>
 800dd12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd16:	00db      	lsls	r3, r3, #3
 800dd18:	441a      	add	r2, r3
 800dd1a:	9209      	str	r2, [sp, #36]	; 0x24
 800dd1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd1e:	441a      	add	r2, r3
 800dd20:	920a      	str	r2, [sp, #40]	; 0x28
 800dd22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd24:	441a      	add	r2, r3
 800dd26:	920b      	str	r2, [sp, #44]	; 0x2c
 800dd28:	9a08      	ldr	r2, [sp, #32]
 800dd2a:	441a      	add	r2, r3
 800dd2c:	9208      	str	r2, [sp, #32]
 800dd2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd30:	f013 0b03 	ands.w	fp, r3, #3
 800dd34:	d03d      	beq.n	800ddb2 <arm_fir_fast_q15+0x206>
 800dd36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd38:	f1a3 0802 	sub.w	r8, r3, #2
 800dd3c:	9b04      	ldr	r3, [sp, #16]
 800dd3e:	f103 0904 	add.w	r9, r3, #4
 800dd42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd44:	ea4f 0a53 	mov.w	sl, r3, lsr #1
 800dd48:	9b08      	ldr	r3, [sp, #32]
 800dd4a:	e88d 0c00 	stmia.w	sp, {sl, fp}
 800dd4e:	46de      	mov	lr, fp
 800dd50:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800dd54:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800dd58:	f103 0c04 	add.w	ip, r3, #4
 800dd5c:	f83a 3b02 	ldrh.w	r3, [sl], #2
 800dd60:	9d00      	ldr	r5, [sp, #0]
 800dd62:	f828 3f02 	strh.w	r3, [r8, #2]!
 800dd66:	464c      	mov	r4, r9
 800dd68:	4660      	mov	r0, ip
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	f830 7c04 	ldrh.w	r7, [r0, #-4]
 800dd70:	f834 6c04 	ldrh.w	r6, [r4, #-4]
 800dd74:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 800dd78:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 800dd7c:	fb17 3306 	smlabb	r3, r7, r6, r3
 800dd80:	3d01      	subs	r5, #1
 800dd82:	f100 0004 	add.w	r0, r0, #4
 800dd86:	fb11 3302 	smlabb	r3, r1, r2, r3
 800dd8a:	f104 0404 	add.w	r4, r4, #4
 800dd8e:	d1ed      	bne.n	800dd6c <arm_fir_fast_q15+0x1c0>
 800dd90:	f1be 0e01 	subs.w	lr, lr, #1
 800dd94:	ea4f 33e3 	mov.w	r3, r3, asr #15
 800dd98:	f10c 0c02 	add.w	ip, ip, #2
 800dd9c:	f303 030f 	ssat	r3, #16, r3
 800dda0:	f82b 3b02 	strh.w	r3, [fp], #2
 800dda4:	d1da      	bne.n	800dd5c <arm_fir_fast_q15+0x1b0>
 800dda6:	9b08      	ldr	r3, [sp, #32]
 800dda8:	f8dd b004 	ldr.w	fp, [sp, #4]
 800ddac:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 800ddb0:	9308      	str	r3, [sp, #32]
 800ddb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddb4:	1e5f      	subs	r7, r3, #1
 800ddb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddb8:	08bd      	lsrs	r5, r7, #2
 800ddba:	685e      	ldr	r6, [r3, #4]
 800ddbc:	d029      	beq.n	800de12 <arm_fir_fast_q15+0x266>
 800ddbe:	9808      	ldr	r0, [sp, #32]
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	3310      	adds	r3, #16
 800ddc4:	f106 0210 	add.w	r2, r6, #16
 800ddc8:	4290      	cmp	r0, r2
 800ddca:	bf38      	it	cc
 800ddcc:	429e      	cmpcc	r6, r3
 800ddce:	bf2c      	ite	cs
 800ddd0:	2301      	movcs	r3, #1
 800ddd2:	2300      	movcc	r3, #0
 800ddd4:	2d06      	cmp	r5, #6
 800ddd6:	bf94      	ite	ls
 800ddd8:	2300      	movls	r3, #0
 800ddda:	f003 0301 	andhi.w	r3, r3, #1
 800ddde:	b383      	cbz	r3, 800de42 <arm_fir_fast_q15+0x296>
 800dde0:	4603      	mov	r3, r0
 800dde2:	4333      	orrs	r3, r6
 800dde4:	079b      	lsls	r3, r3, #30
 800dde6:	d12c      	bne.n	800de42 <arm_fir_fast_q15+0x296>
 800dde8:	f100 0208 	add.w	r2, r0, #8
 800ddec:	f106 0308 	add.w	r3, r6, #8
 800ddf0:	2100      	movs	r1, #0
 800ddf2:	e912 0011 	ldmdb	r2, {r0, r4}
 800ddf6:	3101      	adds	r1, #1
 800ddf8:	42a9      	cmp	r1, r5
 800ddfa:	e903 0011 	stmdb	r3, {r0, r4}
 800ddfe:	f102 0208 	add.w	r2, r2, #8
 800de02:	f103 0308 	add.w	r3, r3, #8
 800de06:	d1f4      	bne.n	800ddf2 <arm_fir_fast_q15+0x246>
 800de08:	9b08      	ldr	r3, [sp, #32]
 800de0a:	00ed      	lsls	r5, r5, #3
 800de0c:	442b      	add	r3, r5
 800de0e:	442e      	add	r6, r5
 800de10:	9308      	str	r3, [sp, #32]
 800de12:	f017 0303 	ands.w	r3, r7, #3
 800de16:	d007      	beq.n	800de28 <arm_fir_fast_q15+0x27c>
 800de18:	9a08      	ldr	r2, [sp, #32]
 800de1a:	3e02      	subs	r6, #2
 800de1c:	f832 1b02 	ldrh.w	r1, [r2], #2
 800de20:	f826 1f02 	strh.w	r1, [r6, #2]!
 800de24:	3b01      	subs	r3, #1
 800de26:	d1f9      	bne.n	800de1c <arm_fir_fast_q15+0x270>
 800de28:	b011      	add	sp, #68	; 0x44
 800de2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de2e:	4607      	mov	r7, r0
 800de30:	4603      	mov	r3, r0
 800de32:	4606      	mov	r6, r0
 800de34:	4601      	mov	r1, r0
 800de36:	f10a 0008 	add.w	r0, sl, #8
 800de3a:	f8dd e010 	ldr.w	lr, [sp, #16]
 800de3e:	9002      	str	r0, [sp, #8]
 800de40:	e733      	b.n	800dcaa <arm_fir_fast_q15+0xfe>
 800de42:	9b08      	ldr	r3, [sp, #32]
 800de44:	f106 0208 	add.w	r2, r6, #8
 800de48:	3308      	adds	r3, #8
 800de4a:	4629      	mov	r1, r5
 800de4c:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800de50:	f822 0c08 	strh.w	r0, [r2, #-8]
 800de54:	f833 0c06 	ldrh.w	r0, [r3, #-6]
 800de58:	f822 0c06 	strh.w	r0, [r2, #-6]
 800de5c:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800de60:	f822 0c04 	strh.w	r0, [r2, #-4]
 800de64:	f833 0c02 	ldrh.w	r0, [r3, #-2]
 800de68:	f822 0c02 	strh.w	r0, [r2, #-2]
 800de6c:	3901      	subs	r1, #1
 800de6e:	f103 0308 	add.w	r3, r3, #8
 800de72:	f102 0208 	add.w	r2, r2, #8
 800de76:	d1e9      	bne.n	800de4c <arm_fir_fast_q15+0x2a0>
 800de78:	e7c6      	b.n	800de08 <arm_fir_fast_q15+0x25c>
 800de7a:	bf00      	nop

0800de7c <arm_cmplx_mag_q15>:
 800de7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de80:	b083      	sub	sp, #12
 800de82:	0893      	lsrs	r3, r2, #2
 800de84:	9200      	str	r2, [sp, #0]
 800de86:	4607      	mov	r7, r0
 800de88:	460e      	mov	r6, r1
 800de8a:	9301      	str	r3, [sp, #4]
 800de8c:	d034      	beq.n	800def8 <arm_cmplx_mag_q15+0x7c>
 800de8e:	f100 0510 	add.w	r5, r0, #16
 800de92:	469b      	mov	fp, r3
 800de94:	460c      	mov	r4, r1
 800de96:	f855 0c10 	ldr.w	r0, [r5, #-16]
 800de9a:	fb20 f000 	smuad	r0, r0, r0
 800de9e:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 800dea2:	fb22 f802 	smuad	r8, r2, r2
 800dea6:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800deaa:	fb23 fa03 	smuad	sl, r3, r3
 800deae:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800deb2:	fb23 f903 	smuad	r9, r3, r3
 800deb6:	4621      	mov	r1, r4
 800deb8:	1440      	asrs	r0, r0, #17
 800deba:	f000 f831 	bl	800df20 <arm_sqrt_q15>
 800debe:	1ca1      	adds	r1, r4, #2
 800dec0:	ea4f 4068 	mov.w	r0, r8, asr #17
 800dec4:	f000 f82c 	bl	800df20 <arm_sqrt_q15>
 800dec8:	f104 0806 	add.w	r8, r4, #6
 800decc:	1d21      	adds	r1, r4, #4
 800dece:	ea4f 406a 	mov.w	r0, sl, asr #17
 800ded2:	f000 f825 	bl	800df20 <arm_sqrt_q15>
 800ded6:	ea4f 4069 	mov.w	r0, r9, asr #17
 800deda:	4641      	mov	r1, r8
 800dedc:	f000 f820 	bl	800df20 <arm_sqrt_q15>
 800dee0:	f1bb 0b01 	subs.w	fp, fp, #1
 800dee4:	f105 0510 	add.w	r5, r5, #16
 800dee8:	f104 0408 	add.w	r4, r4, #8
 800deec:	d1d3      	bne.n	800de96 <arm_cmplx_mag_q15+0x1a>
 800deee:	9a01      	ldr	r2, [sp, #4]
 800def0:	eb07 1702 	add.w	r7, r7, r2, lsl #4
 800def4:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 800def8:	9b00      	ldr	r3, [sp, #0]
 800defa:	f013 0403 	ands.w	r4, r3, #3
 800defe:	d00b      	beq.n	800df18 <arm_cmplx_mag_q15+0x9c>
 800df00:	f857 0b04 	ldr.w	r0, [r7], #4
 800df04:	fb20 f000 	smuad	r0, r0, r0
 800df08:	4631      	mov	r1, r6
 800df0a:	1440      	asrs	r0, r0, #17
 800df0c:	f000 f808 	bl	800df20 <arm_sqrt_q15>
 800df10:	3c01      	subs	r4, #1
 800df12:	f106 0602 	add.w	r6, r6, #2
 800df16:	d1f3      	bne.n	800df00 <arm_cmplx_mag_q15+0x84>
 800df18:	b003      	add	sp, #12
 800df1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df1e:	bf00      	nop

0800df20 <arm_sqrt_q15>:
 800df20:	2800      	cmp	r0, #0
 800df22:	dd72      	ble.n	800e00a <arm_sqrt_q15+0xea>
 800df24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df26:	fab0 f680 	clz	r6, r0
 800df2a:	3e11      	subs	r6, #17
 800df2c:	b2b6      	uxth	r6, r6
 800df2e:	f016 0701 	ands.w	r7, r6, #1
 800df32:	bf1a      	itte	ne
 800df34:	f106 32ff 	addne.w	r2, r6, #4294967295	; 0xffffffff
 800df38:	fa00 f302 	lslne.w	r3, r0, r2
 800df3c:	fa00 f306 	lsleq.w	r3, r0, r6
 800df40:	b29b      	uxth	r3, r3
 800df42:	b21c      	sxth	r4, r3
 800df44:	ee07 4a90 	vmov	s15, r4
 800df48:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 800df4c:	4831      	ldr	r0, [pc, #196]	; (800e014 <arm_sqrt_q15+0xf4>)
 800df4e:	ee17 5a90 	vmov	r5, s15
 800df52:	106d      	asrs	r5, r5, #1
 800df54:	1b40      	subs	r0, r0, r5
 800df56:	ee07 0a90 	vmov	s15, r0
 800df5a:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 800df5e:	b083      	sub	sp, #12
 800df60:	edcd 7a01 	vstr	s15, [sp, #4]
 800df64:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 800df68:	fb15 f005 	smulbb	r0, r5, r5
 800df6c:	f3c4 044f 	ubfx	r4, r4, #1, #16
 800df70:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 800df74:	fb10 f004 	smulbb	r0, r0, r4
 800df78:	f340 32cf 	sbfx	r2, r0, #15, #16
 800df7c:	f5c2 5040 	rsb	r0, r2, #12288	; 0x3000
 800df80:	b22a      	sxth	r2, r5
 800df82:	fb00 f202 	mul.w	r2, r0, r2
 800df86:	f342 32cf 	sbfx	r2, r2, #15, #16
 800df8a:	0092      	lsls	r2, r2, #2
 800df8c:	b292      	uxth	r2, r2
 800df8e:	fb12 f002 	smulbb	r0, r2, r2
 800df92:	f3c0 30cf 	ubfx	r0, r0, #15, #16
 800df96:	fb14 f000 	smulbb	r0, r4, r0
 800df9a:	f340 3ecf 	sbfx	lr, r0, #15, #16
 800df9e:	f5ce 5040 	rsb	r0, lr, #12288	; 0x3000
 800dfa2:	fa0f fe82 	sxth.w	lr, r2
 800dfa6:	fb00 fe0e 	mul.w	lr, r0, lr
 800dfaa:	f34e 3ecf 	sbfx	lr, lr, #15, #16
 800dfae:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800dfb2:	fa1f fe8e 	uxth.w	lr, lr
 800dfb6:	fb1e f50e 	smulbb	r5, lr, lr
 800dfba:	f3c5 35cf 	ubfx	r5, r5, #15, #16
 800dfbe:	fb14 f405 	smulbb	r4, r4, r5
 800dfc2:	f344 32cf 	sbfx	r2, r4, #15, #16
 800dfc6:	f5c2 5440 	rsb	r4, r2, #12288	; 0x3000
 800dfca:	fa0f f28e 	sxth.w	r2, lr
 800dfce:	fb04 f202 	mul.w	r2, r4, r2
 800dfd2:	f342 32cf 	sbfx	r2, r2, #15, #16
 800dfd6:	0092      	lsls	r2, r2, #2
 800dfd8:	fb13 f302 	smulbb	r3, r3, r2
 800dfdc:	f343 33cf 	sbfx	r3, r3, #15, #16
 800dfe0:	005b      	lsls	r3, r3, #1
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	b15f      	cbz	r7, 800dffe <arm_sqrt_q15+0xde>
 800dfe6:	3e01      	subs	r6, #1
 800dfe8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800dfec:	1076      	asrs	r6, r6, #1
 800dfee:	b21b      	sxth	r3, r3
 800dff0:	4133      	asrs	r3, r6
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	2000      	movs	r0, #0
 800dff6:	b240      	sxtb	r0, r0
 800dff8:	800b      	strh	r3, [r1, #0]
 800dffa:	b003      	add	sp, #12
 800dffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dffe:	b21b      	sxth	r3, r3
 800e000:	f346 064e 	sbfx	r6, r6, #1, #15
 800e004:	4133      	asrs	r3, r6
 800e006:	b29b      	uxth	r3, r3
 800e008:	e7f4      	b.n	800dff4 <arm_sqrt_q15+0xd4>
 800e00a:	2300      	movs	r3, #0
 800e00c:	20ff      	movs	r0, #255	; 0xff
 800e00e:	800b      	strh	r3, [r1, #0]
 800e010:	b240      	sxtb	r0, r0
 800e012:	4770      	bx	lr
 800e014:	5f3759df 	.word	0x5f3759df

0800e018 <arm_offset_q15>:
 800e018:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800e01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e01e:	eac1 4e01 	pkhbt	lr, r1, r1, lsl #16
 800e022:	d01a      	beq.n	800e05a <arm_offset_q15+0x42>
 800e024:	f102 0508 	add.w	r5, r2, #8
 800e028:	f100 0408 	add.w	r4, r0, #8
 800e02c:	4667      	mov	r7, ip
 800e02e:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800e032:	fa96 f61e 	qadd16	r6, r6, lr
 800e036:	f845 6c08 	str.w	r6, [r5, #-8]
 800e03a:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800e03e:	fa96 f61e 	qadd16	r6, r6, lr
 800e042:	3f01      	subs	r7, #1
 800e044:	f845 6c04 	str.w	r6, [r5, #-4]
 800e048:	f104 0408 	add.w	r4, r4, #8
 800e04c:	f105 0508 	add.w	r5, r5, #8
 800e050:	d1ed      	bne.n	800e02e <arm_offset_q15+0x16>
 800e052:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800e056:	4462      	add	r2, ip
 800e058:	4460      	add	r0, ip
 800e05a:	f013 0303 	ands.w	r3, r3, #3
 800e05e:	d008      	beq.n	800e072 <arm_offset_q15+0x5a>
 800e060:	3a02      	subs	r2, #2
 800e062:	f930 4b02 	ldrsh.w	r4, [r0], #2
 800e066:	fa94 f411 	qadd16	r4, r4, r1
 800e06a:	3b01      	subs	r3, #1
 800e06c:	f822 4f02 	strh.w	r4, [r2, #2]!
 800e070:	d1f7      	bne.n	800e062 <arm_offset_q15+0x4a>
 800e072:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e074 <arm_cfft_radix4by2_q15>:
 800e074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e078:	084d      	lsrs	r5, r1, #1
 800e07a:	b081      	sub	sp, #4
 800e07c:	4604      	mov	r4, r0
 800e07e:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800e082:	4616      	mov	r6, r2
 800e084:	d04c      	beq.n	800e120 <arm_cfft_radix4by2_q15+0xac>
 800e086:	46bc      	mov	ip, r7
 800e088:	4686      	mov	lr, r0
 800e08a:	4691      	mov	r9, r2
 800e08c:	4629      	mov	r1, r5
 800e08e:	f04f 0800 	mov.w	r8, #0
 800e092:	f859 2b04 	ldr.w	r2, [r9], #4
 800e096:	f8de 3000 	ldr.w	r3, [lr]
 800e09a:	fa93 fa28 	shadd16	sl, r3, r8
 800e09e:	f8dc 0000 	ldr.w	r0, [ip]
 800e0a2:	fa90 f028 	shadd16	r0, r0, r8
 800e0a6:	fada fb10 	qsub16	fp, sl, r0
 800e0aa:	fa9a f020 	shadd16	r0, sl, r0
 800e0ae:	f84e 0b04 	str.w	r0, [lr], #4
 800e0b2:	fb22 f00b 	smuad	r0, r2, fp
 800e0b6:	fb42 f21b 	smusdx	r2, r2, fp
 800e0ba:	0c13      	lsrs	r3, r2, #16
 800e0bc:	041b      	lsls	r3, r3, #16
 800e0be:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800e0c2:	3901      	subs	r1, #1
 800e0c4:	f84c 3b04 	str.w	r3, [ip], #4
 800e0c8:	d1e3      	bne.n	800e092 <arm_cfft_radix4by2_q15+0x1e>
 800e0ca:	4629      	mov	r1, r5
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	4632      	mov	r2, r6
 800e0d0:	2302      	movs	r3, #2
 800e0d2:	f000 f8f5 	bl	800e2c0 <arm_radix4_butterfly_q15>
 800e0d6:	4629      	mov	r1, r5
 800e0d8:	2302      	movs	r3, #2
 800e0da:	4638      	mov	r0, r7
 800e0dc:	4632      	mov	r2, r6
 800e0de:	f000 f8ef 	bl	800e2c0 <arm_radix4_butterfly_q15>
 800e0e2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800e0e6:	1ca3      	adds	r3, r4, #2
 800e0e8:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 800e0ec:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800e0f0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e0f4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e0f8:	007f      	lsls	r7, r7, #1
 800e0fa:	0076      	lsls	r6, r6, #1
 800e0fc:	0040      	lsls	r0, r0, #1
 800e0fe:	0052      	lsls	r2, r2, #1
 800e100:	f823 7c02 	strh.w	r7, [r3, #-2]
 800e104:	3408      	adds	r4, #8
 800e106:	f824 6c06 	strh.w	r6, [r4, #-6]
 800e10a:	f824 0c04 	strh.w	r0, [r4, #-4]
 800e10e:	f824 2c02 	strh.w	r2, [r4, #-2]
 800e112:	42ac      	cmp	r4, r5
 800e114:	f103 0308 	add.w	r3, r3, #8
 800e118:	d1e6      	bne.n	800e0e8 <arm_cfft_radix4by2_q15+0x74>
 800e11a:	b001      	add	sp, #4
 800e11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e120:	4629      	mov	r1, r5
 800e122:	2302      	movs	r3, #2
 800e124:	f000 f8cc 	bl	800e2c0 <arm_radix4_butterfly_q15>
 800e128:	4638      	mov	r0, r7
 800e12a:	4629      	mov	r1, r5
 800e12c:	4632      	mov	r2, r6
 800e12e:	2302      	movs	r3, #2
 800e130:	b001      	add	sp, #4
 800e132:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e136:	f000 b8c3 	b.w	800e2c0 <arm_radix4_butterfly_q15>
 800e13a:	bf00      	nop

0800e13c <arm_cfft_radix4by2_inverse_q15>:
 800e13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e140:	084d      	lsrs	r5, r1, #1
 800e142:	b081      	sub	sp, #4
 800e144:	4604      	mov	r4, r0
 800e146:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800e14a:	4616      	mov	r6, r2
 800e14c:	d04c      	beq.n	800e1e8 <arm_cfft_radix4by2_inverse_q15+0xac>
 800e14e:	46bc      	mov	ip, r7
 800e150:	4686      	mov	lr, r0
 800e152:	4691      	mov	r9, r2
 800e154:	4629      	mov	r1, r5
 800e156:	f04f 0800 	mov.w	r8, #0
 800e15a:	f859 2b04 	ldr.w	r2, [r9], #4
 800e15e:	f8de 3000 	ldr.w	r3, [lr]
 800e162:	fa93 fa28 	shadd16	sl, r3, r8
 800e166:	f8dc 0000 	ldr.w	r0, [ip]
 800e16a:	fa90 f028 	shadd16	r0, r0, r8
 800e16e:	fada fb10 	qsub16	fp, sl, r0
 800e172:	fa9a f020 	shadd16	r0, sl, r0
 800e176:	f84e 0b04 	str.w	r0, [lr], #4
 800e17a:	fb42 f00b 	smusd	r0, r2, fp
 800e17e:	fb22 f21b 	smuadx	r2, r2, fp
 800e182:	0c13      	lsrs	r3, r2, #16
 800e184:	041b      	lsls	r3, r3, #16
 800e186:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800e18a:	3901      	subs	r1, #1
 800e18c:	f84c 3b04 	str.w	r3, [ip], #4
 800e190:	d1e3      	bne.n	800e15a <arm_cfft_radix4by2_inverse_q15+0x1e>
 800e192:	4629      	mov	r1, r5
 800e194:	4620      	mov	r0, r4
 800e196:	4632      	mov	r2, r6
 800e198:	2302      	movs	r3, #2
 800e19a:	f000 f9bf 	bl	800e51c <arm_radix4_butterfly_inverse_q15>
 800e19e:	4629      	mov	r1, r5
 800e1a0:	2302      	movs	r3, #2
 800e1a2:	4638      	mov	r0, r7
 800e1a4:	4632      	mov	r2, r6
 800e1a6:	f000 f9b9 	bl	800e51c <arm_radix4_butterfly_inverse_q15>
 800e1aa:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800e1ae:	1ca3      	adds	r3, r4, #2
 800e1b0:	f933 7c02 	ldrsh.w	r7, [r3, #-2]
 800e1b4:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800e1b8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e1bc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e1c0:	007f      	lsls	r7, r7, #1
 800e1c2:	0076      	lsls	r6, r6, #1
 800e1c4:	0040      	lsls	r0, r0, #1
 800e1c6:	0052      	lsls	r2, r2, #1
 800e1c8:	f823 7c02 	strh.w	r7, [r3, #-2]
 800e1cc:	3408      	adds	r4, #8
 800e1ce:	f824 6c06 	strh.w	r6, [r4, #-6]
 800e1d2:	f824 0c04 	strh.w	r0, [r4, #-4]
 800e1d6:	f824 2c02 	strh.w	r2, [r4, #-2]
 800e1da:	42ac      	cmp	r4, r5
 800e1dc:	f103 0308 	add.w	r3, r3, #8
 800e1e0:	d1e6      	bne.n	800e1b0 <arm_cfft_radix4by2_inverse_q15+0x74>
 800e1e2:	b001      	add	sp, #4
 800e1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1e8:	4629      	mov	r1, r5
 800e1ea:	2302      	movs	r3, #2
 800e1ec:	f000 f996 	bl	800e51c <arm_radix4_butterfly_inverse_q15>
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	4629      	mov	r1, r5
 800e1f4:	4632      	mov	r2, r6
 800e1f6:	2302      	movs	r3, #2
 800e1f8:	b001      	add	sp, #4
 800e1fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1fe:	f000 b98d 	b.w	800e51c <arm_radix4_butterfly_inverse_q15>
 800e202:	bf00      	nop

0800e204 <arm_cfft_q15>:
 800e204:	b570      	push	{r4, r5, r6, lr}
 800e206:	2a01      	cmp	r2, #1
 800e208:	460d      	mov	r5, r1
 800e20a:	4604      	mov	r4, r0
 800e20c:	461e      	mov	r6, r3
 800e20e:	8801      	ldrh	r1, [r0, #0]
 800e210:	d024      	beq.n	800e25c <arm_cfft_q15+0x58>
 800e212:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e216:	d013      	beq.n	800e240 <arm_cfft_q15+0x3c>
 800e218:	d808      	bhi.n	800e22c <arm_cfft_q15+0x28>
 800e21a:	2920      	cmp	r1, #32
 800e21c:	d031      	beq.n	800e282 <arm_cfft_q15+0x7e>
 800e21e:	d945      	bls.n	800e2ac <arm_cfft_q15+0xa8>
 800e220:	2940      	cmp	r1, #64	; 0x40
 800e222:	d00d      	beq.n	800e240 <arm_cfft_q15+0x3c>
 800e224:	2980      	cmp	r1, #128	; 0x80
 800e226:	d02c      	beq.n	800e282 <arm_cfft_q15+0x7e>
 800e228:	b98e      	cbnz	r6, 800e24e <arm_cfft_q15+0x4a>
 800e22a:	bd70      	pop	{r4, r5, r6, pc}
 800e22c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e230:	d006      	beq.n	800e240 <arm_cfft_q15+0x3c>
 800e232:	d923      	bls.n	800e27c <arm_cfft_q15+0x78>
 800e234:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800e238:	d023      	beq.n	800e282 <arm_cfft_q15+0x7e>
 800e23a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800e23e:	d1f3      	bne.n	800e228 <arm_cfft_q15+0x24>
 800e240:	4628      	mov	r0, r5
 800e242:	6862      	ldr	r2, [r4, #4]
 800e244:	2301      	movs	r3, #1
 800e246:	f000 f83b 	bl	800e2c0 <arm_radix4_butterfly_q15>
 800e24a:	2e00      	cmp	r6, #0
 800e24c:	d0ed      	beq.n	800e22a <arm_cfft_q15+0x26>
 800e24e:	4628      	mov	r0, r5
 800e250:	89a1      	ldrh	r1, [r4, #12]
 800e252:	68a2      	ldr	r2, [r4, #8]
 800e254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e258:	f7f1 bff7 	b.w	800024a <arm_bitreversal_16>
 800e25c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e260:	d01e      	beq.n	800e2a0 <arm_cfft_q15+0x9c>
 800e262:	d813      	bhi.n	800e28c <arm_cfft_q15+0x88>
 800e264:	2920      	cmp	r1, #32
 800e266:	d004      	beq.n	800e272 <arm_cfft_q15+0x6e>
 800e268:	d927      	bls.n	800e2ba <arm_cfft_q15+0xb6>
 800e26a:	2940      	cmp	r1, #64	; 0x40
 800e26c:	d018      	beq.n	800e2a0 <arm_cfft_q15+0x9c>
 800e26e:	2980      	cmp	r1, #128	; 0x80
 800e270:	d1da      	bne.n	800e228 <arm_cfft_q15+0x24>
 800e272:	4628      	mov	r0, r5
 800e274:	6862      	ldr	r2, [r4, #4]
 800e276:	f7ff ff61 	bl	800e13c <arm_cfft_radix4by2_inverse_q15>
 800e27a:	e7d5      	b.n	800e228 <arm_cfft_q15+0x24>
 800e27c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e280:	d1d2      	bne.n	800e228 <arm_cfft_q15+0x24>
 800e282:	4628      	mov	r0, r5
 800e284:	6862      	ldr	r2, [r4, #4]
 800e286:	f7ff fef5 	bl	800e074 <arm_cfft_radix4by2_q15>
 800e28a:	e7cd      	b.n	800e228 <arm_cfft_q15+0x24>
 800e28c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e290:	d006      	beq.n	800e2a0 <arm_cfft_q15+0x9c>
 800e292:	d90e      	bls.n	800e2b2 <arm_cfft_q15+0xae>
 800e294:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800e298:	d0eb      	beq.n	800e272 <arm_cfft_q15+0x6e>
 800e29a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800e29e:	d1c3      	bne.n	800e228 <arm_cfft_q15+0x24>
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	6862      	ldr	r2, [r4, #4]
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	f000 f939 	bl	800e51c <arm_radix4_butterfly_inverse_q15>
 800e2aa:	e7bd      	b.n	800e228 <arm_cfft_q15+0x24>
 800e2ac:	2910      	cmp	r1, #16
 800e2ae:	d1bb      	bne.n	800e228 <arm_cfft_q15+0x24>
 800e2b0:	e7c6      	b.n	800e240 <arm_cfft_q15+0x3c>
 800e2b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e2b6:	d0dc      	beq.n	800e272 <arm_cfft_q15+0x6e>
 800e2b8:	e7b6      	b.n	800e228 <arm_cfft_q15+0x24>
 800e2ba:	2910      	cmp	r1, #16
 800e2bc:	d1b4      	bne.n	800e228 <arm_cfft_q15+0x24>
 800e2be:	e7ef      	b.n	800e2a0 <arm_cfft_q15+0x9c>

0800e2c0 <arm_radix4_butterfly_q15>:
 800e2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c4:	b08f      	sub	sp, #60	; 0x3c
 800e2c6:	469b      	mov	fp, r3
 800e2c8:	9101      	str	r1, [sp, #4]
 800e2ca:	0889      	lsrs	r1, r1, #2
 800e2cc:	460e      	mov	r6, r1
 800e2ce:	910d      	str	r1, [sp, #52]	; 0x34
 800e2d0:	0089      	lsls	r1, r1, #2
 800e2d2:	4607      	mov	r7, r0
 800e2d4:	900c      	str	r0, [sp, #48]	; 0x30
 800e2d6:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 800e2da:	4408      	add	r0, r1
 800e2dc:	2400      	movs	r4, #0
 800e2de:	1845      	adds	r5, r0, r1
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4696      	mov	lr, r2
 800e2e4:	9209      	str	r2, [sp, #36]	; 0x24
 800e2e6:	46b2      	mov	sl, r6
 800e2e8:	4429      	add	r1, r5
 800e2ea:	9302      	str	r3, [sp, #8]
 800e2ec:	4626      	mov	r6, r4
 800e2ee:	4622      	mov	r2, r4
 800e2f0:	f8cd b000 	str.w	fp, [sp]
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	fa93 fc22 	shadd16	ip, r3, r2
 800e2fa:	fa9c fc22 	shadd16	ip, ip, r2
 800e2fe:	682b      	ldr	r3, [r5, #0]
 800e300:	fa93 f322 	shadd16	r3, r3, r2
 800e304:	fa93 f322 	shadd16	r3, r3, r2
 800e308:	fa9c f813 	qadd16	r8, ip, r3
 800e30c:	fadc fc13 	qsub16	ip, ip, r3
 800e310:	6803      	ldr	r3, [r0, #0]
 800e312:	fa93 f322 	shadd16	r3, r3, r2
 800e316:	fa93 f922 	shadd16	r9, r3, r2
 800e31a:	680b      	ldr	r3, [r1, #0]
 800e31c:	fa93 f322 	shadd16	r3, r3, r2
 800e320:	fa93 f322 	shadd16	r3, r3, r2
 800e324:	fa99 f313 	qadd16	r3, r9, r3
 800e328:	fa98 f923 	shadd16	r9, r8, r3
 800e32c:	f847 9b04 	str.w	r9, [r7], #4
 800e330:	fad8 f313 	qsub16	r3, r8, r3
 800e334:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 800e338:	fb29 fb03 	smuad	fp, r9, r3
 800e33c:	fb49 f913 	smusdx	r9, r9, r3
 800e340:	6803      	ldr	r3, [r0, #0]
 800e342:	fa93 f322 	shadd16	r3, r3, r2
 800e346:	fa93 f822 	shadd16	r8, r3, r2
 800e34a:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800e34e:	ea4f 4909 	mov.w	r9, r9, lsl #16
 800e352:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 800e356:	f840 3b04 	str.w	r3, [r0], #4
 800e35a:	680b      	ldr	r3, [r1, #0]
 800e35c:	fa93 f322 	shadd16	r3, r3, r2
 800e360:	fa93 f322 	shadd16	r3, r3, r2
 800e364:	fad8 f313 	qsub16	r3, r8, r3
 800e368:	faac f913 	qasx	r9, ip, r3
 800e36c:	faec fc13 	qsax	ip, ip, r3
 800e370:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 800e374:	fb23 f80c 	smuad	r8, r3, ip
 800e378:	fb43 f31c 	smusdx	r3, r3, ip
 800e37c:	0c1b      	lsrs	r3, r3, #16
 800e37e:	041b      	lsls	r3, r3, #16
 800e380:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800e384:	f845 3b04 	str.w	r3, [r5], #4
 800e388:	f85e 3004 	ldr.w	r3, [lr, r4]
 800e38c:	fb23 fc09 	smuad	ip, r3, r9
 800e390:	fb43 f319 	smusdx	r3, r3, r9
 800e394:	0c1b      	lsrs	r3, r3, #16
 800e396:	041b      	lsls	r3, r3, #16
 800e398:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800e39c:	f841 3b04 	str.w	r3, [r1], #4
 800e3a0:	9b00      	ldr	r3, [sp, #0]
 800e3a2:	441e      	add	r6, r3
 800e3a4:	9b02      	ldr	r3, [sp, #8]
 800e3a6:	f1ba 0a01 	subs.w	sl, sl, #1
 800e3aa:	441c      	add	r4, r3
 800e3ac:	d1a2      	bne.n	800e2f4 <arm_radix4_butterfly_q15+0x34>
 800e3ae:	f8dd b000 	ldr.w	fp, [sp]
 800e3b2:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e3b6:	9306      	str	r3, [sp, #24]
 800e3b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3ba:	2b04      	cmp	r3, #4
 800e3bc:	f240 8081 	bls.w	800e4c2 <arm_radix4_butterfly_q15+0x202>
 800e3c0:	f8cd a008 	str.w	sl, [sp, #8]
 800e3c4:	930a      	str	r3, [sp, #40]	; 0x28
 800e3c6:	469a      	mov	sl, r3
 800e3c8:	ea4f 039a 	mov.w	r3, sl, lsr #2
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	4611      	mov	r1, r2
 800e3d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3d2:	9204      	str	r2, [sp, #16]
 800e3d4:	1e5a      	subs	r2, r3, #1
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	9308      	str	r3, [sp, #32]
 800e3da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3dc:	9207      	str	r2, [sp, #28]
 800e3de:	9105      	str	r1, [sp, #20]
 800e3e0:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800e3e4:	9303      	str	r3, [sp, #12]
 800e3e6:	9908      	ldr	r1, [sp, #32]
 800e3e8:	9a03      	ldr	r2, [sp, #12]
 800e3ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e3ec:	1850      	adds	r0, r2, r1
 800e3ee:	9a05      	ldr	r2, [sp, #20]
 800e3f0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800e3f4:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 800e3f8:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 800e3fc:	9b06      	ldr	r3, [sp, #24]
 800e3fe:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 800e402:	18d3      	adds	r3, r2, r3
 800e404:	9305      	str	r3, [sp, #20]
 800e406:	9a04      	ldr	r2, [sp, #16]
 800e408:	9b01      	ldr	r3, [sp, #4]
 800e40a:	1845      	adds	r5, r0, r1
 800e40c:	4293      	cmp	r3, r2
 800e40e:	46b6      	mov	lr, r6
 800e410:	eb05 0401 	add.w	r4, r5, r1
 800e414:	9e03      	ldr	r6, [sp, #12]
 800e416:	d941      	bls.n	800e49c <arm_radix4_butterfly_q15+0x1dc>
 800e418:	eb02 0e0a 	add.w	lr, r2, sl
 800e41c:	6833      	ldr	r3, [r6, #0]
 800e41e:	682a      	ldr	r2, [r5, #0]
 800e420:	fa93 fb12 	qadd16	fp, r3, r2
 800e424:	fad3 f312 	qsub16	r3, r3, r2
 800e428:	9300      	str	r3, [sp, #0]
 800e42a:	6802      	ldr	r2, [r0, #0]
 800e42c:	6821      	ldr	r1, [r4, #0]
 800e42e:	fa92 f211 	qadd16	r2, r2, r1
 800e432:	fa9b f322 	shadd16	r3, fp, r2
 800e436:	9902      	ldr	r1, [sp, #8]
 800e438:	fa93 f121 	shadd16	r1, r3, r1
 800e43c:	6031      	str	r1, [r6, #0]
 800e43e:	443e      	add	r6, r7
 800e440:	fadb f222 	shsub16	r2, fp, r2
 800e444:	fb28 f102 	smuad	r1, r8, r2
 800e448:	fb48 f212 	smusdx	r2, r8, r2
 800e44c:	0c12      	lsrs	r2, r2, #16
 800e44e:	0412      	lsls	r2, r2, #16
 800e450:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800e454:	6801      	ldr	r1, [r0, #0]
 800e456:	6002      	str	r2, [r0, #0]
 800e458:	6822      	ldr	r2, [r4, #0]
 800e45a:	4438      	add	r0, r7
 800e45c:	fad1 f212 	qsub16	r2, r1, r2
 800e460:	9b00      	ldr	r3, [sp, #0]
 800e462:	faa3 f122 	shasx	r1, r3, r2
 800e466:	fae3 f322 	shsax	r3, r3, r2
 800e46a:	fb2c fb03 	smuad	fp, ip, r3
 800e46e:	fb4c f313 	smusdx	r3, ip, r3
 800e472:	0c1b      	lsrs	r3, r3, #16
 800e474:	041b      	lsls	r3, r3, #16
 800e476:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800e47a:	602b      	str	r3, [r5, #0]
 800e47c:	443d      	add	r5, r7
 800e47e:	fb29 f301 	smuad	r3, r9, r1
 800e482:	fb49 f111 	smusdx	r1, r9, r1
 800e486:	0c09      	lsrs	r1, r1, #16
 800e488:	0409      	lsls	r1, r1, #16
 800e48a:	9a01      	ldr	r2, [sp, #4]
 800e48c:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800e490:	4673      	mov	r3, lr
 800e492:	429a      	cmp	r2, r3
 800e494:	6021      	str	r1, [r4, #0]
 800e496:	44d6      	add	lr, sl
 800e498:	443c      	add	r4, r7
 800e49a:	d8bf      	bhi.n	800e41c <arm_radix4_butterfly_q15+0x15c>
 800e49c:	9a03      	ldr	r2, [sp, #12]
 800e49e:	9b04      	ldr	r3, [sp, #16]
 800e4a0:	3204      	adds	r2, #4
 800e4a2:	9203      	str	r2, [sp, #12]
 800e4a4:	9a07      	ldr	r2, [sp, #28]
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	9304      	str	r3, [sp, #16]
 800e4ac:	d99b      	bls.n	800e3e6 <arm_radix4_butterfly_q15+0x126>
 800e4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4b0:	9a06      	ldr	r2, [sp, #24]
 800e4b2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800e4b6:	089b      	lsrs	r3, r3, #2
 800e4b8:	0092      	lsls	r2, r2, #2
 800e4ba:	2b04      	cmp	r3, #4
 800e4bc:	930a      	str	r3, [sp, #40]	; 0x28
 800e4be:	9206      	str	r2, [sp, #24]
 800e4c0:	d882      	bhi.n	800e3c8 <arm_radix4_butterfly_q15+0x108>
 800e4c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e4c4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800e4c6:	3410      	adds	r4, #16
 800e4c8:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800e4cc:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800e4d0:	fa93 f117 	qadd16	r1, r3, r7
 800e4d4:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800e4d8:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800e4dc:	fa92 f510 	qadd16	r5, r2, r0
 800e4e0:	fa91 f525 	shadd16	r5, r1, r5
 800e4e4:	f844 5c10 	str.w	r5, [r4, #-16]
 800e4e8:	fa92 f510 	qadd16	r5, r2, r0
 800e4ec:	fad1 f125 	shsub16	r1, r1, r5
 800e4f0:	f844 1c0c 	str.w	r1, [r4, #-12]
 800e4f4:	fad3 f317 	qsub16	r3, r3, r7
 800e4f8:	fad2 f210 	qsub16	r2, r2, r0
 800e4fc:	fae3 f122 	shsax	r1, r3, r2
 800e500:	f844 1c08 	str.w	r1, [r4, #-8]
 800e504:	faa3 f322 	shasx	r3, r3, r2
 800e508:	3e01      	subs	r6, #1
 800e50a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e50e:	f104 0410 	add.w	r4, r4, #16
 800e512:	d1d9      	bne.n	800e4c8 <arm_radix4_butterfly_q15+0x208>
 800e514:	b00f      	add	sp, #60	; 0x3c
 800e516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e51a:	bf00      	nop

0800e51c <arm_radix4_butterfly_inverse_q15>:
 800e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e520:	b08f      	sub	sp, #60	; 0x3c
 800e522:	469b      	mov	fp, r3
 800e524:	9101      	str	r1, [sp, #4]
 800e526:	0889      	lsrs	r1, r1, #2
 800e528:	460e      	mov	r6, r1
 800e52a:	910d      	str	r1, [sp, #52]	; 0x34
 800e52c:	0089      	lsls	r1, r1, #2
 800e52e:	4607      	mov	r7, r0
 800e530:	900c      	str	r0, [sp, #48]	; 0x30
 800e532:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 800e536:	4408      	add	r0, r1
 800e538:	2400      	movs	r4, #0
 800e53a:	1845      	adds	r5, r0, r1
 800e53c:	009b      	lsls	r3, r3, #2
 800e53e:	4696      	mov	lr, r2
 800e540:	9209      	str	r2, [sp, #36]	; 0x24
 800e542:	46b2      	mov	sl, r6
 800e544:	4429      	add	r1, r5
 800e546:	9302      	str	r3, [sp, #8]
 800e548:	4626      	mov	r6, r4
 800e54a:	4622      	mov	r2, r4
 800e54c:	f8cd b000 	str.w	fp, [sp]
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	fa93 fc22 	shadd16	ip, r3, r2
 800e556:	fa9c fc22 	shadd16	ip, ip, r2
 800e55a:	682b      	ldr	r3, [r5, #0]
 800e55c:	fa93 f322 	shadd16	r3, r3, r2
 800e560:	fa93 f322 	shadd16	r3, r3, r2
 800e564:	fa9c f813 	qadd16	r8, ip, r3
 800e568:	fadc fc13 	qsub16	ip, ip, r3
 800e56c:	6803      	ldr	r3, [r0, #0]
 800e56e:	fa93 f322 	shadd16	r3, r3, r2
 800e572:	fa93 f922 	shadd16	r9, r3, r2
 800e576:	680b      	ldr	r3, [r1, #0]
 800e578:	fa93 f322 	shadd16	r3, r3, r2
 800e57c:	fa93 f322 	shadd16	r3, r3, r2
 800e580:	fa99 f313 	qadd16	r3, r9, r3
 800e584:	fa98 f923 	shadd16	r9, r8, r3
 800e588:	f847 9b04 	str.w	r9, [r7], #4
 800e58c:	fad8 f313 	qsub16	r3, r8, r3
 800e590:	f85e 9036 	ldr.w	r9, [lr, r6, lsl #3]
 800e594:	fb49 fb03 	smusd	fp, r9, r3
 800e598:	fb29 f913 	smuadx	r9, r9, r3
 800e59c:	6803      	ldr	r3, [r0, #0]
 800e59e:	fa93 f322 	shadd16	r3, r3, r2
 800e5a2:	fa93 f822 	shadd16	r8, r3, r2
 800e5a6:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800e5aa:	ea4f 4909 	mov.w	r9, r9, lsl #16
 800e5ae:	ea49 431b 	orr.w	r3, r9, fp, lsr #16
 800e5b2:	f840 3b04 	str.w	r3, [r0], #4
 800e5b6:	680b      	ldr	r3, [r1, #0]
 800e5b8:	fa93 f322 	shadd16	r3, r3, r2
 800e5bc:	fa93 f322 	shadd16	r3, r3, r2
 800e5c0:	fad8 f313 	qsub16	r3, r8, r3
 800e5c4:	faec f913 	qsax	r9, ip, r3
 800e5c8:	faac fc13 	qasx	ip, ip, r3
 800e5cc:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 800e5d0:	fb43 f80c 	smusd	r8, r3, ip
 800e5d4:	fb23 f31c 	smuadx	r3, r3, ip
 800e5d8:	0c1b      	lsrs	r3, r3, #16
 800e5da:	041b      	lsls	r3, r3, #16
 800e5dc:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800e5e0:	f845 3b04 	str.w	r3, [r5], #4
 800e5e4:	f85e 3004 	ldr.w	r3, [lr, r4]
 800e5e8:	fb43 fc09 	smusd	ip, r3, r9
 800e5ec:	fb23 f319 	smuadx	r3, r3, r9
 800e5f0:	0c1b      	lsrs	r3, r3, #16
 800e5f2:	041b      	lsls	r3, r3, #16
 800e5f4:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800e5f8:	f841 3b04 	str.w	r3, [r1], #4
 800e5fc:	9b00      	ldr	r3, [sp, #0]
 800e5fe:	441e      	add	r6, r3
 800e600:	9b02      	ldr	r3, [sp, #8]
 800e602:	f1ba 0a01 	subs.w	sl, sl, #1
 800e606:	441c      	add	r4, r3
 800e608:	d1a2      	bne.n	800e550 <arm_radix4_butterfly_inverse_q15+0x34>
 800e60a:	f8dd b000 	ldr.w	fp, [sp]
 800e60e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e612:	9306      	str	r3, [sp, #24]
 800e614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e616:	2b04      	cmp	r3, #4
 800e618:	f240 8081 	bls.w	800e71e <arm_radix4_butterfly_inverse_q15+0x202>
 800e61c:	f8cd a008 	str.w	sl, [sp, #8]
 800e620:	930a      	str	r3, [sp, #40]	; 0x28
 800e622:	469a      	mov	sl, r3
 800e624:	ea4f 039a 	mov.w	r3, sl, lsr #2
 800e628:	2200      	movs	r2, #0
 800e62a:	4611      	mov	r1, r2
 800e62c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e62e:	9204      	str	r2, [sp, #16]
 800e630:	1e5a      	subs	r2, r3, #1
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	9308      	str	r3, [sp, #32]
 800e636:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e638:	9207      	str	r2, [sp, #28]
 800e63a:	9105      	str	r1, [sp, #20]
 800e63c:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800e640:	9303      	str	r3, [sp, #12]
 800e642:	9908      	ldr	r1, [sp, #32]
 800e644:	9a03      	ldr	r2, [sp, #12]
 800e646:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e648:	1850      	adds	r0, r2, r1
 800e64a:	9a05      	ldr	r2, [sp, #20]
 800e64c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800e650:	f856 c022 	ldr.w	ip, [r6, r2, lsl #2]
 800e654:	f856 9023 	ldr.w	r9, [r6, r3, lsl #2]
 800e658:	9b06      	ldr	r3, [sp, #24]
 800e65a:	f856 8032 	ldr.w	r8, [r6, r2, lsl #3]
 800e65e:	18d3      	adds	r3, r2, r3
 800e660:	9305      	str	r3, [sp, #20]
 800e662:	9a04      	ldr	r2, [sp, #16]
 800e664:	9b01      	ldr	r3, [sp, #4]
 800e666:	1845      	adds	r5, r0, r1
 800e668:	4293      	cmp	r3, r2
 800e66a:	46b6      	mov	lr, r6
 800e66c:	eb05 0401 	add.w	r4, r5, r1
 800e670:	9e03      	ldr	r6, [sp, #12]
 800e672:	d941      	bls.n	800e6f8 <arm_radix4_butterfly_inverse_q15+0x1dc>
 800e674:	eb02 0e0a 	add.w	lr, r2, sl
 800e678:	6833      	ldr	r3, [r6, #0]
 800e67a:	682a      	ldr	r2, [r5, #0]
 800e67c:	fa93 fb12 	qadd16	fp, r3, r2
 800e680:	fad3 f312 	qsub16	r3, r3, r2
 800e684:	9300      	str	r3, [sp, #0]
 800e686:	6802      	ldr	r2, [r0, #0]
 800e688:	6821      	ldr	r1, [r4, #0]
 800e68a:	fa92 f211 	qadd16	r2, r2, r1
 800e68e:	fa9b f322 	shadd16	r3, fp, r2
 800e692:	9902      	ldr	r1, [sp, #8]
 800e694:	fa93 f121 	shadd16	r1, r3, r1
 800e698:	6031      	str	r1, [r6, #0]
 800e69a:	443e      	add	r6, r7
 800e69c:	fadb f222 	shsub16	r2, fp, r2
 800e6a0:	fb48 f102 	smusd	r1, r8, r2
 800e6a4:	fb28 f212 	smuadx	r2, r8, r2
 800e6a8:	0c12      	lsrs	r2, r2, #16
 800e6aa:	0412      	lsls	r2, r2, #16
 800e6ac:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800e6b0:	6801      	ldr	r1, [r0, #0]
 800e6b2:	6002      	str	r2, [r0, #0]
 800e6b4:	6822      	ldr	r2, [r4, #0]
 800e6b6:	4438      	add	r0, r7
 800e6b8:	fad1 f212 	qsub16	r2, r1, r2
 800e6bc:	9b00      	ldr	r3, [sp, #0]
 800e6be:	fae3 f122 	shsax	r1, r3, r2
 800e6c2:	faa3 f322 	shasx	r3, r3, r2
 800e6c6:	fb4c fb03 	smusd	fp, ip, r3
 800e6ca:	fb2c f313 	smuadx	r3, ip, r3
 800e6ce:	0c1b      	lsrs	r3, r3, #16
 800e6d0:	041b      	lsls	r3, r3, #16
 800e6d2:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800e6d6:	602b      	str	r3, [r5, #0]
 800e6d8:	443d      	add	r5, r7
 800e6da:	fb49 f301 	smusd	r3, r9, r1
 800e6de:	fb29 f111 	smuadx	r1, r9, r1
 800e6e2:	0c09      	lsrs	r1, r1, #16
 800e6e4:	0409      	lsls	r1, r1, #16
 800e6e6:	9a01      	ldr	r2, [sp, #4]
 800e6e8:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800e6ec:	4673      	mov	r3, lr
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	6021      	str	r1, [r4, #0]
 800e6f2:	44d6      	add	lr, sl
 800e6f4:	443c      	add	r4, r7
 800e6f6:	d8bf      	bhi.n	800e678 <arm_radix4_butterfly_inverse_q15+0x15c>
 800e6f8:	9a03      	ldr	r2, [sp, #12]
 800e6fa:	9b04      	ldr	r3, [sp, #16]
 800e6fc:	3204      	adds	r2, #4
 800e6fe:	9203      	str	r2, [sp, #12]
 800e700:	9a07      	ldr	r2, [sp, #28]
 800e702:	3301      	adds	r3, #1
 800e704:	4293      	cmp	r3, r2
 800e706:	9304      	str	r3, [sp, #16]
 800e708:	d99b      	bls.n	800e642 <arm_radix4_butterfly_inverse_q15+0x126>
 800e70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e70c:	9a06      	ldr	r2, [sp, #24]
 800e70e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800e712:	089b      	lsrs	r3, r3, #2
 800e714:	0092      	lsls	r2, r2, #2
 800e716:	2b04      	cmp	r3, #4
 800e718:	930a      	str	r3, [sp, #40]	; 0x28
 800e71a:	9206      	str	r2, [sp, #24]
 800e71c:	d882      	bhi.n	800e624 <arm_radix4_butterfly_inverse_q15+0x108>
 800e71e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e720:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800e722:	3410      	adds	r4, #16
 800e724:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800e728:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800e72c:	fa93 f117 	qadd16	r1, r3, r7
 800e730:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800e734:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800e738:	fa92 f510 	qadd16	r5, r2, r0
 800e73c:	fa91 f525 	shadd16	r5, r1, r5
 800e740:	f844 5c10 	str.w	r5, [r4, #-16]
 800e744:	fa92 f510 	qadd16	r5, r2, r0
 800e748:	fad1 f125 	shsub16	r1, r1, r5
 800e74c:	f844 1c0c 	str.w	r1, [r4, #-12]
 800e750:	fad3 f317 	qsub16	r3, r3, r7
 800e754:	fad2 f210 	qsub16	r2, r2, r0
 800e758:	faa3 f122 	shasx	r1, r3, r2
 800e75c:	f844 1c08 	str.w	r1, [r4, #-8]
 800e760:	fae3 f322 	shsax	r3, r3, r2
 800e764:	3e01      	subs	r6, #1
 800e766:	f844 3c04 	str.w	r3, [r4, #-4]
 800e76a:	f104 0410 	add.w	r4, r4, #16
 800e76e:	d1d9      	bne.n	800e724 <arm_radix4_butterfly_inverse_q15+0x208>
 800e770:	b00f      	add	sp, #60	; 0x3c
 800e772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e776:	bf00      	nop

0800e778 <__errno>:
 800e778:	4b01      	ldr	r3, [pc, #4]	; (800e780 <__errno+0x8>)
 800e77a:	6818      	ldr	r0, [r3, #0]
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	200000b0 	.word	0x200000b0

0800e784 <__libc_init_array>:
 800e784:	b570      	push	{r4, r5, r6, lr}
 800e786:	4d0d      	ldr	r5, [pc, #52]	; (800e7bc <__libc_init_array+0x38>)
 800e788:	4c0d      	ldr	r4, [pc, #52]	; (800e7c0 <__libc_init_array+0x3c>)
 800e78a:	1b64      	subs	r4, r4, r5
 800e78c:	10a4      	asrs	r4, r4, #2
 800e78e:	2600      	movs	r6, #0
 800e790:	42a6      	cmp	r6, r4
 800e792:	d109      	bne.n	800e7a8 <__libc_init_array+0x24>
 800e794:	4d0b      	ldr	r5, [pc, #44]	; (800e7c4 <__libc_init_array+0x40>)
 800e796:	4c0c      	ldr	r4, [pc, #48]	; (800e7c8 <__libc_init_array+0x44>)
 800e798:	f000 fd0c 	bl	800f1b4 <_init>
 800e79c:	1b64      	subs	r4, r4, r5
 800e79e:	10a4      	asrs	r4, r4, #2
 800e7a0:	2600      	movs	r6, #0
 800e7a2:	42a6      	cmp	r6, r4
 800e7a4:	d105      	bne.n	800e7b2 <__libc_init_array+0x2e>
 800e7a6:	bd70      	pop	{r4, r5, r6, pc}
 800e7a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7ac:	4798      	blx	r3
 800e7ae:	3601      	adds	r6, #1
 800e7b0:	e7ee      	b.n	800e790 <__libc_init_array+0xc>
 800e7b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7b6:	4798      	blx	r3
 800e7b8:	3601      	adds	r6, #1
 800e7ba:	e7f2      	b.n	800e7a2 <__libc_init_array+0x1e>
 800e7bc:	08021708 	.word	0x08021708
 800e7c0:	08021708 	.word	0x08021708
 800e7c4:	08021708 	.word	0x08021708
 800e7c8:	0802170c 	.word	0x0802170c

0800e7cc <__retarget_lock_acquire_recursive>:
 800e7cc:	4770      	bx	lr

0800e7ce <__retarget_lock_release_recursive>:
 800e7ce:	4770      	bx	lr

0800e7d0 <memcpy>:
 800e7d0:	440a      	add	r2, r1
 800e7d2:	4291      	cmp	r1, r2
 800e7d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e7d8:	d100      	bne.n	800e7dc <memcpy+0xc>
 800e7da:	4770      	bx	lr
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7e6:	4291      	cmp	r1, r2
 800e7e8:	d1f9      	bne.n	800e7de <memcpy+0xe>
 800e7ea:	bd10      	pop	{r4, pc}

0800e7ec <memset>:
 800e7ec:	4402      	add	r2, r0
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d100      	bne.n	800e7f6 <memset+0xa>
 800e7f4:	4770      	bx	lr
 800e7f6:	f803 1b01 	strb.w	r1, [r3], #1
 800e7fa:	e7f9      	b.n	800e7f0 <memset+0x4>

0800e7fc <sbrk_aligned>:
 800e7fc:	b570      	push	{r4, r5, r6, lr}
 800e7fe:	4e0e      	ldr	r6, [pc, #56]	; (800e838 <sbrk_aligned+0x3c>)
 800e800:	460c      	mov	r4, r1
 800e802:	6831      	ldr	r1, [r6, #0]
 800e804:	4605      	mov	r5, r0
 800e806:	b911      	cbnz	r1, 800e80e <sbrk_aligned+0x12>
 800e808:	f000 f8f6 	bl	800e9f8 <_sbrk_r>
 800e80c:	6030      	str	r0, [r6, #0]
 800e80e:	4621      	mov	r1, r4
 800e810:	4628      	mov	r0, r5
 800e812:	f000 f8f1 	bl	800e9f8 <_sbrk_r>
 800e816:	1c43      	adds	r3, r0, #1
 800e818:	d00a      	beq.n	800e830 <sbrk_aligned+0x34>
 800e81a:	1cc4      	adds	r4, r0, #3
 800e81c:	f024 0403 	bic.w	r4, r4, #3
 800e820:	42a0      	cmp	r0, r4
 800e822:	d007      	beq.n	800e834 <sbrk_aligned+0x38>
 800e824:	1a21      	subs	r1, r4, r0
 800e826:	4628      	mov	r0, r5
 800e828:	f000 f8e6 	bl	800e9f8 <_sbrk_r>
 800e82c:	3001      	adds	r0, #1
 800e82e:	d101      	bne.n	800e834 <sbrk_aligned+0x38>
 800e830:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e834:	4620      	mov	r0, r4
 800e836:	bd70      	pop	{r4, r5, r6, pc}
 800e838:	2000a744 	.word	0x2000a744

0800e83c <_malloc_r>:
 800e83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e840:	1ccd      	adds	r5, r1, #3
 800e842:	f025 0503 	bic.w	r5, r5, #3
 800e846:	3508      	adds	r5, #8
 800e848:	2d0c      	cmp	r5, #12
 800e84a:	bf38      	it	cc
 800e84c:	250c      	movcc	r5, #12
 800e84e:	2d00      	cmp	r5, #0
 800e850:	4607      	mov	r7, r0
 800e852:	db01      	blt.n	800e858 <_malloc_r+0x1c>
 800e854:	42a9      	cmp	r1, r5
 800e856:	d905      	bls.n	800e864 <_malloc_r+0x28>
 800e858:	230c      	movs	r3, #12
 800e85a:	603b      	str	r3, [r7, #0]
 800e85c:	2600      	movs	r6, #0
 800e85e:	4630      	mov	r0, r6
 800e860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e864:	4e2e      	ldr	r6, [pc, #184]	; (800e920 <_malloc_r+0xe4>)
 800e866:	f000 f90b 	bl	800ea80 <__malloc_lock>
 800e86a:	6833      	ldr	r3, [r6, #0]
 800e86c:	461c      	mov	r4, r3
 800e86e:	bb34      	cbnz	r4, 800e8be <_malloc_r+0x82>
 800e870:	4629      	mov	r1, r5
 800e872:	4638      	mov	r0, r7
 800e874:	f7ff ffc2 	bl	800e7fc <sbrk_aligned>
 800e878:	1c43      	adds	r3, r0, #1
 800e87a:	4604      	mov	r4, r0
 800e87c:	d14d      	bne.n	800e91a <_malloc_r+0xde>
 800e87e:	6834      	ldr	r4, [r6, #0]
 800e880:	4626      	mov	r6, r4
 800e882:	2e00      	cmp	r6, #0
 800e884:	d140      	bne.n	800e908 <_malloc_r+0xcc>
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	4631      	mov	r1, r6
 800e88a:	4638      	mov	r0, r7
 800e88c:	eb04 0803 	add.w	r8, r4, r3
 800e890:	f000 f8b2 	bl	800e9f8 <_sbrk_r>
 800e894:	4580      	cmp	r8, r0
 800e896:	d13a      	bne.n	800e90e <_malloc_r+0xd2>
 800e898:	6821      	ldr	r1, [r4, #0]
 800e89a:	3503      	adds	r5, #3
 800e89c:	1a6d      	subs	r5, r5, r1
 800e89e:	f025 0503 	bic.w	r5, r5, #3
 800e8a2:	3508      	adds	r5, #8
 800e8a4:	2d0c      	cmp	r5, #12
 800e8a6:	bf38      	it	cc
 800e8a8:	250c      	movcc	r5, #12
 800e8aa:	4629      	mov	r1, r5
 800e8ac:	4638      	mov	r0, r7
 800e8ae:	f7ff ffa5 	bl	800e7fc <sbrk_aligned>
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	d02b      	beq.n	800e90e <_malloc_r+0xd2>
 800e8b6:	6823      	ldr	r3, [r4, #0]
 800e8b8:	442b      	add	r3, r5
 800e8ba:	6023      	str	r3, [r4, #0]
 800e8bc:	e00e      	b.n	800e8dc <_malloc_r+0xa0>
 800e8be:	6822      	ldr	r2, [r4, #0]
 800e8c0:	1b52      	subs	r2, r2, r5
 800e8c2:	d41e      	bmi.n	800e902 <_malloc_r+0xc6>
 800e8c4:	2a0b      	cmp	r2, #11
 800e8c6:	d916      	bls.n	800e8f6 <_malloc_r+0xba>
 800e8c8:	1961      	adds	r1, r4, r5
 800e8ca:	42a3      	cmp	r3, r4
 800e8cc:	6025      	str	r5, [r4, #0]
 800e8ce:	bf18      	it	ne
 800e8d0:	6059      	strne	r1, [r3, #4]
 800e8d2:	6863      	ldr	r3, [r4, #4]
 800e8d4:	bf08      	it	eq
 800e8d6:	6031      	streq	r1, [r6, #0]
 800e8d8:	5162      	str	r2, [r4, r5]
 800e8da:	604b      	str	r3, [r1, #4]
 800e8dc:	4638      	mov	r0, r7
 800e8de:	f104 060b 	add.w	r6, r4, #11
 800e8e2:	f000 f8d3 	bl	800ea8c <__malloc_unlock>
 800e8e6:	f026 0607 	bic.w	r6, r6, #7
 800e8ea:	1d23      	adds	r3, r4, #4
 800e8ec:	1af2      	subs	r2, r6, r3
 800e8ee:	d0b6      	beq.n	800e85e <_malloc_r+0x22>
 800e8f0:	1b9b      	subs	r3, r3, r6
 800e8f2:	50a3      	str	r3, [r4, r2]
 800e8f4:	e7b3      	b.n	800e85e <_malloc_r+0x22>
 800e8f6:	6862      	ldr	r2, [r4, #4]
 800e8f8:	42a3      	cmp	r3, r4
 800e8fa:	bf0c      	ite	eq
 800e8fc:	6032      	streq	r2, [r6, #0]
 800e8fe:	605a      	strne	r2, [r3, #4]
 800e900:	e7ec      	b.n	800e8dc <_malloc_r+0xa0>
 800e902:	4623      	mov	r3, r4
 800e904:	6864      	ldr	r4, [r4, #4]
 800e906:	e7b2      	b.n	800e86e <_malloc_r+0x32>
 800e908:	4634      	mov	r4, r6
 800e90a:	6876      	ldr	r6, [r6, #4]
 800e90c:	e7b9      	b.n	800e882 <_malloc_r+0x46>
 800e90e:	230c      	movs	r3, #12
 800e910:	603b      	str	r3, [r7, #0]
 800e912:	4638      	mov	r0, r7
 800e914:	f000 f8ba 	bl	800ea8c <__malloc_unlock>
 800e918:	e7a1      	b.n	800e85e <_malloc_r+0x22>
 800e91a:	6025      	str	r5, [r4, #0]
 800e91c:	e7de      	b.n	800e8dc <_malloc_r+0xa0>
 800e91e:	bf00      	nop
 800e920:	2000a740 	.word	0x2000a740

0800e924 <cleanup_glue>:
 800e924:	b538      	push	{r3, r4, r5, lr}
 800e926:	460c      	mov	r4, r1
 800e928:	6809      	ldr	r1, [r1, #0]
 800e92a:	4605      	mov	r5, r0
 800e92c:	b109      	cbz	r1, 800e932 <cleanup_glue+0xe>
 800e92e:	f7ff fff9 	bl	800e924 <cleanup_glue>
 800e932:	4621      	mov	r1, r4
 800e934:	4628      	mov	r0, r5
 800e936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e93a:	f000 b8ad 	b.w	800ea98 <_free_r>
	...

0800e940 <_reclaim_reent>:
 800e940:	4b2c      	ldr	r3, [pc, #176]	; (800e9f4 <_reclaim_reent+0xb4>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4283      	cmp	r3, r0
 800e946:	b570      	push	{r4, r5, r6, lr}
 800e948:	4604      	mov	r4, r0
 800e94a:	d051      	beq.n	800e9f0 <_reclaim_reent+0xb0>
 800e94c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e94e:	b143      	cbz	r3, 800e962 <_reclaim_reent+0x22>
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d14a      	bne.n	800e9ec <_reclaim_reent+0xac>
 800e956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e958:	6819      	ldr	r1, [r3, #0]
 800e95a:	b111      	cbz	r1, 800e962 <_reclaim_reent+0x22>
 800e95c:	4620      	mov	r0, r4
 800e95e:	f000 f89b 	bl	800ea98 <_free_r>
 800e962:	6961      	ldr	r1, [r4, #20]
 800e964:	b111      	cbz	r1, 800e96c <_reclaim_reent+0x2c>
 800e966:	4620      	mov	r0, r4
 800e968:	f000 f896 	bl	800ea98 <_free_r>
 800e96c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e96e:	b111      	cbz	r1, 800e976 <_reclaim_reent+0x36>
 800e970:	4620      	mov	r0, r4
 800e972:	f000 f891 	bl	800ea98 <_free_r>
 800e976:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e978:	b111      	cbz	r1, 800e980 <_reclaim_reent+0x40>
 800e97a:	4620      	mov	r0, r4
 800e97c:	f000 f88c 	bl	800ea98 <_free_r>
 800e980:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e982:	b111      	cbz	r1, 800e98a <_reclaim_reent+0x4a>
 800e984:	4620      	mov	r0, r4
 800e986:	f000 f887 	bl	800ea98 <_free_r>
 800e98a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e98c:	b111      	cbz	r1, 800e994 <_reclaim_reent+0x54>
 800e98e:	4620      	mov	r0, r4
 800e990:	f000 f882 	bl	800ea98 <_free_r>
 800e994:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e996:	b111      	cbz	r1, 800e99e <_reclaim_reent+0x5e>
 800e998:	4620      	mov	r0, r4
 800e99a:	f000 f87d 	bl	800ea98 <_free_r>
 800e99e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e9a0:	b111      	cbz	r1, 800e9a8 <_reclaim_reent+0x68>
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f000 f878 	bl	800ea98 <_free_r>
 800e9a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9aa:	b111      	cbz	r1, 800e9b2 <_reclaim_reent+0x72>
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	f000 f873 	bl	800ea98 <_free_r>
 800e9b2:	69a3      	ldr	r3, [r4, #24]
 800e9b4:	b1e3      	cbz	r3, 800e9f0 <_reclaim_reent+0xb0>
 800e9b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	4798      	blx	r3
 800e9bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e9be:	b1b9      	cbz	r1, 800e9f0 <_reclaim_reent+0xb0>
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9c6:	f7ff bfad 	b.w	800e924 <cleanup_glue>
 800e9ca:	5949      	ldr	r1, [r1, r5]
 800e9cc:	b941      	cbnz	r1, 800e9e0 <_reclaim_reent+0xa0>
 800e9ce:	3504      	adds	r5, #4
 800e9d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9d2:	2d80      	cmp	r5, #128	; 0x80
 800e9d4:	68d9      	ldr	r1, [r3, #12]
 800e9d6:	d1f8      	bne.n	800e9ca <_reclaim_reent+0x8a>
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f000 f85d 	bl	800ea98 <_free_r>
 800e9de:	e7ba      	b.n	800e956 <_reclaim_reent+0x16>
 800e9e0:	680e      	ldr	r6, [r1, #0]
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f000 f858 	bl	800ea98 <_free_r>
 800e9e8:	4631      	mov	r1, r6
 800e9ea:	e7ef      	b.n	800e9cc <_reclaim_reent+0x8c>
 800e9ec:	2500      	movs	r5, #0
 800e9ee:	e7ef      	b.n	800e9d0 <_reclaim_reent+0x90>
 800e9f0:	bd70      	pop	{r4, r5, r6, pc}
 800e9f2:	bf00      	nop
 800e9f4:	200000b0 	.word	0x200000b0

0800e9f8 <_sbrk_r>:
 800e9f8:	b538      	push	{r3, r4, r5, lr}
 800e9fa:	4d06      	ldr	r5, [pc, #24]	; (800ea14 <_sbrk_r+0x1c>)
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	4604      	mov	r4, r0
 800ea00:	4608      	mov	r0, r1
 800ea02:	602b      	str	r3, [r5, #0]
 800ea04:	f7f3 ff94 	bl	8002930 <_sbrk>
 800ea08:	1c43      	adds	r3, r0, #1
 800ea0a:	d102      	bne.n	800ea12 <_sbrk_r+0x1a>
 800ea0c:	682b      	ldr	r3, [r5, #0]
 800ea0e:	b103      	cbz	r3, 800ea12 <_sbrk_r+0x1a>
 800ea10:	6023      	str	r3, [r4, #0]
 800ea12:	bd38      	pop	{r3, r4, r5, pc}
 800ea14:	2000a748 	.word	0x2000a748

0800ea18 <siprintf>:
 800ea18:	b40e      	push	{r1, r2, r3}
 800ea1a:	b500      	push	{lr}
 800ea1c:	b09c      	sub	sp, #112	; 0x70
 800ea1e:	ab1d      	add	r3, sp, #116	; 0x74
 800ea20:	9002      	str	r0, [sp, #8]
 800ea22:	9006      	str	r0, [sp, #24]
 800ea24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ea28:	4809      	ldr	r0, [pc, #36]	; (800ea50 <siprintf+0x38>)
 800ea2a:	9107      	str	r1, [sp, #28]
 800ea2c:	9104      	str	r1, [sp, #16]
 800ea2e:	4909      	ldr	r1, [pc, #36]	; (800ea54 <siprintf+0x3c>)
 800ea30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea34:	9105      	str	r1, [sp, #20]
 800ea36:	6800      	ldr	r0, [r0, #0]
 800ea38:	9301      	str	r3, [sp, #4]
 800ea3a:	a902      	add	r1, sp, #8
 800ea3c:	f000 f8d4 	bl	800ebe8 <_svfiprintf_r>
 800ea40:	9b02      	ldr	r3, [sp, #8]
 800ea42:	2200      	movs	r2, #0
 800ea44:	701a      	strb	r2, [r3, #0]
 800ea46:	b01c      	add	sp, #112	; 0x70
 800ea48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea4c:	b003      	add	sp, #12
 800ea4e:	4770      	bx	lr
 800ea50:	200000b0 	.word	0x200000b0
 800ea54:	ffff0208 	.word	0xffff0208

0800ea58 <strncpy>:
 800ea58:	b510      	push	{r4, lr}
 800ea5a:	3901      	subs	r1, #1
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	b132      	cbz	r2, 800ea6e <strncpy+0x16>
 800ea60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea64:	f803 4b01 	strb.w	r4, [r3], #1
 800ea68:	3a01      	subs	r2, #1
 800ea6a:	2c00      	cmp	r4, #0
 800ea6c:	d1f7      	bne.n	800ea5e <strncpy+0x6>
 800ea6e:	441a      	add	r2, r3
 800ea70:	2100      	movs	r1, #0
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d100      	bne.n	800ea78 <strncpy+0x20>
 800ea76:	bd10      	pop	{r4, pc}
 800ea78:	f803 1b01 	strb.w	r1, [r3], #1
 800ea7c:	e7f9      	b.n	800ea72 <strncpy+0x1a>
	...

0800ea80 <__malloc_lock>:
 800ea80:	4801      	ldr	r0, [pc, #4]	; (800ea88 <__malloc_lock+0x8>)
 800ea82:	f7ff bea3 	b.w	800e7cc <__retarget_lock_acquire_recursive>
 800ea86:	bf00      	nop
 800ea88:	2000a73c 	.word	0x2000a73c

0800ea8c <__malloc_unlock>:
 800ea8c:	4801      	ldr	r0, [pc, #4]	; (800ea94 <__malloc_unlock+0x8>)
 800ea8e:	f7ff be9e 	b.w	800e7ce <__retarget_lock_release_recursive>
 800ea92:	bf00      	nop
 800ea94:	2000a73c 	.word	0x2000a73c

0800ea98 <_free_r>:
 800ea98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea9a:	2900      	cmp	r1, #0
 800ea9c:	d044      	beq.n	800eb28 <_free_r+0x90>
 800ea9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaa2:	9001      	str	r0, [sp, #4]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	f1a1 0404 	sub.w	r4, r1, #4
 800eaaa:	bfb8      	it	lt
 800eaac:	18e4      	addlt	r4, r4, r3
 800eaae:	f7ff ffe7 	bl	800ea80 <__malloc_lock>
 800eab2:	4a1e      	ldr	r2, [pc, #120]	; (800eb2c <_free_r+0x94>)
 800eab4:	9801      	ldr	r0, [sp, #4]
 800eab6:	6813      	ldr	r3, [r2, #0]
 800eab8:	b933      	cbnz	r3, 800eac8 <_free_r+0x30>
 800eaba:	6063      	str	r3, [r4, #4]
 800eabc:	6014      	str	r4, [r2, #0]
 800eabe:	b003      	add	sp, #12
 800eac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eac4:	f7ff bfe2 	b.w	800ea8c <__malloc_unlock>
 800eac8:	42a3      	cmp	r3, r4
 800eaca:	d908      	bls.n	800eade <_free_r+0x46>
 800eacc:	6825      	ldr	r5, [r4, #0]
 800eace:	1961      	adds	r1, r4, r5
 800ead0:	428b      	cmp	r3, r1
 800ead2:	bf01      	itttt	eq
 800ead4:	6819      	ldreq	r1, [r3, #0]
 800ead6:	685b      	ldreq	r3, [r3, #4]
 800ead8:	1949      	addeq	r1, r1, r5
 800eada:	6021      	streq	r1, [r4, #0]
 800eadc:	e7ed      	b.n	800eaba <_free_r+0x22>
 800eade:	461a      	mov	r2, r3
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	b10b      	cbz	r3, 800eae8 <_free_r+0x50>
 800eae4:	42a3      	cmp	r3, r4
 800eae6:	d9fa      	bls.n	800eade <_free_r+0x46>
 800eae8:	6811      	ldr	r1, [r2, #0]
 800eaea:	1855      	adds	r5, r2, r1
 800eaec:	42a5      	cmp	r5, r4
 800eaee:	d10b      	bne.n	800eb08 <_free_r+0x70>
 800eaf0:	6824      	ldr	r4, [r4, #0]
 800eaf2:	4421      	add	r1, r4
 800eaf4:	1854      	adds	r4, r2, r1
 800eaf6:	42a3      	cmp	r3, r4
 800eaf8:	6011      	str	r1, [r2, #0]
 800eafa:	d1e0      	bne.n	800eabe <_free_r+0x26>
 800eafc:	681c      	ldr	r4, [r3, #0]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	6053      	str	r3, [r2, #4]
 800eb02:	4421      	add	r1, r4
 800eb04:	6011      	str	r1, [r2, #0]
 800eb06:	e7da      	b.n	800eabe <_free_r+0x26>
 800eb08:	d902      	bls.n	800eb10 <_free_r+0x78>
 800eb0a:	230c      	movs	r3, #12
 800eb0c:	6003      	str	r3, [r0, #0]
 800eb0e:	e7d6      	b.n	800eabe <_free_r+0x26>
 800eb10:	6825      	ldr	r5, [r4, #0]
 800eb12:	1961      	adds	r1, r4, r5
 800eb14:	428b      	cmp	r3, r1
 800eb16:	bf04      	itt	eq
 800eb18:	6819      	ldreq	r1, [r3, #0]
 800eb1a:	685b      	ldreq	r3, [r3, #4]
 800eb1c:	6063      	str	r3, [r4, #4]
 800eb1e:	bf04      	itt	eq
 800eb20:	1949      	addeq	r1, r1, r5
 800eb22:	6021      	streq	r1, [r4, #0]
 800eb24:	6054      	str	r4, [r2, #4]
 800eb26:	e7ca      	b.n	800eabe <_free_r+0x26>
 800eb28:	b003      	add	sp, #12
 800eb2a:	bd30      	pop	{r4, r5, pc}
 800eb2c:	2000a740 	.word	0x2000a740

0800eb30 <__ssputs_r>:
 800eb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb34:	688e      	ldr	r6, [r1, #8]
 800eb36:	429e      	cmp	r6, r3
 800eb38:	4682      	mov	sl, r0
 800eb3a:	460c      	mov	r4, r1
 800eb3c:	4690      	mov	r8, r2
 800eb3e:	461f      	mov	r7, r3
 800eb40:	d838      	bhi.n	800ebb4 <__ssputs_r+0x84>
 800eb42:	898a      	ldrh	r2, [r1, #12]
 800eb44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb48:	d032      	beq.n	800ebb0 <__ssputs_r+0x80>
 800eb4a:	6825      	ldr	r5, [r4, #0]
 800eb4c:	6909      	ldr	r1, [r1, #16]
 800eb4e:	eba5 0901 	sub.w	r9, r5, r1
 800eb52:	6965      	ldr	r5, [r4, #20]
 800eb54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	444b      	add	r3, r9
 800eb60:	106d      	asrs	r5, r5, #1
 800eb62:	429d      	cmp	r5, r3
 800eb64:	bf38      	it	cc
 800eb66:	461d      	movcc	r5, r3
 800eb68:	0553      	lsls	r3, r2, #21
 800eb6a:	d531      	bpl.n	800ebd0 <__ssputs_r+0xa0>
 800eb6c:	4629      	mov	r1, r5
 800eb6e:	f7ff fe65 	bl	800e83c <_malloc_r>
 800eb72:	4606      	mov	r6, r0
 800eb74:	b950      	cbnz	r0, 800eb8c <__ssputs_r+0x5c>
 800eb76:	230c      	movs	r3, #12
 800eb78:	f8ca 3000 	str.w	r3, [sl]
 800eb7c:	89a3      	ldrh	r3, [r4, #12]
 800eb7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb82:	81a3      	strh	r3, [r4, #12]
 800eb84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb8c:	6921      	ldr	r1, [r4, #16]
 800eb8e:	464a      	mov	r2, r9
 800eb90:	f7ff fe1e 	bl	800e7d0 <memcpy>
 800eb94:	89a3      	ldrh	r3, [r4, #12]
 800eb96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb9e:	81a3      	strh	r3, [r4, #12]
 800eba0:	6126      	str	r6, [r4, #16]
 800eba2:	6165      	str	r5, [r4, #20]
 800eba4:	444e      	add	r6, r9
 800eba6:	eba5 0509 	sub.w	r5, r5, r9
 800ebaa:	6026      	str	r6, [r4, #0]
 800ebac:	60a5      	str	r5, [r4, #8]
 800ebae:	463e      	mov	r6, r7
 800ebb0:	42be      	cmp	r6, r7
 800ebb2:	d900      	bls.n	800ebb6 <__ssputs_r+0x86>
 800ebb4:	463e      	mov	r6, r7
 800ebb6:	6820      	ldr	r0, [r4, #0]
 800ebb8:	4632      	mov	r2, r6
 800ebba:	4641      	mov	r1, r8
 800ebbc:	f000 faa8 	bl	800f110 <memmove>
 800ebc0:	68a3      	ldr	r3, [r4, #8]
 800ebc2:	1b9b      	subs	r3, r3, r6
 800ebc4:	60a3      	str	r3, [r4, #8]
 800ebc6:	6823      	ldr	r3, [r4, #0]
 800ebc8:	4433      	add	r3, r6
 800ebca:	6023      	str	r3, [r4, #0]
 800ebcc:	2000      	movs	r0, #0
 800ebce:	e7db      	b.n	800eb88 <__ssputs_r+0x58>
 800ebd0:	462a      	mov	r2, r5
 800ebd2:	f000 fab7 	bl	800f144 <_realloc_r>
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d1e1      	bne.n	800eba0 <__ssputs_r+0x70>
 800ebdc:	6921      	ldr	r1, [r4, #16]
 800ebde:	4650      	mov	r0, sl
 800ebe0:	f7ff ff5a 	bl	800ea98 <_free_r>
 800ebe4:	e7c7      	b.n	800eb76 <__ssputs_r+0x46>
	...

0800ebe8 <_svfiprintf_r>:
 800ebe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebec:	4698      	mov	r8, r3
 800ebee:	898b      	ldrh	r3, [r1, #12]
 800ebf0:	061b      	lsls	r3, r3, #24
 800ebf2:	b09d      	sub	sp, #116	; 0x74
 800ebf4:	4607      	mov	r7, r0
 800ebf6:	460d      	mov	r5, r1
 800ebf8:	4614      	mov	r4, r2
 800ebfa:	d50e      	bpl.n	800ec1a <_svfiprintf_r+0x32>
 800ebfc:	690b      	ldr	r3, [r1, #16]
 800ebfe:	b963      	cbnz	r3, 800ec1a <_svfiprintf_r+0x32>
 800ec00:	2140      	movs	r1, #64	; 0x40
 800ec02:	f7ff fe1b 	bl	800e83c <_malloc_r>
 800ec06:	6028      	str	r0, [r5, #0]
 800ec08:	6128      	str	r0, [r5, #16]
 800ec0a:	b920      	cbnz	r0, 800ec16 <_svfiprintf_r+0x2e>
 800ec0c:	230c      	movs	r3, #12
 800ec0e:	603b      	str	r3, [r7, #0]
 800ec10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec14:	e0d1      	b.n	800edba <_svfiprintf_r+0x1d2>
 800ec16:	2340      	movs	r3, #64	; 0x40
 800ec18:	616b      	str	r3, [r5, #20]
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec1e:	2320      	movs	r3, #32
 800ec20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec28:	2330      	movs	r3, #48	; 0x30
 800ec2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800edd4 <_svfiprintf_r+0x1ec>
 800ec2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec32:	f04f 0901 	mov.w	r9, #1
 800ec36:	4623      	mov	r3, r4
 800ec38:	469a      	mov	sl, r3
 800ec3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec3e:	b10a      	cbz	r2, 800ec44 <_svfiprintf_r+0x5c>
 800ec40:	2a25      	cmp	r2, #37	; 0x25
 800ec42:	d1f9      	bne.n	800ec38 <_svfiprintf_r+0x50>
 800ec44:	ebba 0b04 	subs.w	fp, sl, r4
 800ec48:	d00b      	beq.n	800ec62 <_svfiprintf_r+0x7a>
 800ec4a:	465b      	mov	r3, fp
 800ec4c:	4622      	mov	r2, r4
 800ec4e:	4629      	mov	r1, r5
 800ec50:	4638      	mov	r0, r7
 800ec52:	f7ff ff6d 	bl	800eb30 <__ssputs_r>
 800ec56:	3001      	adds	r0, #1
 800ec58:	f000 80aa 	beq.w	800edb0 <_svfiprintf_r+0x1c8>
 800ec5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec5e:	445a      	add	r2, fp
 800ec60:	9209      	str	r2, [sp, #36]	; 0x24
 800ec62:	f89a 3000 	ldrb.w	r3, [sl]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f000 80a2 	beq.w	800edb0 <_svfiprintf_r+0x1c8>
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec76:	f10a 0a01 	add.w	sl, sl, #1
 800ec7a:	9304      	str	r3, [sp, #16]
 800ec7c:	9307      	str	r3, [sp, #28]
 800ec7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec82:	931a      	str	r3, [sp, #104]	; 0x68
 800ec84:	4654      	mov	r4, sl
 800ec86:	2205      	movs	r2, #5
 800ec88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec8c:	4851      	ldr	r0, [pc, #324]	; (800edd4 <_svfiprintf_r+0x1ec>)
 800ec8e:	f7f1 fb07 	bl	80002a0 <memchr>
 800ec92:	9a04      	ldr	r2, [sp, #16]
 800ec94:	b9d8      	cbnz	r0, 800ecce <_svfiprintf_r+0xe6>
 800ec96:	06d0      	lsls	r0, r2, #27
 800ec98:	bf44      	itt	mi
 800ec9a:	2320      	movmi	r3, #32
 800ec9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eca0:	0711      	lsls	r1, r2, #28
 800eca2:	bf44      	itt	mi
 800eca4:	232b      	movmi	r3, #43	; 0x2b
 800eca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecaa:	f89a 3000 	ldrb.w	r3, [sl]
 800ecae:	2b2a      	cmp	r3, #42	; 0x2a
 800ecb0:	d015      	beq.n	800ecde <_svfiprintf_r+0xf6>
 800ecb2:	9a07      	ldr	r2, [sp, #28]
 800ecb4:	4654      	mov	r4, sl
 800ecb6:	2000      	movs	r0, #0
 800ecb8:	f04f 0c0a 	mov.w	ip, #10
 800ecbc:	4621      	mov	r1, r4
 800ecbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecc2:	3b30      	subs	r3, #48	; 0x30
 800ecc4:	2b09      	cmp	r3, #9
 800ecc6:	d94e      	bls.n	800ed66 <_svfiprintf_r+0x17e>
 800ecc8:	b1b0      	cbz	r0, 800ecf8 <_svfiprintf_r+0x110>
 800ecca:	9207      	str	r2, [sp, #28]
 800eccc:	e014      	b.n	800ecf8 <_svfiprintf_r+0x110>
 800ecce:	eba0 0308 	sub.w	r3, r0, r8
 800ecd2:	fa09 f303 	lsl.w	r3, r9, r3
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	9304      	str	r3, [sp, #16]
 800ecda:	46a2      	mov	sl, r4
 800ecdc:	e7d2      	b.n	800ec84 <_svfiprintf_r+0x9c>
 800ecde:	9b03      	ldr	r3, [sp, #12]
 800ece0:	1d19      	adds	r1, r3, #4
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	9103      	str	r1, [sp, #12]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	bfbb      	ittet	lt
 800ecea:	425b      	neglt	r3, r3
 800ecec:	f042 0202 	orrlt.w	r2, r2, #2
 800ecf0:	9307      	strge	r3, [sp, #28]
 800ecf2:	9307      	strlt	r3, [sp, #28]
 800ecf4:	bfb8      	it	lt
 800ecf6:	9204      	strlt	r2, [sp, #16]
 800ecf8:	7823      	ldrb	r3, [r4, #0]
 800ecfa:	2b2e      	cmp	r3, #46	; 0x2e
 800ecfc:	d10c      	bne.n	800ed18 <_svfiprintf_r+0x130>
 800ecfe:	7863      	ldrb	r3, [r4, #1]
 800ed00:	2b2a      	cmp	r3, #42	; 0x2a
 800ed02:	d135      	bne.n	800ed70 <_svfiprintf_r+0x188>
 800ed04:	9b03      	ldr	r3, [sp, #12]
 800ed06:	1d1a      	adds	r2, r3, #4
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	9203      	str	r2, [sp, #12]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	bfb8      	it	lt
 800ed10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ed14:	3402      	adds	r4, #2
 800ed16:	9305      	str	r3, [sp, #20]
 800ed18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ede4 <_svfiprintf_r+0x1fc>
 800ed1c:	7821      	ldrb	r1, [r4, #0]
 800ed1e:	2203      	movs	r2, #3
 800ed20:	4650      	mov	r0, sl
 800ed22:	f7f1 fabd 	bl	80002a0 <memchr>
 800ed26:	b140      	cbz	r0, 800ed3a <_svfiprintf_r+0x152>
 800ed28:	2340      	movs	r3, #64	; 0x40
 800ed2a:	eba0 000a 	sub.w	r0, r0, sl
 800ed2e:	fa03 f000 	lsl.w	r0, r3, r0
 800ed32:	9b04      	ldr	r3, [sp, #16]
 800ed34:	4303      	orrs	r3, r0
 800ed36:	3401      	adds	r4, #1
 800ed38:	9304      	str	r3, [sp, #16]
 800ed3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed3e:	4826      	ldr	r0, [pc, #152]	; (800edd8 <_svfiprintf_r+0x1f0>)
 800ed40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed44:	2206      	movs	r2, #6
 800ed46:	f7f1 faab 	bl	80002a0 <memchr>
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	d038      	beq.n	800edc0 <_svfiprintf_r+0x1d8>
 800ed4e:	4b23      	ldr	r3, [pc, #140]	; (800eddc <_svfiprintf_r+0x1f4>)
 800ed50:	bb1b      	cbnz	r3, 800ed9a <_svfiprintf_r+0x1b2>
 800ed52:	9b03      	ldr	r3, [sp, #12]
 800ed54:	3307      	adds	r3, #7
 800ed56:	f023 0307 	bic.w	r3, r3, #7
 800ed5a:	3308      	adds	r3, #8
 800ed5c:	9303      	str	r3, [sp, #12]
 800ed5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed60:	4433      	add	r3, r6
 800ed62:	9309      	str	r3, [sp, #36]	; 0x24
 800ed64:	e767      	b.n	800ec36 <_svfiprintf_r+0x4e>
 800ed66:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed6a:	460c      	mov	r4, r1
 800ed6c:	2001      	movs	r0, #1
 800ed6e:	e7a5      	b.n	800ecbc <_svfiprintf_r+0xd4>
 800ed70:	2300      	movs	r3, #0
 800ed72:	3401      	adds	r4, #1
 800ed74:	9305      	str	r3, [sp, #20]
 800ed76:	4619      	mov	r1, r3
 800ed78:	f04f 0c0a 	mov.w	ip, #10
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed82:	3a30      	subs	r2, #48	; 0x30
 800ed84:	2a09      	cmp	r2, #9
 800ed86:	d903      	bls.n	800ed90 <_svfiprintf_r+0x1a8>
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d0c5      	beq.n	800ed18 <_svfiprintf_r+0x130>
 800ed8c:	9105      	str	r1, [sp, #20]
 800ed8e:	e7c3      	b.n	800ed18 <_svfiprintf_r+0x130>
 800ed90:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed94:	4604      	mov	r4, r0
 800ed96:	2301      	movs	r3, #1
 800ed98:	e7f0      	b.n	800ed7c <_svfiprintf_r+0x194>
 800ed9a:	ab03      	add	r3, sp, #12
 800ed9c:	9300      	str	r3, [sp, #0]
 800ed9e:	462a      	mov	r2, r5
 800eda0:	4b0f      	ldr	r3, [pc, #60]	; (800ede0 <_svfiprintf_r+0x1f8>)
 800eda2:	a904      	add	r1, sp, #16
 800eda4:	4638      	mov	r0, r7
 800eda6:	f3af 8000 	nop.w
 800edaa:	1c42      	adds	r2, r0, #1
 800edac:	4606      	mov	r6, r0
 800edae:	d1d6      	bne.n	800ed5e <_svfiprintf_r+0x176>
 800edb0:	89ab      	ldrh	r3, [r5, #12]
 800edb2:	065b      	lsls	r3, r3, #25
 800edb4:	f53f af2c 	bmi.w	800ec10 <_svfiprintf_r+0x28>
 800edb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edba:	b01d      	add	sp, #116	; 0x74
 800edbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edc0:	ab03      	add	r3, sp, #12
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	462a      	mov	r2, r5
 800edc6:	4b06      	ldr	r3, [pc, #24]	; (800ede0 <_svfiprintf_r+0x1f8>)
 800edc8:	a904      	add	r1, sp, #16
 800edca:	4638      	mov	r0, r7
 800edcc:	f000 f87a 	bl	800eec4 <_printf_i>
 800edd0:	e7eb      	b.n	800edaa <_svfiprintf_r+0x1c2>
 800edd2:	bf00      	nop
 800edd4:	080216cc 	.word	0x080216cc
 800edd8:	080216d6 	.word	0x080216d6
 800eddc:	00000000 	.word	0x00000000
 800ede0:	0800eb31 	.word	0x0800eb31
 800ede4:	080216d2 	.word	0x080216d2

0800ede8 <_printf_common>:
 800ede8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edec:	4616      	mov	r6, r2
 800edee:	4699      	mov	r9, r3
 800edf0:	688a      	ldr	r2, [r1, #8]
 800edf2:	690b      	ldr	r3, [r1, #16]
 800edf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800edf8:	4293      	cmp	r3, r2
 800edfa:	bfb8      	it	lt
 800edfc:	4613      	movlt	r3, r2
 800edfe:	6033      	str	r3, [r6, #0]
 800ee00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee04:	4607      	mov	r7, r0
 800ee06:	460c      	mov	r4, r1
 800ee08:	b10a      	cbz	r2, 800ee0e <_printf_common+0x26>
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	6033      	str	r3, [r6, #0]
 800ee0e:	6823      	ldr	r3, [r4, #0]
 800ee10:	0699      	lsls	r1, r3, #26
 800ee12:	bf42      	ittt	mi
 800ee14:	6833      	ldrmi	r3, [r6, #0]
 800ee16:	3302      	addmi	r3, #2
 800ee18:	6033      	strmi	r3, [r6, #0]
 800ee1a:	6825      	ldr	r5, [r4, #0]
 800ee1c:	f015 0506 	ands.w	r5, r5, #6
 800ee20:	d106      	bne.n	800ee30 <_printf_common+0x48>
 800ee22:	f104 0a19 	add.w	sl, r4, #25
 800ee26:	68e3      	ldr	r3, [r4, #12]
 800ee28:	6832      	ldr	r2, [r6, #0]
 800ee2a:	1a9b      	subs	r3, r3, r2
 800ee2c:	42ab      	cmp	r3, r5
 800ee2e:	dc26      	bgt.n	800ee7e <_printf_common+0x96>
 800ee30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee34:	1e13      	subs	r3, r2, #0
 800ee36:	6822      	ldr	r2, [r4, #0]
 800ee38:	bf18      	it	ne
 800ee3a:	2301      	movne	r3, #1
 800ee3c:	0692      	lsls	r2, r2, #26
 800ee3e:	d42b      	bmi.n	800ee98 <_printf_common+0xb0>
 800ee40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee44:	4649      	mov	r1, r9
 800ee46:	4638      	mov	r0, r7
 800ee48:	47c0      	blx	r8
 800ee4a:	3001      	adds	r0, #1
 800ee4c:	d01e      	beq.n	800ee8c <_printf_common+0xa4>
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	68e5      	ldr	r5, [r4, #12]
 800ee52:	6832      	ldr	r2, [r6, #0]
 800ee54:	f003 0306 	and.w	r3, r3, #6
 800ee58:	2b04      	cmp	r3, #4
 800ee5a:	bf08      	it	eq
 800ee5c:	1aad      	subeq	r5, r5, r2
 800ee5e:	68a3      	ldr	r3, [r4, #8]
 800ee60:	6922      	ldr	r2, [r4, #16]
 800ee62:	bf0c      	ite	eq
 800ee64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee68:	2500      	movne	r5, #0
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	bfc4      	itt	gt
 800ee6e:	1a9b      	subgt	r3, r3, r2
 800ee70:	18ed      	addgt	r5, r5, r3
 800ee72:	2600      	movs	r6, #0
 800ee74:	341a      	adds	r4, #26
 800ee76:	42b5      	cmp	r5, r6
 800ee78:	d11a      	bne.n	800eeb0 <_printf_common+0xc8>
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	e008      	b.n	800ee90 <_printf_common+0xa8>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	4652      	mov	r2, sl
 800ee82:	4649      	mov	r1, r9
 800ee84:	4638      	mov	r0, r7
 800ee86:	47c0      	blx	r8
 800ee88:	3001      	adds	r0, #1
 800ee8a:	d103      	bne.n	800ee94 <_printf_common+0xac>
 800ee8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee94:	3501      	adds	r5, #1
 800ee96:	e7c6      	b.n	800ee26 <_printf_common+0x3e>
 800ee98:	18e1      	adds	r1, r4, r3
 800ee9a:	1c5a      	adds	r2, r3, #1
 800ee9c:	2030      	movs	r0, #48	; 0x30
 800ee9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eea2:	4422      	add	r2, r4
 800eea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eea8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eeac:	3302      	adds	r3, #2
 800eeae:	e7c7      	b.n	800ee40 <_printf_common+0x58>
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	4622      	mov	r2, r4
 800eeb4:	4649      	mov	r1, r9
 800eeb6:	4638      	mov	r0, r7
 800eeb8:	47c0      	blx	r8
 800eeba:	3001      	adds	r0, #1
 800eebc:	d0e6      	beq.n	800ee8c <_printf_common+0xa4>
 800eebe:	3601      	adds	r6, #1
 800eec0:	e7d9      	b.n	800ee76 <_printf_common+0x8e>
	...

0800eec4 <_printf_i>:
 800eec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eec8:	7e0f      	ldrb	r7, [r1, #24]
 800eeca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eecc:	2f78      	cmp	r7, #120	; 0x78
 800eece:	4691      	mov	r9, r2
 800eed0:	4680      	mov	r8, r0
 800eed2:	460c      	mov	r4, r1
 800eed4:	469a      	mov	sl, r3
 800eed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eeda:	d807      	bhi.n	800eeec <_printf_i+0x28>
 800eedc:	2f62      	cmp	r7, #98	; 0x62
 800eede:	d80a      	bhi.n	800eef6 <_printf_i+0x32>
 800eee0:	2f00      	cmp	r7, #0
 800eee2:	f000 80d8 	beq.w	800f096 <_printf_i+0x1d2>
 800eee6:	2f58      	cmp	r7, #88	; 0x58
 800eee8:	f000 80a3 	beq.w	800f032 <_printf_i+0x16e>
 800eeec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eef4:	e03a      	b.n	800ef6c <_printf_i+0xa8>
 800eef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eefa:	2b15      	cmp	r3, #21
 800eefc:	d8f6      	bhi.n	800eeec <_printf_i+0x28>
 800eefe:	a101      	add	r1, pc, #4	; (adr r1, 800ef04 <_printf_i+0x40>)
 800ef00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef04:	0800ef5d 	.word	0x0800ef5d
 800ef08:	0800ef71 	.word	0x0800ef71
 800ef0c:	0800eeed 	.word	0x0800eeed
 800ef10:	0800eeed 	.word	0x0800eeed
 800ef14:	0800eeed 	.word	0x0800eeed
 800ef18:	0800eeed 	.word	0x0800eeed
 800ef1c:	0800ef71 	.word	0x0800ef71
 800ef20:	0800eeed 	.word	0x0800eeed
 800ef24:	0800eeed 	.word	0x0800eeed
 800ef28:	0800eeed 	.word	0x0800eeed
 800ef2c:	0800eeed 	.word	0x0800eeed
 800ef30:	0800f07d 	.word	0x0800f07d
 800ef34:	0800efa1 	.word	0x0800efa1
 800ef38:	0800f05f 	.word	0x0800f05f
 800ef3c:	0800eeed 	.word	0x0800eeed
 800ef40:	0800eeed 	.word	0x0800eeed
 800ef44:	0800f09f 	.word	0x0800f09f
 800ef48:	0800eeed 	.word	0x0800eeed
 800ef4c:	0800efa1 	.word	0x0800efa1
 800ef50:	0800eeed 	.word	0x0800eeed
 800ef54:	0800eeed 	.word	0x0800eeed
 800ef58:	0800f067 	.word	0x0800f067
 800ef5c:	682b      	ldr	r3, [r5, #0]
 800ef5e:	1d1a      	adds	r2, r3, #4
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	602a      	str	r2, [r5, #0]
 800ef64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e0a3      	b.n	800f0b8 <_printf_i+0x1f4>
 800ef70:	6820      	ldr	r0, [r4, #0]
 800ef72:	6829      	ldr	r1, [r5, #0]
 800ef74:	0606      	lsls	r6, r0, #24
 800ef76:	f101 0304 	add.w	r3, r1, #4
 800ef7a:	d50a      	bpl.n	800ef92 <_printf_i+0xce>
 800ef7c:	680e      	ldr	r6, [r1, #0]
 800ef7e:	602b      	str	r3, [r5, #0]
 800ef80:	2e00      	cmp	r6, #0
 800ef82:	da03      	bge.n	800ef8c <_printf_i+0xc8>
 800ef84:	232d      	movs	r3, #45	; 0x2d
 800ef86:	4276      	negs	r6, r6
 800ef88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef8c:	485e      	ldr	r0, [pc, #376]	; (800f108 <_printf_i+0x244>)
 800ef8e:	230a      	movs	r3, #10
 800ef90:	e019      	b.n	800efc6 <_printf_i+0x102>
 800ef92:	680e      	ldr	r6, [r1, #0]
 800ef94:	602b      	str	r3, [r5, #0]
 800ef96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ef9a:	bf18      	it	ne
 800ef9c:	b236      	sxthne	r6, r6
 800ef9e:	e7ef      	b.n	800ef80 <_printf_i+0xbc>
 800efa0:	682b      	ldr	r3, [r5, #0]
 800efa2:	6820      	ldr	r0, [r4, #0]
 800efa4:	1d19      	adds	r1, r3, #4
 800efa6:	6029      	str	r1, [r5, #0]
 800efa8:	0601      	lsls	r1, r0, #24
 800efaa:	d501      	bpl.n	800efb0 <_printf_i+0xec>
 800efac:	681e      	ldr	r6, [r3, #0]
 800efae:	e002      	b.n	800efb6 <_printf_i+0xf2>
 800efb0:	0646      	lsls	r6, r0, #25
 800efb2:	d5fb      	bpl.n	800efac <_printf_i+0xe8>
 800efb4:	881e      	ldrh	r6, [r3, #0]
 800efb6:	4854      	ldr	r0, [pc, #336]	; (800f108 <_printf_i+0x244>)
 800efb8:	2f6f      	cmp	r7, #111	; 0x6f
 800efba:	bf0c      	ite	eq
 800efbc:	2308      	moveq	r3, #8
 800efbe:	230a      	movne	r3, #10
 800efc0:	2100      	movs	r1, #0
 800efc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800efc6:	6865      	ldr	r5, [r4, #4]
 800efc8:	60a5      	str	r5, [r4, #8]
 800efca:	2d00      	cmp	r5, #0
 800efcc:	bfa2      	ittt	ge
 800efce:	6821      	ldrge	r1, [r4, #0]
 800efd0:	f021 0104 	bicge.w	r1, r1, #4
 800efd4:	6021      	strge	r1, [r4, #0]
 800efd6:	b90e      	cbnz	r6, 800efdc <_printf_i+0x118>
 800efd8:	2d00      	cmp	r5, #0
 800efda:	d04d      	beq.n	800f078 <_printf_i+0x1b4>
 800efdc:	4615      	mov	r5, r2
 800efde:	fbb6 f1f3 	udiv	r1, r6, r3
 800efe2:	fb03 6711 	mls	r7, r3, r1, r6
 800efe6:	5dc7      	ldrb	r7, [r0, r7]
 800efe8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800efec:	4637      	mov	r7, r6
 800efee:	42bb      	cmp	r3, r7
 800eff0:	460e      	mov	r6, r1
 800eff2:	d9f4      	bls.n	800efde <_printf_i+0x11a>
 800eff4:	2b08      	cmp	r3, #8
 800eff6:	d10b      	bne.n	800f010 <_printf_i+0x14c>
 800eff8:	6823      	ldr	r3, [r4, #0]
 800effa:	07de      	lsls	r6, r3, #31
 800effc:	d508      	bpl.n	800f010 <_printf_i+0x14c>
 800effe:	6923      	ldr	r3, [r4, #16]
 800f000:	6861      	ldr	r1, [r4, #4]
 800f002:	4299      	cmp	r1, r3
 800f004:	bfde      	ittt	le
 800f006:	2330      	movle	r3, #48	; 0x30
 800f008:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f00c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f010:	1b52      	subs	r2, r2, r5
 800f012:	6122      	str	r2, [r4, #16]
 800f014:	f8cd a000 	str.w	sl, [sp]
 800f018:	464b      	mov	r3, r9
 800f01a:	aa03      	add	r2, sp, #12
 800f01c:	4621      	mov	r1, r4
 800f01e:	4640      	mov	r0, r8
 800f020:	f7ff fee2 	bl	800ede8 <_printf_common>
 800f024:	3001      	adds	r0, #1
 800f026:	d14c      	bne.n	800f0c2 <_printf_i+0x1fe>
 800f028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f02c:	b004      	add	sp, #16
 800f02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f032:	4835      	ldr	r0, [pc, #212]	; (800f108 <_printf_i+0x244>)
 800f034:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f038:	6829      	ldr	r1, [r5, #0]
 800f03a:	6823      	ldr	r3, [r4, #0]
 800f03c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f040:	6029      	str	r1, [r5, #0]
 800f042:	061d      	lsls	r5, r3, #24
 800f044:	d514      	bpl.n	800f070 <_printf_i+0x1ac>
 800f046:	07df      	lsls	r7, r3, #31
 800f048:	bf44      	itt	mi
 800f04a:	f043 0320 	orrmi.w	r3, r3, #32
 800f04e:	6023      	strmi	r3, [r4, #0]
 800f050:	b91e      	cbnz	r6, 800f05a <_printf_i+0x196>
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	f023 0320 	bic.w	r3, r3, #32
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	2310      	movs	r3, #16
 800f05c:	e7b0      	b.n	800efc0 <_printf_i+0xfc>
 800f05e:	6823      	ldr	r3, [r4, #0]
 800f060:	f043 0320 	orr.w	r3, r3, #32
 800f064:	6023      	str	r3, [r4, #0]
 800f066:	2378      	movs	r3, #120	; 0x78
 800f068:	4828      	ldr	r0, [pc, #160]	; (800f10c <_printf_i+0x248>)
 800f06a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f06e:	e7e3      	b.n	800f038 <_printf_i+0x174>
 800f070:	0659      	lsls	r1, r3, #25
 800f072:	bf48      	it	mi
 800f074:	b2b6      	uxthmi	r6, r6
 800f076:	e7e6      	b.n	800f046 <_printf_i+0x182>
 800f078:	4615      	mov	r5, r2
 800f07a:	e7bb      	b.n	800eff4 <_printf_i+0x130>
 800f07c:	682b      	ldr	r3, [r5, #0]
 800f07e:	6826      	ldr	r6, [r4, #0]
 800f080:	6961      	ldr	r1, [r4, #20]
 800f082:	1d18      	adds	r0, r3, #4
 800f084:	6028      	str	r0, [r5, #0]
 800f086:	0635      	lsls	r5, r6, #24
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	d501      	bpl.n	800f090 <_printf_i+0x1cc>
 800f08c:	6019      	str	r1, [r3, #0]
 800f08e:	e002      	b.n	800f096 <_printf_i+0x1d2>
 800f090:	0670      	lsls	r0, r6, #25
 800f092:	d5fb      	bpl.n	800f08c <_printf_i+0x1c8>
 800f094:	8019      	strh	r1, [r3, #0]
 800f096:	2300      	movs	r3, #0
 800f098:	6123      	str	r3, [r4, #16]
 800f09a:	4615      	mov	r5, r2
 800f09c:	e7ba      	b.n	800f014 <_printf_i+0x150>
 800f09e:	682b      	ldr	r3, [r5, #0]
 800f0a0:	1d1a      	adds	r2, r3, #4
 800f0a2:	602a      	str	r2, [r5, #0]
 800f0a4:	681d      	ldr	r5, [r3, #0]
 800f0a6:	6862      	ldr	r2, [r4, #4]
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	f7f1 f8f8 	bl	80002a0 <memchr>
 800f0b0:	b108      	cbz	r0, 800f0b6 <_printf_i+0x1f2>
 800f0b2:	1b40      	subs	r0, r0, r5
 800f0b4:	6060      	str	r0, [r4, #4]
 800f0b6:	6863      	ldr	r3, [r4, #4]
 800f0b8:	6123      	str	r3, [r4, #16]
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0c0:	e7a8      	b.n	800f014 <_printf_i+0x150>
 800f0c2:	6923      	ldr	r3, [r4, #16]
 800f0c4:	462a      	mov	r2, r5
 800f0c6:	4649      	mov	r1, r9
 800f0c8:	4640      	mov	r0, r8
 800f0ca:	47d0      	blx	sl
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	d0ab      	beq.n	800f028 <_printf_i+0x164>
 800f0d0:	6823      	ldr	r3, [r4, #0]
 800f0d2:	079b      	lsls	r3, r3, #30
 800f0d4:	d413      	bmi.n	800f0fe <_printf_i+0x23a>
 800f0d6:	68e0      	ldr	r0, [r4, #12]
 800f0d8:	9b03      	ldr	r3, [sp, #12]
 800f0da:	4298      	cmp	r0, r3
 800f0dc:	bfb8      	it	lt
 800f0de:	4618      	movlt	r0, r3
 800f0e0:	e7a4      	b.n	800f02c <_printf_i+0x168>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	4632      	mov	r2, r6
 800f0e6:	4649      	mov	r1, r9
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	47d0      	blx	sl
 800f0ec:	3001      	adds	r0, #1
 800f0ee:	d09b      	beq.n	800f028 <_printf_i+0x164>
 800f0f0:	3501      	adds	r5, #1
 800f0f2:	68e3      	ldr	r3, [r4, #12]
 800f0f4:	9903      	ldr	r1, [sp, #12]
 800f0f6:	1a5b      	subs	r3, r3, r1
 800f0f8:	42ab      	cmp	r3, r5
 800f0fa:	dcf2      	bgt.n	800f0e2 <_printf_i+0x21e>
 800f0fc:	e7eb      	b.n	800f0d6 <_printf_i+0x212>
 800f0fe:	2500      	movs	r5, #0
 800f100:	f104 0619 	add.w	r6, r4, #25
 800f104:	e7f5      	b.n	800f0f2 <_printf_i+0x22e>
 800f106:	bf00      	nop
 800f108:	080216dd 	.word	0x080216dd
 800f10c:	080216ee 	.word	0x080216ee

0800f110 <memmove>:
 800f110:	4288      	cmp	r0, r1
 800f112:	b510      	push	{r4, lr}
 800f114:	eb01 0402 	add.w	r4, r1, r2
 800f118:	d902      	bls.n	800f120 <memmove+0x10>
 800f11a:	4284      	cmp	r4, r0
 800f11c:	4623      	mov	r3, r4
 800f11e:	d807      	bhi.n	800f130 <memmove+0x20>
 800f120:	1e43      	subs	r3, r0, #1
 800f122:	42a1      	cmp	r1, r4
 800f124:	d008      	beq.n	800f138 <memmove+0x28>
 800f126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f12a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f12e:	e7f8      	b.n	800f122 <memmove+0x12>
 800f130:	4402      	add	r2, r0
 800f132:	4601      	mov	r1, r0
 800f134:	428a      	cmp	r2, r1
 800f136:	d100      	bne.n	800f13a <memmove+0x2a>
 800f138:	bd10      	pop	{r4, pc}
 800f13a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f13e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f142:	e7f7      	b.n	800f134 <memmove+0x24>

0800f144 <_realloc_r>:
 800f144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f148:	4680      	mov	r8, r0
 800f14a:	4614      	mov	r4, r2
 800f14c:	460e      	mov	r6, r1
 800f14e:	b921      	cbnz	r1, 800f15a <_realloc_r+0x16>
 800f150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f154:	4611      	mov	r1, r2
 800f156:	f7ff bb71 	b.w	800e83c <_malloc_r>
 800f15a:	b92a      	cbnz	r2, 800f168 <_realloc_r+0x24>
 800f15c:	f7ff fc9c 	bl	800ea98 <_free_r>
 800f160:	4625      	mov	r5, r4
 800f162:	4628      	mov	r0, r5
 800f164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f168:	f000 f81b 	bl	800f1a2 <_malloc_usable_size_r>
 800f16c:	4284      	cmp	r4, r0
 800f16e:	4607      	mov	r7, r0
 800f170:	d802      	bhi.n	800f178 <_realloc_r+0x34>
 800f172:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f176:	d812      	bhi.n	800f19e <_realloc_r+0x5a>
 800f178:	4621      	mov	r1, r4
 800f17a:	4640      	mov	r0, r8
 800f17c:	f7ff fb5e 	bl	800e83c <_malloc_r>
 800f180:	4605      	mov	r5, r0
 800f182:	2800      	cmp	r0, #0
 800f184:	d0ed      	beq.n	800f162 <_realloc_r+0x1e>
 800f186:	42bc      	cmp	r4, r7
 800f188:	4622      	mov	r2, r4
 800f18a:	4631      	mov	r1, r6
 800f18c:	bf28      	it	cs
 800f18e:	463a      	movcs	r2, r7
 800f190:	f7ff fb1e 	bl	800e7d0 <memcpy>
 800f194:	4631      	mov	r1, r6
 800f196:	4640      	mov	r0, r8
 800f198:	f7ff fc7e 	bl	800ea98 <_free_r>
 800f19c:	e7e1      	b.n	800f162 <_realloc_r+0x1e>
 800f19e:	4635      	mov	r5, r6
 800f1a0:	e7df      	b.n	800f162 <_realloc_r+0x1e>

0800f1a2 <_malloc_usable_size_r>:
 800f1a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1a6:	1f18      	subs	r0, r3, #4
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	bfbc      	itt	lt
 800f1ac:	580b      	ldrlt	r3, [r1, r0]
 800f1ae:	18c0      	addlt	r0, r0, r3
 800f1b0:	4770      	bx	lr
	...

0800f1b4 <_init>:
 800f1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b6:	bf00      	nop
 800f1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ba:	bc08      	pop	{r3}
 800f1bc:	469e      	mov	lr, r3
 800f1be:	4770      	bx	lr

0800f1c0 <_fini>:
 800f1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c2:	bf00      	nop
 800f1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1c6:	bc08      	pop	{r3}
 800f1c8:	469e      	mov	lr, r3
 800f1ca:	4770      	bx	lr
